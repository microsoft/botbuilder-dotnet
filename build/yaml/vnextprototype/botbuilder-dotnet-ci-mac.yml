#
# Replaces the classic BotBuilder-DotNet-master-CI-PR-(MacLinux)
#

# "name" here defines the build number format. Build number is accessed via $(Build.BuildNumber)
name: $(Build.BuildId)

pool:
    vmImage: 'macOS-10.14'

trigger: none # ci trigger is set in ADO
pr: none # pr trigger is set in ADO

variables:
  BuildConfiguration: debug

steps:
# Note: Template ci-build-steps.yml is not supported in macOS because it calls VSBuild@1 in order to build the Windows-only ASP.NET Desktop assemblies.
- task: UseDotNet@2
  displayName: 'Use .Net Core sdk 2.1.x'
  inputs:
    version: 2.1.x

- task: UseDotNet@2
  displayName: 'Use .Net Core sdk 3.1.101'
  inputs:
    version: 3.1.101

- powershell: 'gci env:* | sort-object name | Format-Table -AutoSize -Wrap'
  displayName: 'Display env vars'

- task: NuGetToolInstaller@1
  displayName: 'Use NuGet '

- task: NuGetCommand@2
  displayName: 'NuGet restore'
  inputs:
    restoreSolution: Microsoft.Bot.Builder-Standard.sln

- task: DotNetCoreCLI@2
  displayName: 'dotnet build'
  inputs:
    projects: Microsoft.Bot.Builder.sln

- task: DotNetCoreCLI@2
  displayName: 'dotnet test'
  inputs:
    command: test
    projects: |
     Tests/**/*Tests.csproj
     
    arguments: '-v n  --configuration $(BuildConfiguration) --no-build --no-restore --filter "TestCategory!=IgnoreInAutomatedBuild&TestCategory!=FunctionalTests&TestCategory!=WindowsOnly" --collect:"Code Coverage" --settings $(Build.SourcesDirectory)\CodeCoverage.runsettings'

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: build folder'
  inputs:
    PathtoPublish: build
    ArtifactName: build

- powershell: |
   cd ..
   ls -R
  displayName: 'Dir workspace'
  continueOnError: true
  condition: succeededOrFailed()
