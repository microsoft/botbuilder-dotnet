#
# These functional test setup steps are called by botbuilder-dotnet-sign.yml and botbuilder-dotnet-functional-tests-setup.yml
#
steps:
- task: DotNetCoreCLI@2
  displayName: 'Create Microsoft.Bot.Builder.TestBot.zip for deploy to Azure'
  inputs:
    command: publish
    publishWebProjects: false
    projects: '$(System.DefaultWorkingDirectory)\tests\Microsoft.Bot.Builder.TestBot\Microsoft.Bot.Builder.TestBot.csproj'
    arguments: '-r linux-x64 --output $(System.DefaultWorkingDirectory)\tests\Microsoft.Bot.Builder.TestBot\PublishedBot --configuration $(TestConfiguration) --framework net6.0'

- task: CopyFiles@2
  displayName: 'Copy root Directory.Build.props to staging'
  inputs:
    SourceFolder: '$(System.DefaultWorkingDirectory)'
    Contents: Directory.Build.props
    TargetFolder: '$(Build.ArtifactStagingDirectory)\Test'

- task: CopyFiles@2
  displayName: 'Copy FunctionalTests to staging'
  inputs:
    SourceFolder: '$(System.DefaultWorkingDirectory)\FunctionalTests'
    Contents: '**\*'
    TargetFolder: '$(Build.ArtifactStagingDirectory)\Test\FunctionalTests'

- task: CopyFiles@2
  displayName: 'Copy libraries to staging'
  inputs:
    SourceFolder: '$(System.DefaultWorkingDirectory)\libraries'
    Contents: '**\*'
    TargetFolder: '$(Build.ArtifactStagingDirectory)\Test\libraries'

- task: CopyFiles@2
  displayName: 'Copy tests\integration to staging'
  inputs:
    SourceFolder: '$(System.DefaultWorkingDirectory)\tests\integration'
    Contents: '**\*'
    TargetFolder: '$(Build.ArtifactStagingDirectory)\Test\tests\integration'

- task: CopyFiles@2
  displayName: 'Copy test bot to staging'
  inputs:
    SourceFolder: '$(System.DefaultWorkingDirectory)\tests\Microsoft.Bot.Builder.TestBot'
    Contents: '**\*'
    TargetFolder: '$(Build.ArtifactStagingDirectory)\Test\tests\Microsoft.Bot.Builder.TestBot'

- task: CopyFiles@2
  displayName: 'Copy CodeCoverage.runsettings and PublishToCoveralls.ps1 to staging'
  inputs:
    SourceFolder: '$(System.DefaultWorkingDirectory)'
    Contents: |
     CodeCoverage.runsettings
     build\PublishToCoveralls.ps1
    TargetFolder: '$(Build.ArtifactStagingDirectory)\Test'
    flattenFolders: true

- task: PublishBuildArtifacts@1
  displayName: 'Push functional test items to Artifacts Test'
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)\Test'
    ArtifactName: Test

- script: |
   cd ..
   dir *.* /s
  displayName: 'Dir workspace'
  continueOnError: true
  condition: succeededOrFailed()
  enabled: true
