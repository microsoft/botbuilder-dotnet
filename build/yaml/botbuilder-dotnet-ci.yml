#
# Replaces the classic BotBuilder-DotNet-master-CI-PR
#

# "name" here defines the build number format. Build number is accessed via $(Build.BuildNumber)
name: $(Build.BuildId)

pool:
  vmImage: $[ coalesce( variables['VMImage'], 'windows-2022' ) ] # or 'windows-latest'
  demands:
  - msbuild
  - visualstudio

trigger: none # ci trigger is set in ADO
pr: none # pr trigger is set in ADO

variables:
  ApiContractVersion: 4.6.3
  PackagesToValidate: Microsoft.Bot.Builder.AI.Luis,Microsoft.Bot.Builder.AI.QnA,Microsoft.Bot.Builder.ApplicationInsights,Microsoft.Bot.Builder.Azure,Microsoft.Bot.Builder.Dialogs,Microsoft.Bot.Builder.Integration.ApplicationInsights.Core,Microsoft.Bot.Builder.Integration.AspNet.Core,Microsoft.Bot.Builder.TemplateManager,Microsoft.Bot.Builder.Testing,Microsoft.Bot.Builder,Microsoft.Bot.Configuration,Microsoft.Bot.Connector,Microsoft.Bot.Schema,Microsoft.Bot.Streaming
  BuildConfiguration: Debug-Windows
  BuildPlatform: any cpu
  IsBuildServer: true # This is consumed by tests\Microsoft.Bot.Builder.Dialogs.Declarative.Tests\SchemaTestsFixture.cs.
  MSBuildArguments: -p:SignAssembly=false -p:delaySign=false
  Parameters.solution: Microsoft.Bot.Builder.sln
  PreviewPackageVersion: 4.9.0-preview-$(Build.BuildNumber) # This is consumed by projects in Microsoft.Bot.Builder.sln.
  ReleasePackageVersion: 4.9.0-preview-$(Build.BuildNumber) # This is consumed by projects in Microsoft.Bot.Builder.sln.
  runCodesignValidationInjection: false # Disables unnecessary CodeSign Validation step
  system_accesstoken: $(System.AccessToken)
  LGTM.UploadSnapshot: true
  Semmle.SkipAnalysis: true
#  ApiCompatExcludeClasses: (optional) define this in Azure
#  DisableApiCompatibityValidation: (optional) define this in Azure
#  DotNetCoverallsToken: define this in Azure
#  GitHubCommentApiKey: define this in Azure
#  SDK_Dotnet_V4_org_Url: define this in Azure

# The following 2 stages run multi-configuration, multi-agent parallel jobs.
# Debug-Windows/Release-Windows => Builds everything in Debug/Release + the ASP.NET Desktop.
# Debug/Release => would build all .NET Standard libs and test them.
# The .NET 4.X asp.net integrations libraries do not build and test on non-windows boxes.
# If we drop support for .NET 4.x then we can drop to just Debug/Release.
stages:
- stage: Build
  jobs:
  - job: Debug_Windows_Configuration_31
    variables:
      BuildConfiguration: Debug-Windows
      BuildTarget: 'netcoreapp31' # set the TargetFramework property for tests to use netcoreapp3.1
    steps:
    - template: ci-build-steps.yml
    - template: ci-test-steps.yml
    - template: ci-component-detection-steps.yml
  - job: Debug_Windows_Configuration_6
    variables:
      BuildConfiguration: Debug-Windows
      BuildTarget: 'net6' # set the TargetFramework property for tests to use net6.0
    steps:
    - template: ci-build-steps.yml
    - template: ci-test-steps.yml
    - template: ci-component-detection-steps.yml
  - job: Release_Windows_Configuration_31
    variables:
      BuildConfiguration: Release-Windows
      BuildTarget: 'netcoreapp31' # set the TargetFramework property for tests to use netcoreapp3.1
    steps:
    - template: ci-build-steps.yml
    - template: ci-test-steps.yml
    - template: ci-component-detection-steps.yml
  - job: Release_Windows_Configuration_6
    variables:
      BuildConfiguration: Release-Windows
      BuildTarget: 'net6' # set the TargetFramework property for tests to use net6.0
      PublishCoverage: true
    steps:
    - template: ci-build-steps.yml
    - template: ci-test-steps.yml
    - template: ci-component-detection-steps.yml

- stage: API_Compatibility_Validation
  dependsOn: Build
  condition: and(succeeded(), ne(variables['DisableApiCompatibityValidation'], 'true'))
  variables:
    skipComponentGovernanceDetection: true # the task is already injected into the build jobs, so unnecessary here.
  jobs:
  - job: generate_multiconfig_var
    steps:
    # Download contract .dlls from nuget.org.
    - powershell: |
        $PackageNames = "$(PackagesToValidate)";
        $ApiContractVersion = "$(ApiContractVersion)";
        $TempContractInstallDirectory = ".\TempContractInstallDir";
        $OutputDirectory = ".\ContractDlls";

        Write-Host "`nDownloading packages version $ApiContractVersion.";

        New-Item -ItemType directory -Path $OutputDirectory -Force | Out-Null;

        $Names = $PackageNames.Split(',');

        foreach ($Name in $Names) {
          "---- $Name ------------------";
          nuget install $Name -Version $ApiContractVersion -OutputDirectory $TempContractInstallDirectory -DirectDownload -NonInteractive;

          if ($LASTEXITCODE -eq 0) {
            Copy-Item "$TempContractInstallDirectory\$Name.$ApiContractVersion\lib\netstandard2.0\$Name.dll" $OutputDirectory;
          }
          else {
            Write-Host "##vso[task.complete result=Failed;]";
          }
        }
      displayName: 'Download Contract DLLs to ContractDlls folder'
      continueOnError: true

    - task: PublishPipelineArtifact@0
      inputs:
        artifactName: 'ContractDlls'
        targetPath: ContractDlls
      displayName: 'Push to ContractDlls in Artifacts'
      continueOnError: true

    - powershell: |
       $multiconfig = '{';
       if ("$(Build.Reason)" -in ('Schedule', 'Manual')) {
         $env:PackagesToValidate.Split(",") | ForEach {
           $library = $_.Trim()
           $threadName = $library -replace "Microsoft.", "";
           $multiconfig += "'" + $threadName + "':{'PackageName':'" + $library + "'}, ";
         }
       }
       else {
         $updatedFiles = $(git diff HEAD HEAD~ --name-only)

         $updatedFiles | ForEach-Object {
           $changedLibrary = ''
           Switch -Wildcard ($_) {
             '*/Microsoft.Bot.Builder.AI.Luis/*' { $changedLibrary = 'Microsoft.Bot.Builder.AI.Luis' }
             '*/Microsoft.Bot.Builder.AI.QnA/*' { $changedLibrary = 'Microsoft.Bot.Builder.AI.QnA' }
             '*/Microsoft.Bot.Builder.ApplicationInsights/*' { $changedLibrary = 'Microsoft.Bot.Builder.ApplicationInsights' }
             '*/Microsoft.Bot.Builder.Azure/*' { $changedLibrary = 'Microsoft.Bot.Builder.Azure' }
             '*/Microsoft.Bot.Builder.Dialogs/*' { $changedLibrary = 'Microsoft.Bot.Builder.Dialogs' }
             '*/Microsoft.Bot.Builder.Integration.ApplicationInsights.Core/*' { $changedLibrary = 'Microsoft.Bot.Builder.Integration.ApplicationInsights.Core' }
             '*/Microsoft.Bot.Builder.Integration.AspNet.Core/*' { $changedLibrary = 'Microsoft.Bot.Builder.Integration.AspNet.Core' }
             '*/Microsoft.Bot.Builder.TemplateManager/*' { $changedLibrary = 'Microsoft.Bot.Builder.TemplateManager' }
             '*/Microsoft.Bot.Builder.Testing/*' { $changedLibrary = 'Microsoft.Bot.Builder.Testing' }
             '*/Microsoft.Bot.Builder/*' { $changedLibrary = 'Microsoft.Bot.Builder' }
             '*/Microsoft.Bot.Configuration/*' { $changedLibrary = 'Microsoft.Bot.Configuration' }
             '*/Microsoft.Bot.Connector/*' { $changedLibrary = 'Microsoft.Bot.Connector' }
             '*/Microsoft.Bot.Schema/*' { $changedLibrary = 'Microsoft.Bot.Schema' }
             '*/Microsoft.Bot.Streaming/*' { $changedLibrary = 'Microsoft.Bot.Streaming' }
           }
           if ($changedLibrary.Length -gt 0) {
             Write-Host $changedLibrary
             $threadName = $changedLibrary.Split(".")[-1];
             $multiconfig += "'" + $threadName + "':{'PackageName':'" + $changedLibrary + "'}, ";
           }
          }
       }
       $multiconfig = $multiconfig.TrimEnd(' ').TrimEnd(',') + "}";
       echo 'Matrix variable:'
       echo $multiconfig
       "##vso[task.setVariable variable=MULTICONFIG;isOutput=true]$multiconfig"
      name: generate_var
      displayName: Generate matrix variable

  - job: check_api_for
    dependsOn: generate_multiconfig_var
    condition: ne(dependencies.generate_multiconfig_var.outputs['generate_var.MULTICONFIG'], '{}')
    timeoutInMinutes: 10
    strategy:
      maxParallel: 10
      matrix: $[ dependencies.generate_multiconfig_var.outputs['generate_var.MULTICONFIG'] ]
    steps:
    - template: ci-api-validation-steps.yml

  - job: post_results_to_gitHub
    dependsOn: check_api_for
    condition: ne(dependencies.generate_multiconfig_var.outputs['generate_var.MULTICONFIG'], '{}')
    variables:
      BuildConfiguration: Release-Windows
    steps:
    - template: ci-post-to-github-steps.yml
