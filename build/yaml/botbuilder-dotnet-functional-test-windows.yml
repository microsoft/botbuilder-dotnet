#
# Run functional tests on bot deployed to Azure Windows
#

# "name" here defines the build number format. Build number is accessed via $(Build.BuildNumber)
name: $(Build.BuildId)

pool:
  vmImage: $[ coalesce( variables['VMImage'], 'windows-2022' ) ] # or 'windows-latest'

trigger: # ci trigger
  batch: true
  branches:
    include:
    - main
  paths:
    include:
    - '*'
    exclude:
    - doc/
    - specs/
    - Changes.md
    - LICENSE
    - README.md
    - UsingMyGet.md

pr: # pr trigger
  branches:
    include:
    - main
  paths:
    include:
    - build/yaml/botbuilder-dotnet-functional-test-windows.yml

variables:
  AppId: $(WinTestBotAppId)
  AppSecret: $(WinTestBotAppSecret)
  BotGroup: $(WinTestBotBotGroup)
  BotName: $(WinTestBotBotName)
  BuildPlatform: 'any cpu'
  BuildConfiguration: 'Release'
  MSBuildArguments: -p:SignAssembly=false -p:delaySign=false -p:RunAnalyzersDuringBuild=false
  Parameters.solution: Microsoft.Bot.Builder.sln
  runCodesignValidationInjection: false # Disables unnecessary CodeSign Validation step  
  skipComponentGovernanceDetection: true # Disables unnecessary Component Governanace Detection step 
  SolutionDir: $(System.DefaultWorkingDirectory) # Consumed in dotnet publish by Directory.Build.props and a few test projects.
#  AzureSubscription: define this in Azure
#  DeleteResourceGroup: (optional) define this in Azure. Default = true.
#  WinTestBotAppId: define this in Azure
#  WinTestBotAppSecret: define this in Azure
#  WinTestBotBotGroup: define this in Azure
#  WinTestBotBotName: define this in Azure

steps:
- powershell: 'gci env:* | sort-object name | Format-Table -AutoSize -Wrap'
  displayName: 'Display env vars'

- powershell: |
   # Create DateTimeTag for Resource Group
   $DateTimeTag=Get-Date -Format "yyyy-MM-ddTHH:mm:ssZ"
   "##vso[task.setvariable variable=DateTimeTag]$DateTimeTag";
  displayName: 'Create DateTimeTag for Resource Group'
  # Get-Date on Azure DevOps returns a datetime relative to UTC-0, so "Z" is being used instead of the dynamic "K".

- task: AzureCLI@2
  displayName: 'Preexisting RG: create Azure resources. Runs in even builds.'
  inputs:
    azureSubscription: $(AzureSubscription)
    scriptType: ps
    scriptLocation: inlineScript
    inlineScript: |
     Write-Host "`n***** Creating Azure resources using the preexisting-rg template *****";
     Write-Host "This task runs for even-numbered builds. Build ID = $(Build.BuildId)";
     Write-Host "************************************************************************";
     Set-PSDebug -Trace 1;
     az group create --location westus --name $(BotGroup) --tags buildName="$(Build.DefinitionName)" cause=automation date="$(DateTimeTag)" product="$(Build.Repository.Name)" sourceBranch="$(Build.SourceBranch)";
     
     # set up bot channels registration, app service, app service plan
     az deployment group create --resource-group "$(BotGroup)" --template-file "$(System.DefaultWorkingDirectory)\FunctionalTests\ExportedTemplate\template-with-preexisting-rg.json" --parameters appId=$(AppId) appSecret="$(AppSecret)" botId="$(BotName)" botSku=F0 newAppServicePlanName="$(BotName)" newWebAppName="$(BotName)" appServicePlanLocation="westus" --name "$(BotName)"
     Set-PSDebug -Trace 0;
  condition: and(succeeded(), or( endsWith(variables['Build.BuildId'], 0), endsWith(variables['Build.BuildId'], 2), endsWith(variables['Build.BuildId'], 4), endsWith(variables['Build.BuildId'], 6), endsWith(variables['Build.BuildId'], 8)))

- task: AzureCLI@2
  displayName: 'New RG: create Azure resources. Runs in odd builds.'
  inputs:
    azureSubscription: $(AzureSubscription)
    scriptType: ps
    scriptLocation: inlineScript
    inlineScript: |
     Write-Host "`n***** Creating Azure resources using the new-rg template *****";
     Write-Host "This task runs for odd-numbered builds. Build ID = $(Build.BuildId)";
     Write-Host "****************************************************************";
     Set-PSDebug -Trace 1;
     
     # set up resource group, bot channels registration, app service, app service plan
     az deployment sub create --name "$(BotGroup)" --template-file "$(System.DefaultWorkingDirectory)\FunctionalTests\ExportedTemplate\template-with-new-rg.json" --location "westus" --parameters appId=$(AppId) appSecret="$(AppSecret)" botId="$(BotName)" botSku=F0 newAppServicePlanName="$(BotName)" newAppServicePlanLocation="westus" newWebAppName="$(BotName)" groupName="$(BotGroup)" groupLocation="westus" groupTags='{\"buildName\":\"$(Build.DefinitionName)\", \"cause\":\"automation\", \"date\":\"$(DateTimeTag)\", \"product\":\"$(Build.Repository.Name)\", \"sourceBranch\":\"$(Build.SourceBranch)\"}';
     Set-PSDebug -Trace 0;
  condition: and(succeeded(), or( endsWith(variables['Build.BuildId'], 1), endsWith(variables['Build.BuildId'], 3), endsWith(variables['Build.BuildId'], 5), endsWith(variables['Build.BuildId'], 7), endsWith(variables['Build.BuildId'], 9)))

- task: AzureCLI@1
  displayName: 'Create resources'
  inputs:
    azureSubscription: $(AzureSubscription)
    scriptLocation: inlineScript
    inlineScript: |
     :: Comment out either Option 1 or Option 2 below. Ultimately, both templates should be exercised to ensure they continue to work.
     
     :: Option 1: Use the "new-rg" template:
     call az deployment sub create --name "$(BotGroup)" --template-file "$(System.DefaultWorkingDirectory)\FunctionalTests\ExportedTemplate\template-with-new-rg.json" --location "westus" --parameters appId=$(AppId) appSecret="$(AppSecret)" botId="$(BotName)" botSku=F0 newAppServicePlanName="$(BotName)" newAppServicePlanLocation="westus" newWebAppName="$(BotName)" groupName="$(BotGroup)" groupLocation="westus"
     
     :: Option 2: Use the "preexisting-rg" template:
     ::call az group create --location westus --name $(BotGroup) --tags buildName="$(Build.DefinitionName)" cause=automation date="$(DateTimeTag)" product="$(Build.Repository.Name)" sourceBranch="$(Build.SourceBranch)"
     ::call az deployment group create --resource-group "$(BotGroup)" --template-file "$(System.DefaultWorkingDirectory)\FunctionalTests\ExportedTemplate\template-with-preexisting-rg.json" --parameters appId=$(AppId) appSecret="$(AppSecret)" botId="$(BotName)" botSku=F0 newAppServicePlanName="$(BotName)" newWebAppName="$(BotName)" appServicePlanLocation="westus" --name "$(BotName)"

- task: NuGetToolInstaller@1
  displayName: 'Use NuGet latest'

# The next tasks are put here before "Deploy the bot" to give time for the new Azure resources to settle.
- task: NuGetCommand@2
  inputs:
    command: 'restore'
    restoreSolution: '**/*.sln'
    feedsToUse: 'select'
    verbosityRestore: 'Detailed'
  displayName: 'NuGet restore'

- task: DotNetCoreCLI@2
  displayName: 'Dotnet Publish TestBot'
  inputs:
    command: publish
    publishWebProjects: false
    projects: '$(System.DefaultWorkingDirectory)\tests\Microsoft.Bot.Builder.TestBot\Microsoft.Bot.Builder.TestBot.csproj'
    arguments: '--configuration $(BuildConfiguration) --output $(System.DefaultWorkingDirectory)\tests\Microsoft.Bot.Builder.TestBot\publishedbot -p:TreatWarningsAsErrors=false -p:RestoreUseSkipNonexistentTargets=false'
    modifyOutputPath: false

- task: AzureCLI@1
  displayName: 'Deploy the bot, create DirectLine channel'
  inputs:
    azureSubscription: $(AzureSubscription)
    scriptLocation: inlineScript
    inlineScript: |
     call az webapp deployment source config-zip --resource-group "$(BotGroup)" --name "$(BotName)" --src "$(System.DefaultWorkingDirectory)\tests\Microsoft.Bot.Builder.TestBot\publishedbot\PublishedBot.zip"
     call az bot directline create -n "$(BotName)" -g "$(BotGroup)" > "$(System.DefaultWorkingDirectory)\DirectLineCreate.json"

- powershell: |
   $json = Get-Content '$(System.DefaultWorkingDirectory)\DirectLineCreate.json' | Out-String | ConvertFrom-Json
   $key = $json.properties.properties.sites.key
   echo "##vso[task.setvariable variable=DIRECTLINE;]$key"
   echo "##vso[task.setvariable variable=BOTID;]$(BotName)"
   Write-Host "DIRECTLINE=$key";
   Write-Host "BOTID=$(BotName)";
  displayName: 'Set directline key for test'

- task: DotNetCoreCLI@2
  displayName: 'dotnet test'
  inputs:
    command: test
    projects: '$(System.DefaultWorkingDirectory)\FunctionalTests\**\*FunctionalTests.csproj'
    arguments: '-v n --configuration $(BuildConfiguration) --filter "TestCategory=FunctionalTests&TestCategory!=Adapters"'
    workingDirectory: tests
  env:
    TestAppId: $(WinTestBotAppId)
    TestPassword: $(WinTestBotAppSecret)

- task: AzureCLI@1
  displayName: 'Delete Resources'
  inputs:
    azureSubscription: $(AzureSubscription)
    scriptLocation: inlineScript
    inlineScript: 'call az group delete -n "$(BotGroup)" --yes'
  condition: and(always(), ne(variables['DeleteResourceGroup'], 'false'))

- powershell: |
   cd ..
   ls -R
  displayName: 'Dir workspace'
  continueOnError: true
  condition: succeededOrFailed()