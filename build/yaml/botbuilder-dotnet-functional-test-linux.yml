#
# Run functional tests on bot deployed to Azure Unix 
#

# "name" here defines the build number format. Build number is accessed via $(Build.BuildNumber)
name: $(Build.BuildId)

pool:
  vmImage: $[ coalesce( variables['VMImage'], 'windows-2022' ) ] # or 'windows-latest'

trigger: # ci trigger
  batch: true
  branches:
    include:
    - main
  paths:
    include:
    - '*'
    exclude:
    - doc/
    - specs/
    - Changes.md
    - LICENSE
    - README.md
    - UsingMyGet.md

pr: # pr trigger
  branches:
    include:
    - main
  paths:
    include:
    - build/yaml/botbuilder-dotnet-functional-test-linux.yml

variables:
  MSBuildArguments: -p:SignAssembly=false -p:delaySign=false -p:RunAnalyzersDuringBuild=false
  BuildPlatform: 'any cpu'
  BuildConfiguration: 'Release'
  Parameters.solution: Microsoft.Bot.Builder.sln
  runCodesignValidationInjection: false # Disables unnecessary CodeSign Validation step
  skipComponentGovernanceDetection: true # Disables unnecessary Component Governanace Detection step 
  SolutionDir: $(System.DefaultWorkingDirectory) # Consumed in dotnet publish by Directory.Build.props and a few test projects.
#  AzureDeploymentPassword: define this in Azure
#  AzureDeploymentUser: define this in Azure
#  AzureSubscription: define this in Azure
#  DeleteResourceGroup: (optional) define this in Azure. Default = true.
#  LinuxTestBotAppId: define this in Azure
#  LinuxTestBotAppSecret: define this in Azure
#  LinuxTestBotBotGroup: define this in Azure
#  LinuxTestBotBotName: define this in Azure

steps:
- powershell: 'gci env:* | sort-object name | Format-Table -AutoSize -Wrap'
  displayName: 'Display env vars'

- task: AzureResourceGroupDeployment@2
  displayName: 'Azure deployment: Create or update resource group $(LinuxTestBotBotGroup)'
  inputs:
    azureSubscription: $(AzureSubscription)
    resourceGroupName: '$(LinuxTestBotBotGroup)'
    location: 'West US'
    csmFile: FunctionalTests/ExportedTemplate/LinuxDotNet/template-with-preexisting-rg.json
    overrideParameters: '-botName "$(LinuxTestBotBotName)" -appId "$(LinuxTestBotAppId)" -appSecret "$(LinuxTestBotAppSecret)"'

- task: AzureCLI@1
  displayName: 'Create Azure DirectLine channel for test bot'
  inputs:
    azureSubscription: $(AzureSubscription)
    scriptLocation: inlineScript
    inlineScript: 'call az bot directline create -n "$(LinuxTestBotBotName)" -g "$(LinuxTestBotBotGroup)" > "$(System.DefaultWorkingDirectory)\DirectLineCreate.json"'

- task: NuGetToolInstaller@1
  displayName: 'Use NuGet latest'

# The next tasks are put here before "Git bot deployment" to give time for the new Azure resources to settle.
- task: NuGetCommand@2
  inputs:
    command: 'restore'
    restoreSolution: '**/*.sln'
    feedsToUse: 'select'
    verbosityRestore: 'Detailed'
  displayName: 'NuGet restore'

- task: DotNetCoreCLI@2
  displayName: 'Dotnet publish test bot'
  inputs:
    command: publish
    publishWebProjects: false
    projects: '$(System.DefaultWorkingDirectory)\tests\Microsoft.Bot.Builder.TestBot\Microsoft.Bot.Builder.TestBot.csproj'
    arguments: '-r linux-x64 --configuration $(BuildConfiguration) --output $(System.DefaultWorkingDirectory)\tests\Microsoft.Bot.Builder.TestBot\publishedbot -p:TreatWarningsAsErrors=false -p:RestoreUseSkipNonexistentTargets=false'
    zipAfterPublish: false
    modifyOutputPath: false

- script: |
   Move $(System.DefaultWorkingDirectory)\tests\Microsoft.Bot.Builder.TestBot\DeploymentScripts\Linux\* $(System.DefaultWorkingDirectory)\tests\Microsoft.Bot.Builder.TestBot
   git config --global user.name "BotBuilderDotNetPipeline"
   git config --global user.email BotBuilderDotNet@Pipeline.com
   git init
   git add .
   git commit -m "cibuildtest"
   git remote add azure https://$(AzureDeploymentUser):$(AzureDeploymentPassword)@$(LinuxTestBotBotName).scm.azurewebsites.net:443/$(LinuxTestBotBotName).git
   git push azure master
  workingDirectory: '$(System.DefaultWorkingDirectory)\tests\Microsoft.Bot.Builder.TestBot'
  displayName: 'Git bot deployment'

- powershell: |
   $json = Get-Content '$(System.DefaultWorkingDirectory)\DirectLineCreate.json' | Out-String | ConvertFrom-Json
   $key = $json.properties.properties.sites.key
   echo "##vso[task.setvariable variable=DIRECTLINE;]$key"
   echo "##vso[task.setvariable variable=BOTID;]$(LinuxTestBotBotName)"
   Write-Host "DIRECTLINE=$key";
   Write-Host "BOTID=$(LinuxTestBotBotName)";
  displayName: 'Set directline key for test'

- task: DotNetCoreCLI@2
  displayName: 'dotnet test'
  inputs:
    command: test
    projects: '$(System.DefaultWorkingDirectory)\FunctionalTests\**\*FunctionalTests.csproj'
    arguments: '-v n --configuration $(BuildConfiguration) --filter "TestCategory=FunctionalTests&TestCategory!=Adapters" --collect:"Code Coverage" --settings $(System.DefaultWorkingDirectory)\CodeCoverage.runsettings '
    workingDirectory: '$(System.DefaultWorkingDirectory)\'
  env:
    TestAppId: $(LinuxTestBotAppId)
    TestPassword: $(LinuxTestBotAppSecret)

- task: AzureCLI@1
  displayName: 'Delete test resource group'
  inputs:
    azureSubscription: $(AzureSubscription)
    scriptLocation: inlineScript
    inlineScript: 'call az group delete -n "$(LinuxTestBotBotGroup)" --yes'
  condition: and(always(), ne(variables['DeleteResourceGroup'], 'false'))

- powershell: |
   cd ..
   ls -R
  displayName: 'Dir workspace'
  continueOnError: true
  condition: succeededOrFailed()