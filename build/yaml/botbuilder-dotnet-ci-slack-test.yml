#
# Runs functional tests against the Slack channel.
#

# "name" here defines the build number format. Build number is accessed via $(Build.BuildNumber)
name: $(Build.BuildId)

pool:
  vmImage: $[ coalesce( variables['VMImage'], 'windows-2022' ) ] # or 'windows-latest'

trigger: # ci trigger
  batch: true
  branches:
    include:
    - main
  paths:
    include:
    - '*'
    exclude:
    - doc/
    - specs/
    - Changes.md
    - LICENSE
    - README.md
    - UsingMyGet.md

pr: # pr trigger
  branches:
    include:
    - main
  paths:
    include:
    - build/yaml/botbuilder-dotnet-ci-slack-test.yml

variables:
  AppId: $(SlackTestBotAppId)
  AppSecret: $(SlackTestBotAppSecret)
  BotGroup: $(SlackTestBotBotGroup)
  BotName: $(SlackTestBotBotName)
  BuildConfiguration: 'debug'
  BuildPlatform: 'any cpu'
  MSBuildArguments: -p:SignAssembly=false -p:delaySign=false -p:RunAnalyzersDuringBuild=false
  Parameters.solution: Microsoft.Bot.Builder.sln
  ReleasePackageVersion: 4.8.0-preview-$(Build.BuildNumber) # Consumed by Microsoft.Bot.Builder.sln projects.
  runCodesignValidationInjection: false # Disables unnecessary CodeSign Validation step  
  skipComponentGovernanceDetection: true # Disables unnecessary Component Governanace Detection step 
  SlackBotToken: $(SlackTestBotSlackBotToken)
  SlackClientSigningSecret: $(SlackTestBotSlackClientSigningSecret)
  SlackVerificationToken: $(SlackTestBotSlackVerificationToken)
  SolutionDir: $(System.DefaultWorkingDirectory) # Consumed in dotnet publish by Directory.Build.props and a few test projects.
#  AzureSubscription: define this in Azure
#  SlackTestBotAppId: define this in Azure
#  SlackTestBotAppSecret: define this in Azure
#  SlackTestBotBotGroup: define this in Azure
#  SlackTestBotBotName: define this in Azure
#  SlackTestBotSlackBotToken: define this in Azure
#  SlackTestBotSlackChannel: define this in Azure
#  SlackTestBotSlackClientSigningSecret: define this in Azure
#  SlackTestBotSlackVerificationToken: define this in Azure

steps:
- powershell: 'gci env:* | sort-object name | Format-Table -AutoSize -Wrap'
  displayName: 'Display env vars'

- powershell: |
   # Create DateTimeTag for Resource Group
   $DateTimeTag=Get-Date -Format "yyyy-MM-ddTHH:mm:ssZ"
   "##vso[task.setvariable variable=DateTimeTag]$DateTimeTag";
  displayName: 'Create DateTimeTag for Resource Group'
  # Get-Date on Azure DevOps returns a datetime relative to UTC-0, so "Z" is being used instead of the dynamic "K".

- task: NuGetToolInstaller@1
  displayName: 'Use NuGet latest'

- task: NuGetCommand@2
  inputs:
    command: 'restore'
    restoreSolution: '**/*.sln'
    feedsToUse: 'select'
    verbosityRestore: 'Detailed'
  displayName: 'NuGet restore'

- task: DotNetCoreCLI@2
  displayName: 'Dotnet Publish TestBot'
  inputs:
    command: publish
    publishWebProjects: false
    projects: '$(System.DefaultWorkingDirectory)\tests\Adapters\Microsoft.Bot.Builder.Adapters.Slack.TestBot\Microsoft.Bot.Builder.Adapters.Slack.TestBot.csproj'
    arguments: '--configuration $(BuildConfiguration) --output $(System.DefaultWorkingDirectory)\tests\Adapters\Microsoft.Bot.Builder.Adapters.Slack.TestBot\PublishedBot -p:TreatWarningsAsErrors=false -p:RestoreUseSkipNonexistentTargets=false'
    modifyOutputPath: false

- task: AzureCLI@2
  displayName: 'Preexisting RG: create Azure resources. Runs in even builds.'
  inputs:
    azureSubscription: $(AzureSubscription)
    scriptType: ps
    scriptLocation: inlineScript
    inlineScript: |
     Write-Host "`n***** Creating Azure resources using the preexisting-rg template *****";
     Write-Host "This task runs for even-numbered builds. Build ID = $(Build.BuildId)";
     Write-Host "************************************************************************";
     Set-PSDebug -Trace 1;
     az group create --location westus --name $(BotGroup) --tags buildName="$(Build.DefinitionName)" cause=automation date="$(DateTimeTag)" product="$(Build.Repository.Name)" sourceBranch="$(Build.SourceBranch)";;
     
     # set up bot channels registration, app service, app service plan
     az deployment group create --resource-group "$(BotGroup)" --template-file "$(System.DefaultWorkingDirectory)\tests\Adapters\Microsoft.Bot.Builder.Adapters.Slack.TestBot\DeploymentTemplates\template-with-preexisting-rg.json" --parameters appId=$(AppId) appSecret="$(AppSecret)" botId="$(BotName)" botSku=F0 newAppServicePlanName="$(BotName)" newWebAppName="$(BotName)" appServicePlanLocation="westus" slackVerificationToken="$(SlackVerificationToken)" slackBotToken="$(SlackBotToken)"  slackClientSigningSecret="$(SlackClientSigningSecret)" --name "$(BotName)"
     Set-PSDebug -Trace 0;
  condition: and(succeeded(), or( endsWith(variables['Build.BuildId'], 0), endsWith(variables['Build.BuildId'], 2), endsWith(variables['Build.BuildId'], 4), endsWith(variables['Build.BuildId'], 6), endsWith(variables['Build.BuildId'], 8)))

- task: AzureCLI@2
  displayName: 'New RG: create Azure resources. Runs in odd builds.'
  inputs:
    azureSubscription: $(AzureSubscription)
    scriptType: ps
    scriptLocation: inlineScript
    inlineScript: |
     Write-Host "`n***** Creating Azure resources using the new-rg template *****";
     Write-Host "This task runs for odd-numbered builds. Build ID = $(Build.BuildId)";
     Write-Host "****************************************************************";
     Set-PSDebug -Trace 1;
     
     # set up resource group, bot channels registration, app service, app service plan
     az deployment sub create --name "$(BotGroup)" --template-file "$(System.DefaultWorkingDirectory)\tests\Adapters\Microsoft.Bot.Builder.Adapters.Slack.TestBot\DeploymentTemplates\template-with-new-rg.json" --location "westus" --parameters appId=$(AppId) appSecret="$(AppSecret)" botId="$(BotName)" botSku=F0 newAppServicePlanName="$(BotName)" newWebAppName="$(BotName)" groupName="$(BotGroup)" groupLocation="westus" newAppServicePlanLocation="westus" slackVerificationToken="$(SlackVerificationToken)" slackBotToken="$(SlackBotToken)"  slackClientSigningSecret="$(SlackClientSigningSecret)" groupTags='{\"buildName\":\"$(Build.DefinitionName)\", \"cause\":\"automation\", \"date\":\"$(DateTimeTag)\", \"product\":\"$(Build.Repository.Name)\", \"sourceBranch\":\"$(Build.SourceBranch)\"}';
     Set-PSDebug -Trace 0;
  condition: and(succeeded(), or( endsWith(variables['Build.BuildId'], 1), endsWith(variables['Build.BuildId'], 3), endsWith(variables['Build.BuildId'], 5), endsWith(variables['Build.BuildId'], 7), endsWith(variables['Build.BuildId'], 9)))

- task: AzureCLI@1
  displayName: 'Deploy the bot'
  inputs:
    azureSubscription: $(AzureSubscription)
    scriptLocation: inlineScript
    inlineScript: |
     call az webapp deployment source config-zip --resource-group "$(BotGroup)" --name "$(BotName)" --src "$(System.DefaultWorkingDirectory)\tests\Adapters\Microsoft.Bot.Builder.Adapters.Slack.TestBot\PublishedBot\PublishedBot.zip"

- task: DotNetCoreCLI@2
  displayName: 'dotnet test'
  inputs:
    command: test
    projects: |
     FunctionalTests\Microsoft.Bot.Builder.FunctionalTests\Microsoft.Bot.Builder.FunctionalTests.csproj
    arguments: '-v n --configuration $(BuildConfiguration) --filter SlackClientTest'
    workingDirectory: tests
  env:
    BotName: $(SlackTestBotBotName)
    SlackBotToken: $(SlackTestBotSlackBotToken)
    SlackChannel: $(SlackTestBotSlackChannel)
    SlackClientSigningSecret: $(SlackTestBotSlackClientSigningSecret)
    SlackVerificationToken: $(SlackTestBotSlackVerificationToken)

- task: AzureCLI@1
  displayName: 'Delete Resources'
  inputs:
    azureSubscription: $(AzureSubscription)
    scriptLocation: inlineScript
    inlineScript: 'call az group delete -n "$(BotGroup)" --yes'
  condition: and(always(), ne(variables['DeleteResourceGroup'], 'false'))

- powershell: |
   cd ..
   ls -R
  displayName: 'Dir workspace'
  continueOnError: true
  condition: succeededOrFailed()