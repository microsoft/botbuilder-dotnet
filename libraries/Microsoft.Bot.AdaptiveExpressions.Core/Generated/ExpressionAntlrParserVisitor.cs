//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from parser/ExpressionAntlrParser.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

#pragma warning disable 3021
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete generic visitor for a parse tree produced
/// by <see cref="ExpressionAntlrParser"/>.
/// </summary>
/// <typeparam name="Result">The return type of the visit operation.</typeparam>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public interface IExpressionAntlrParserVisitor<Result> : IParseTreeVisitor<Result> {
	/// <summary>
	/// Visit a parse tree produced by <see cref="ExpressionAntlrParser.file"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFile([NotNull] ExpressionAntlrParser.FileContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>unaryOpExp</c>
	/// labeled alternative in <see cref="ExpressionAntlrParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitUnaryOpExp([NotNull] ExpressionAntlrParser.UnaryOpExpContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>binaryOpExp</c>
	/// labeled alternative in <see cref="ExpressionAntlrParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBinaryOpExp([NotNull] ExpressionAntlrParser.BinaryOpExpContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>primaryExp</c>
	/// labeled alternative in <see cref="ExpressionAntlrParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPrimaryExp([NotNull] ExpressionAntlrParser.PrimaryExpContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>tripleOpExp</c>
	/// labeled alternative in <see cref="ExpressionAntlrParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitTripleOpExp([NotNull] ExpressionAntlrParser.TripleOpExpContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>funcInvokeExp</c>
	/// labeled alternative in <see cref="ExpressionAntlrParser.primaryExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFuncInvokeExp([NotNull] ExpressionAntlrParser.FuncInvokeExpContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>idAtom</c>
	/// labeled alternative in <see cref="ExpressionAntlrParser.primaryExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIdAtom([NotNull] ExpressionAntlrParser.IdAtomContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>jsonCreationExp</c>
	/// labeled alternative in <see cref="ExpressionAntlrParser.primaryExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitJsonCreationExp([NotNull] ExpressionAntlrParser.JsonCreationExpContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>stringAtom</c>
	/// labeled alternative in <see cref="ExpressionAntlrParser.primaryExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStringAtom([NotNull] ExpressionAntlrParser.StringAtomContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>indexAccessExp</c>
	/// labeled alternative in <see cref="ExpressionAntlrParser.primaryExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIndexAccessExp([NotNull] ExpressionAntlrParser.IndexAccessExpContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>stringInterpolationAtom</c>
	/// labeled alternative in <see cref="ExpressionAntlrParser.primaryExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStringInterpolationAtom([NotNull] ExpressionAntlrParser.StringInterpolationAtomContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>memberAccessExp</c>
	/// labeled alternative in <see cref="ExpressionAntlrParser.primaryExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitMemberAccessExp([NotNull] ExpressionAntlrParser.MemberAccessExpContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>parenthesisExp</c>
	/// labeled alternative in <see cref="ExpressionAntlrParser.primaryExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitParenthesisExp([NotNull] ExpressionAntlrParser.ParenthesisExpContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>numericAtom</c>
	/// labeled alternative in <see cref="ExpressionAntlrParser.primaryExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNumericAtom([NotNull] ExpressionAntlrParser.NumericAtomContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>arrayCreationExp</c>
	/// labeled alternative in <see cref="ExpressionAntlrParser.primaryExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitArrayCreationExp([NotNull] ExpressionAntlrParser.ArrayCreationExpContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ExpressionAntlrParser.stringInterpolation"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStringInterpolation([NotNull] ExpressionAntlrParser.StringInterpolationContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ExpressionAntlrParser.textContent"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitTextContent([NotNull] ExpressionAntlrParser.TextContentContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ExpressionAntlrParser.argsList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitArgsList([NotNull] ExpressionAntlrParser.ArgsListContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ExpressionAntlrParser.lambda"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLambda([NotNull] ExpressionAntlrParser.LambdaContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ExpressionAntlrParser.keyValuePairList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitKeyValuePairList([NotNull] ExpressionAntlrParser.KeyValuePairListContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ExpressionAntlrParser.keyValuePair"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitKeyValuePair([NotNull] ExpressionAntlrParser.KeyValuePairContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ExpressionAntlrParser.key"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitKey([NotNull] ExpressionAntlrParser.KeyContext context);
}
