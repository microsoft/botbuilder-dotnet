//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from parser/ExpressionAntlrParser.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

#pragma warning disable 3021

using Antlr4.Runtime.Misc;
using IErrorNode = Antlr4.Runtime.Tree.IErrorNode;
using ITerminalNode = Antlr4.Runtime.Tree.ITerminalNode;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="IExpressionAntlrParserListener"/>,
/// which can be extended to create a listener which only needs to handle a subset
/// of the available methods.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.Diagnostics.DebuggerNonUserCode]
[System.CLSCompliant(false)]
public partial class ExpressionAntlrParserBaseListener : IExpressionAntlrParserListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressionAntlrParser.file"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFile([NotNull] ExpressionAntlrParser.FileContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressionAntlrParser.file"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFile([NotNull] ExpressionAntlrParser.FileContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>unaryOpExp</c>
	/// labeled alternative in <see cref="ExpressionAntlrParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterUnaryOpExp([NotNull] ExpressionAntlrParser.UnaryOpExpContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>unaryOpExp</c>
	/// labeled alternative in <see cref="ExpressionAntlrParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitUnaryOpExp([NotNull] ExpressionAntlrParser.UnaryOpExpContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>binaryOpExp</c>
	/// labeled alternative in <see cref="ExpressionAntlrParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBinaryOpExp([NotNull] ExpressionAntlrParser.BinaryOpExpContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>binaryOpExp</c>
	/// labeled alternative in <see cref="ExpressionAntlrParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBinaryOpExp([NotNull] ExpressionAntlrParser.BinaryOpExpContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>primaryExp</c>
	/// labeled alternative in <see cref="ExpressionAntlrParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPrimaryExp([NotNull] ExpressionAntlrParser.PrimaryExpContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>primaryExp</c>
	/// labeled alternative in <see cref="ExpressionAntlrParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPrimaryExp([NotNull] ExpressionAntlrParser.PrimaryExpContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>tripleOpExp</c>
	/// labeled alternative in <see cref="ExpressionAntlrParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTripleOpExp([NotNull] ExpressionAntlrParser.TripleOpExpContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>tripleOpExp</c>
	/// labeled alternative in <see cref="ExpressionAntlrParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTripleOpExp([NotNull] ExpressionAntlrParser.TripleOpExpContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>funcInvokeExp</c>
	/// labeled alternative in <see cref="ExpressionAntlrParser.primaryExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFuncInvokeExp([NotNull] ExpressionAntlrParser.FuncInvokeExpContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>funcInvokeExp</c>
	/// labeled alternative in <see cref="ExpressionAntlrParser.primaryExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFuncInvokeExp([NotNull] ExpressionAntlrParser.FuncInvokeExpContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>idAtom</c>
	/// labeled alternative in <see cref="ExpressionAntlrParser.primaryExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIdAtom([NotNull] ExpressionAntlrParser.IdAtomContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>idAtom</c>
	/// labeled alternative in <see cref="ExpressionAntlrParser.primaryExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIdAtom([NotNull] ExpressionAntlrParser.IdAtomContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>jsonCreationExp</c>
	/// labeled alternative in <see cref="ExpressionAntlrParser.primaryExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterJsonCreationExp([NotNull] ExpressionAntlrParser.JsonCreationExpContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>jsonCreationExp</c>
	/// labeled alternative in <see cref="ExpressionAntlrParser.primaryExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitJsonCreationExp([NotNull] ExpressionAntlrParser.JsonCreationExpContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>stringAtom</c>
	/// labeled alternative in <see cref="ExpressionAntlrParser.primaryExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStringAtom([NotNull] ExpressionAntlrParser.StringAtomContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>stringAtom</c>
	/// labeled alternative in <see cref="ExpressionAntlrParser.primaryExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStringAtom([NotNull] ExpressionAntlrParser.StringAtomContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>indexAccessExp</c>
	/// labeled alternative in <see cref="ExpressionAntlrParser.primaryExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIndexAccessExp([NotNull] ExpressionAntlrParser.IndexAccessExpContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>indexAccessExp</c>
	/// labeled alternative in <see cref="ExpressionAntlrParser.primaryExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIndexAccessExp([NotNull] ExpressionAntlrParser.IndexAccessExpContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>stringInterpolationAtom</c>
	/// labeled alternative in <see cref="ExpressionAntlrParser.primaryExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStringInterpolationAtom([NotNull] ExpressionAntlrParser.StringInterpolationAtomContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>stringInterpolationAtom</c>
	/// labeled alternative in <see cref="ExpressionAntlrParser.primaryExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStringInterpolationAtom([NotNull] ExpressionAntlrParser.StringInterpolationAtomContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>memberAccessExp</c>
	/// labeled alternative in <see cref="ExpressionAntlrParser.primaryExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMemberAccessExp([NotNull] ExpressionAntlrParser.MemberAccessExpContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>memberAccessExp</c>
	/// labeled alternative in <see cref="ExpressionAntlrParser.primaryExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMemberAccessExp([NotNull] ExpressionAntlrParser.MemberAccessExpContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>parenthesisExp</c>
	/// labeled alternative in <see cref="ExpressionAntlrParser.primaryExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterParenthesisExp([NotNull] ExpressionAntlrParser.ParenthesisExpContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>parenthesisExp</c>
	/// labeled alternative in <see cref="ExpressionAntlrParser.primaryExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitParenthesisExp([NotNull] ExpressionAntlrParser.ParenthesisExpContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>numericAtom</c>
	/// labeled alternative in <see cref="ExpressionAntlrParser.primaryExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNumericAtom([NotNull] ExpressionAntlrParser.NumericAtomContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>numericAtom</c>
	/// labeled alternative in <see cref="ExpressionAntlrParser.primaryExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNumericAtom([NotNull] ExpressionAntlrParser.NumericAtomContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>arrayCreationExp</c>
	/// labeled alternative in <see cref="ExpressionAntlrParser.primaryExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterArrayCreationExp([NotNull] ExpressionAntlrParser.ArrayCreationExpContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>arrayCreationExp</c>
	/// labeled alternative in <see cref="ExpressionAntlrParser.primaryExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitArrayCreationExp([NotNull] ExpressionAntlrParser.ArrayCreationExpContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressionAntlrParser.stringInterpolation"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStringInterpolation([NotNull] ExpressionAntlrParser.StringInterpolationContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressionAntlrParser.stringInterpolation"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStringInterpolation([NotNull] ExpressionAntlrParser.StringInterpolationContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressionAntlrParser.textContent"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTextContent([NotNull] ExpressionAntlrParser.TextContentContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressionAntlrParser.textContent"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTextContent([NotNull] ExpressionAntlrParser.TextContentContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressionAntlrParser.argsList"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterArgsList([NotNull] ExpressionAntlrParser.ArgsListContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressionAntlrParser.argsList"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitArgsList([NotNull] ExpressionAntlrParser.ArgsListContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressionAntlrParser.lambda"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLambda([NotNull] ExpressionAntlrParser.LambdaContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressionAntlrParser.lambda"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLambda([NotNull] ExpressionAntlrParser.LambdaContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressionAntlrParser.keyValuePairList"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterKeyValuePairList([NotNull] ExpressionAntlrParser.KeyValuePairListContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressionAntlrParser.keyValuePairList"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitKeyValuePairList([NotNull] ExpressionAntlrParser.KeyValuePairListContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressionAntlrParser.keyValuePair"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterKeyValuePair([NotNull] ExpressionAntlrParser.KeyValuePairContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressionAntlrParser.keyValuePair"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitKeyValuePair([NotNull] ExpressionAntlrParser.KeyValuePairContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressionAntlrParser.key"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterKey([NotNull] ExpressionAntlrParser.KeyContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressionAntlrParser.key"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitKey([NotNull] ExpressionAntlrParser.KeyContext context) { }

	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void EnterEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void ExitEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitTerminal([NotNull] ITerminalNode node) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitErrorNode([NotNull] IErrorNode node) { }
}
