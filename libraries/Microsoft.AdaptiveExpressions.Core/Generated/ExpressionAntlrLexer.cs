//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from parser/ExpressionAntlrLexer.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

#pragma warning disable 3021
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class ExpressionAntlrLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		STRING_INTERPOLATION_START=1, PLUS=2, SUBSTRACT=3, NON=4, XOR=5, ASTERISK=6, 
		SLASH=7, PERCENT=8, DOUBLE_EQUAL=9, NOT_EQUAL=10, SINGLE_AND=11, DOUBLE_AND=12, 
		DOUBLE_VERTICAL_CYLINDER=13, LESS_THAN=14, MORE_THAN=15, LESS_OR_EQUAl=16, 
		MORE_OR_EQUAL=17, OPEN_BRACKET=18, CLOSE_BRACKET=19, DOT=20, OPEN_SQUARE_BRACKET=21, 
		CLOSE_SQUARE_BRACKET=22, OPEN_CURLY_BRACKET=23, CLOSE_CURLY_BRACKET=24, 
		COMMA=25, COLON=26, ARROW=27, NULL_COALESCE=28, QUESTION_MARK=29, NUMBER=30, 
		WHITESPACE=31, IDENTIFIER=32, NEWLINE=33, STRING=34, INVALID_TOKEN_DEFAULT_MODE=35, 
		TEMPLATE=36, ESCAPE_CHARACTER=37, TEXT_CONTENT=38;
	public const int
		STRING_INTERPOLATION_MODE=1;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE", "STRING_INTERPOLATION_MODE"
	};

	public static readonly string[] ruleNames = {
		"LETTER", "DIGIT", "OBJECT_DEFINITION", "STRING_INTERPOLATION_START", 
		"PLUS", "SUBSTRACT", "NON", "XOR", "ASTERISK", "SLASH", "PERCENT", "DOUBLE_EQUAL", 
		"NOT_EQUAL", "SINGLE_AND", "DOUBLE_AND", "DOUBLE_VERTICAL_CYLINDER", "LESS_THAN", 
		"MORE_THAN", "LESS_OR_EQUAl", "MORE_OR_EQUAL", "OPEN_BRACKET", "CLOSE_BRACKET", 
		"DOT", "OPEN_SQUARE_BRACKET", "CLOSE_SQUARE_BRACKET", "OPEN_CURLY_BRACKET", 
		"CLOSE_CURLY_BRACKET", "COMMA", "COLON", "ARROW", "NULL_COALESCE", "QUESTION_MARK", 
		"NUMBER", "WHITESPACE", "IDENTIFIER", "NEWLINE", "STRING", "INVALID_TOKEN_DEFAULT_MODE", 
		"STRING_INTERPOLATION_END", "TEMPLATE", "ESCAPE_CHARACTER", "TEXT_CONTENT"
	};


	  bool ignoreWS = true;      // usually we ignore whitespace, but inside stringInterpolation, whitespace is significant


	public ExpressionAntlrLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public ExpressionAntlrLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, "'+'", "'-'", "'!'", "'^'", "'*'", "'/'", "'%'", "'=='", null, 
		"'&'", "'&&'", "'||'", "'<'", "'>'", "'<='", "'>='", "'('", "')'", "'.'", 
		"'['", "']'", "'{'", "'}'", "','", "':'", "'=>'", "'??'", "'?'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "STRING_INTERPOLATION_START", "PLUS", "SUBSTRACT", "NON", "XOR", 
		"ASTERISK", "SLASH", "PERCENT", "DOUBLE_EQUAL", "NOT_EQUAL", "SINGLE_AND", 
		"DOUBLE_AND", "DOUBLE_VERTICAL_CYLINDER", "LESS_THAN", "MORE_THAN", "LESS_OR_EQUAl", 
		"MORE_OR_EQUAL", "OPEN_BRACKET", "CLOSE_BRACKET", "DOT", "OPEN_SQUARE_BRACKET", 
		"CLOSE_SQUARE_BRACKET", "OPEN_CURLY_BRACKET", "CLOSE_CURLY_BRACKET", "COMMA", 
		"COLON", "ARROW", "NULL_COALESCE", "QUESTION_MARK", "NUMBER", "WHITESPACE", 
		"IDENTIFIER", "NEWLINE", "STRING", "INVALID_TOKEN_DEFAULT_MODE", "TEMPLATE", 
		"ESCAPE_CHARACTER", "TEXT_CONTENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ExpressionAntlrLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static ExpressionAntlrLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	public override void Action(RuleContext _localctx, int ruleIndex, int actionIndex) {
		switch (ruleIndex) {
		case 3 : STRING_INTERPOLATION_START_action(_localctx, actionIndex); break;
		case 38 : STRING_INTERPOLATION_END_action(_localctx, actionIndex); break;
		}
	}
	private void STRING_INTERPOLATION_START_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 0:  ignoreWS = false; break;
		}
	}
	private void STRING_INTERPOLATION_END_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 1: ignoreWS = true; break;
		}
	}
	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 33 : return WHITESPACE_sempred(_localctx, predIndex);
		}
		return true;
	}
	private bool WHITESPACE_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return ignoreWS;
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,0,38,269,6,-1,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,
		6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,
		2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,
		2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,
		2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,
		2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
		1,0,1,0,1,1,1,1,1,2,1,2,1,2,1,2,3,2,95,8,2,1,2,1,2,1,2,1,2,4,2,101,8,2,
		11,2,12,2,102,5,2,105,8,2,10,2,12,2,108,9,2,1,2,1,2,1,3,1,3,1,3,1,3,1,
		3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,
		1,11,1,12,1,12,1,12,1,12,3,12,138,8,12,1,13,1,13,1,14,1,14,1,14,1,15,1,
		15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,
		21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,
		28,1,28,1,29,1,29,1,29,1,30,1,30,1,30,1,31,1,31,1,32,4,32,185,8,32,11,
		32,12,32,186,1,32,1,32,4,32,191,8,32,11,32,12,32,192,3,32,195,8,32,1,33,
		1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,34,3,34,207,8,34,1,34,1,34,1,
		34,5,34,212,8,34,10,34,12,34,215,9,34,1,35,3,35,218,8,35,1,35,1,35,1,35,
		1,35,1,36,1,36,1,36,1,36,5,36,228,8,36,10,36,12,36,231,9,36,1,36,1,36,
		1,36,1,36,1,36,5,36,238,8,36,10,36,12,36,241,9,36,1,36,3,36,244,8,36,1,
		37,1,37,1,38,1,38,1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,39,1,39,4,39,259,
		8,39,11,39,12,39,260,1,39,1,39,1,40,1,40,1,40,1,41,1,41,2,229,239,0,42,
		2,0,4,0,6,0,8,1,10,2,12,3,14,4,16,5,18,6,20,7,22,8,24,9,26,10,28,11,30,
		12,32,13,34,14,36,15,38,16,40,17,42,18,44,19,46,20,48,21,50,22,52,23,54,
		24,56,25,58,26,60,27,62,28,64,29,66,30,68,31,70,32,72,33,74,34,76,35,78,
		0,80,36,82,37,84,38,2,0,1,10,2,0,65,90,97,122,1,0,48,57,7,0,10,10,13,13,
		34,34,39,39,96,96,123,123,125,125,4,0,9,9,32,32,160,160,65279,65279,3,
		0,35,35,64,64,95,95,2,0,39,39,92,92,1,0,39,39,2,0,34,34,92,92,1,0,34,34,
		2,0,36,36,96,96,289,0,8,1,0,0,0,0,10,1,0,0,0,0,12,1,0,0,0,0,14,1,0,0,0,
		0,16,1,0,0,0,0,18,1,0,0,0,0,20,1,0,0,0,0,22,1,0,0,0,0,24,1,0,0,0,0,26,
		1,0,0,0,0,28,1,0,0,0,0,30,1,0,0,0,0,32,1,0,0,0,0,34,1,0,0,0,0,36,1,0,0,
		0,0,38,1,0,0,0,0,40,1,0,0,0,0,42,1,0,0,0,0,44,1,0,0,0,0,46,1,0,0,0,0,48,
		1,0,0,0,0,50,1,0,0,0,0,52,1,0,0,0,0,54,1,0,0,0,0,56,1,0,0,0,0,58,1,0,0,
		0,0,60,1,0,0,0,0,62,1,0,0,0,0,64,1,0,0,0,0,66,1,0,0,0,0,68,1,0,0,0,0,70,
		1,0,0,0,0,72,1,0,0,0,0,74,1,0,0,0,0,76,1,0,0,0,1,78,1,0,0,0,1,80,1,0,0,
		0,1,82,1,0,0,0,1,84,1,0,0,0,2,86,1,0,0,0,4,88,1,0,0,0,6,90,1,0,0,0,8,111,
		1,0,0,0,10,116,1,0,0,0,12,118,1,0,0,0,14,120,1,0,0,0,16,122,1,0,0,0,18,
		124,1,0,0,0,20,126,1,0,0,0,22,128,1,0,0,0,24,130,1,0,0,0,26,137,1,0,0,
		0,28,139,1,0,0,0,30,141,1,0,0,0,32,144,1,0,0,0,34,147,1,0,0,0,36,149,1,
		0,0,0,38,151,1,0,0,0,40,154,1,0,0,0,42,157,1,0,0,0,44,159,1,0,0,0,46,161,
		1,0,0,0,48,163,1,0,0,0,50,165,1,0,0,0,52,167,1,0,0,0,54,169,1,0,0,0,56,
		171,1,0,0,0,58,173,1,0,0,0,60,175,1,0,0,0,62,178,1,0,0,0,64,181,1,0,0,
		0,66,184,1,0,0,0,68,196,1,0,0,0,70,206,1,0,0,0,72,217,1,0,0,0,74,243,1,
		0,0,0,76,245,1,0,0,0,78,247,1,0,0,0,80,253,1,0,0,0,82,264,1,0,0,0,84,267,
		1,0,0,0,86,87,7,0,0,0,87,3,1,0,0,0,88,89,7,1,0,0,89,5,1,0,0,0,90,106,5,
		123,0,0,91,105,3,68,33,0,92,95,3,70,34,0,93,95,3,74,36,0,94,92,1,0,0,0,
		94,93,1,0,0,0,95,96,1,0,0,0,96,100,5,58,0,0,97,101,3,74,36,0,98,101,8,
		2,0,0,99,101,3,6,2,0,100,97,1,0,0,0,100,98,1,0,0,0,100,99,1,0,0,0,101,
		102,1,0,0,0,102,100,1,0,0,0,102,103,1,0,0,0,103,105,1,0,0,0,104,91,1,0,
		0,0,104,94,1,0,0,0,105,108,1,0,0,0,106,104,1,0,0,0,106,107,1,0,0,0,107,
		109,1,0,0,0,108,106,1,0,0,0,109,110,5,125,0,0,110,7,1,0,0,0,111,112,5,
		96,0,0,112,113,6,3,0,0,113,114,1,0,0,0,114,115,6,3,1,0,115,9,1,0,0,0,116,
		117,5,43,0,0,117,11,1,0,0,0,118,119,5,45,0,0,119,13,1,0,0,0,120,121,5,
		33,0,0,121,15,1,0,0,0,122,123,5,94,0,0,123,17,1,0,0,0,124,125,5,42,0,0,
		125,19,1,0,0,0,126,127,5,47,0,0,127,21,1,0,0,0,128,129,5,37,0,0,129,23,
		1,0,0,0,130,131,5,61,0,0,131,132,5,61,0,0,132,25,1,0,0,0,133,134,5,33,
		0,0,134,138,5,61,0,0,135,136,5,60,0,0,136,138,5,62,0,0,137,133,1,0,0,0,
		137,135,1,0,0,0,138,27,1,0,0,0,139,140,5,38,0,0,140,29,1,0,0,0,141,142,
		5,38,0,0,142,143,5,38,0,0,143,31,1,0,0,0,144,145,5,124,0,0,145,146,5,124,
		0,0,146,33,1,0,0,0,147,148,5,60,0,0,148,35,1,0,0,0,149,150,5,62,0,0,150,
		37,1,0,0,0,151,152,5,60,0,0,152,153,5,61,0,0,153,39,1,0,0,0,154,155,5,
		62,0,0,155,156,5,61,0,0,156,41,1,0,0,0,157,158,5,40,0,0,158,43,1,0,0,0,
		159,160,5,41,0,0,160,45,1,0,0,0,161,162,5,46,0,0,162,47,1,0,0,0,163,164,
		5,91,0,0,164,49,1,0,0,0,165,166,5,93,0,0,166,51,1,0,0,0,167,168,5,123,
		0,0,168,53,1,0,0,0,169,170,5,125,0,0,170,55,1,0,0,0,171,172,5,44,0,0,172,
		57,1,0,0,0,173,174,5,58,0,0,174,59,1,0,0,0,175,176,5,61,0,0,176,177,5,
		62,0,0,177,61,1,0,0,0,178,179,5,63,0,0,179,180,5,63,0,0,180,63,1,0,0,0,
		181,182,5,63,0,0,182,65,1,0,0,0,183,185,3,4,1,0,184,183,1,0,0,0,185,186,
		1,0,0,0,186,184,1,0,0,0,186,187,1,0,0,0,187,194,1,0,0,0,188,190,5,46,0,
		0,189,191,3,4,1,0,190,189,1,0,0,0,191,192,1,0,0,0,192,190,1,0,0,0,192,
		193,1,0,0,0,193,195,1,0,0,0,194,188,1,0,0,0,194,195,1,0,0,0,195,67,1,0,
		0,0,196,197,7,3,0,0,197,198,4,33,0,0,198,199,1,0,0,0,199,200,6,33,2,0,
		200,69,1,0,0,0,201,207,3,2,0,0,202,207,7,4,0,0,203,204,5,64,0,0,204,207,
		5,64,0,0,205,207,2,36,37,0,206,201,1,0,0,0,206,202,1,0,0,0,206,203,1,0,
		0,0,206,205,1,0,0,0,207,213,1,0,0,0,208,212,3,2,0,0,209,212,3,4,1,0,210,
		212,5,95,0,0,211,208,1,0,0,0,211,209,1,0,0,0,211,210,1,0,0,0,212,215,1,
		0,0,0,213,211,1,0,0,0,213,214,1,0,0,0,214,71,1,0,0,0,215,213,1,0,0,0,216,
		218,5,13,0,0,217,216,1,0,0,0,217,218,1,0,0,0,218,219,1,0,0,0,219,220,5,
		10,0,0,220,221,1,0,0,0,221,222,6,35,2,0,222,73,1,0,0,0,223,229,5,39,0,
		0,224,225,5,92,0,0,225,228,7,5,0,0,226,228,8,6,0,0,227,224,1,0,0,0,227,
		226,1,0,0,0,228,231,1,0,0,0,229,230,1,0,0,0,229,227,1,0,0,0,230,232,1,
		0,0,0,231,229,1,0,0,0,232,244,5,39,0,0,233,239,5,34,0,0,234,235,5,92,0,
		0,235,238,7,7,0,0,236,238,8,8,0,0,237,234,1,0,0,0,237,236,1,0,0,0,238,
		241,1,0,0,0,239,240,1,0,0,0,239,237,1,0,0,0,240,242,1,0,0,0,241,239,1,
		0,0,0,242,244,5,34,0,0,243,223,1,0,0,0,243,233,1,0,0,0,244,75,1,0,0,0,
		245,246,9,0,0,0,246,77,1,0,0,0,247,248,5,96,0,0,248,249,6,38,3,0,249,250,
		1,0,0,0,250,251,6,38,4,0,251,252,6,38,5,0,252,79,1,0,0,0,253,254,5,36,
		0,0,254,258,5,123,0,0,255,259,3,74,36,0,256,259,3,6,2,0,257,259,8,2,0,
		0,258,255,1,0,0,0,258,256,1,0,0,0,258,257,1,0,0,0,259,260,1,0,0,0,260,
		258,1,0,0,0,260,261,1,0,0,0,261,262,1,0,0,0,262,263,5,125,0,0,263,81,1,
		0,0,0,264,265,5,92,0,0,265,266,7,9,0,0,266,83,1,0,0,0,267,268,9,0,0,0,
		268,85,1,0,0,0,22,0,1,94,100,102,104,106,137,186,192,194,206,211,213,217,
		227,229,237,239,243,258,260,6,1,3,0,5,1,0,6,0,0,1,38,1,7,1,0,4,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
