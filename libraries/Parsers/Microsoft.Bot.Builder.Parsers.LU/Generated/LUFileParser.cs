//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from LUFileParser.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class LUFileParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		WS=1, NEWLINE=2, QNA_SOURCE_INFO=3, MODEL_INFO=4, COMMENT=5, QNA=6, HASH=7, 
		DASH=8, DOLLAR=9, AT=10, IMPORT=11, REFERENCE=12, FILTER_MARK=13, QNA_ID_MARK=14, 
		MULTI_LINE_TEXT=15, PROMPT_MARK=16, INVALID_TOKEN_DEFAULT_MODE=17, EQUAL=18, 
		COMMA=19, HAS_ROLES_LABEL=20, HAS_FEATURES_LABEL=21, NEW_ENTITY_TYPE_IDENTIFIER=22, 
		PHRASE_LIST_LABEL=23, NEW_COMPOSITE_ENTITY=24, NEW_REGEX_ENTITY=25, NEW_ENTITY_IDENTIFIER=26, 
		NEW_ENTITY_IDENTIFIER_WITH_WS=27, NEWLINE_IN_NAME=28, IDENTIFIER=29, DOT=30, 
		ESCAPE_CHARACTER=31, EXPRESSION=32, TEXT=33, NEWLINE_IN_ENTITY=34, COMPOSITE_ENTITY=35, 
		REGEX_ENTITY=36, ENTITY_TEXT=37, COLON_MARK=38, NEWLINE_IN_QNA=39, QNA_TEXT=40;
	public const int
		RULE_file = 0, RULE_paragraph = 1, RULE_newline = 2, RULE_errorString = 3, 
		RULE_nestedIntentSection = 4, RULE_nestedIntentNameLine = 5, RULE_nestedIntentName = 6, 
		RULE_nameIdentifier = 7, RULE_nestedIntentBodyDefinition = 8, RULE_subIntentDefinition = 9, 
		RULE_simpleIntentSection = 10, RULE_intentDefinition = 11, RULE_intentNameLine = 12, 
		RULE_intentName = 13, RULE_intentBody = 14, RULE_normalIntentBody = 15, 
		RULE_normalIntentString = 16, RULE_newEntitySection = 17, RULE_newEntityDefinition = 18, 
		RULE_newEntityListbody = 19, RULE_newEntityLine = 20, RULE_newCompositeDefinition = 21, 
		RULE_newRegexDefinition = 22, RULE_newEntityType = 23, RULE_newEntityRoles = 24, 
		RULE_newEntityUsesFeatures = 25, RULE_newEntityRoleOrFeatures = 26, RULE_newEntityName = 27, 
		RULE_newEntityNameWithWS = 28, RULE_entitySection = 29, RULE_entityDefinition = 30, 
		RULE_entityLine = 31, RULE_entityName = 32, RULE_entityType = 33, RULE_compositeEntityIdentifier = 34, 
		RULE_regexEntityIdentifier = 35, RULE_entityListBody = 36, RULE_normalItemString = 37, 
		RULE_importSection = 38, RULE_importDefinition = 39, RULE_referenceSection = 40, 
		RULE_referenceDefinition = 41, RULE_qnaSection = 42, RULE_qnaDefinition = 43, 
		RULE_qnaSourceInfo = 44, RULE_qnaIdMark = 45, RULE_qnaQuestion = 46, RULE_questionText = 47, 
		RULE_moreQuestionsBody = 48, RULE_moreQuestion = 49, RULE_errorQuestionString = 50, 
		RULE_qnaAnswerBody = 51, RULE_filterSection = 52, RULE_promptSection = 53, 
		RULE_filterLine = 54, RULE_errorFilterLine = 55, RULE_multiLineAnswer = 56, 
		RULE_modelInfoSection = 57, RULE_modelInfoDefinition = 58;
	public static readonly string[] ruleNames = {
		"file", "paragraph", "newline", "errorString", "nestedIntentSection", 
		"nestedIntentNameLine", "nestedIntentName", "nameIdentifier", "nestedIntentBodyDefinition", 
		"subIntentDefinition", "simpleIntentSection", "intentDefinition", "intentNameLine", 
		"intentName", "intentBody", "normalIntentBody", "normalIntentString", 
		"newEntitySection", "newEntityDefinition", "newEntityListbody", "newEntityLine", 
		"newCompositeDefinition", "newRegexDefinition", "newEntityType", "newEntityRoles", 
		"newEntityUsesFeatures", "newEntityRoleOrFeatures", "newEntityName", "newEntityNameWithWS", 
		"entitySection", "entityDefinition", "entityLine", "entityName", "entityType", 
		"compositeEntityIdentifier", "regexEntityIdentifier", "entityListBody", 
		"normalItemString", "importSection", "importDefinition", "referenceSection", 
		"referenceDefinition", "qnaSection", "qnaDefinition", "qnaSourceInfo", 
		"qnaIdMark", "qnaQuestion", "questionText", "moreQuestionsBody", "moreQuestion", 
		"errorQuestionString", "qnaAnswerBody", "filterSection", "promptSection", 
		"filterLine", "errorFilterLine", "multiLineAnswer", "modelInfoSection", 
		"modelInfoDefinition"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, null, "'$'", "'@'", null, 
		null, null, null, null, null, null, "'='", "','", null, null, null, null, 
		null, null, null, null, null, null, "'.'", null, null, null, null, null, 
		null, null, "':'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "WS", "NEWLINE", "QNA_SOURCE_INFO", "MODEL_INFO", "COMMENT", "QNA", 
		"HASH", "DASH", "DOLLAR", "AT", "IMPORT", "REFERENCE", "FILTER_MARK", 
		"QNA_ID_MARK", "MULTI_LINE_TEXT", "PROMPT_MARK", "INVALID_TOKEN_DEFAULT_MODE", 
		"EQUAL", "COMMA", "HAS_ROLES_LABEL", "HAS_FEATURES_LABEL", "NEW_ENTITY_TYPE_IDENTIFIER", 
		"PHRASE_LIST_LABEL", "NEW_COMPOSITE_ENTITY", "NEW_REGEX_ENTITY", "NEW_ENTITY_IDENTIFIER", 
		"NEW_ENTITY_IDENTIFIER_WITH_WS", "NEWLINE_IN_NAME", "IDENTIFIER", "DOT", 
		"ESCAPE_CHARACTER", "EXPRESSION", "TEXT", "NEWLINE_IN_ENTITY", "COMPOSITE_ENTITY", 
		"REGEX_ENTITY", "ENTITY_TEXT", "COLON_MARK", "NEWLINE_IN_QNA", "QNA_TEXT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "LUFileParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static LUFileParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public LUFileParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public LUFileParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class FileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(LUFileParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParagraphContext[] paragraph() {
			return GetRuleContexts<ParagraphContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParagraphContext paragraph(int i) {
			return GetRuleContext<ParagraphContext>(i);
		}
		public FileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterFile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitFile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileContext file() {
		FileContext _localctx = new FileContext(Context, State);
		EnterRule(_localctx, 0, RULE_file);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 119;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 118;
					paragraph();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 121;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 123;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParagraphContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(LUFileParser.NEWLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NestedIntentSectionContext nestedIntentSection() {
			return GetRuleContext<NestedIntentSectionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleIntentSectionContext simpleIntentSection() {
			return GetRuleContext<SimpleIntentSectionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EntitySectionContext entitySection() {
			return GetRuleContext<EntitySectionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewEntitySectionContext newEntitySection() {
			return GetRuleContext<NewEntitySectionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportSectionContext importSection() {
			return GetRuleContext<ImportSectionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceSectionContext referenceSection() {
			return GetRuleContext<ReferenceSectionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QnaSectionContext qnaSection() {
			return GetRuleContext<QnaSectionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModelInfoSectionContext modelInfoSection() {
			return GetRuleContext<ModelInfoSectionContext>(0);
		}
		public ParagraphContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paragraph; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterParagraph(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitParagraph(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParagraph(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParagraphContext paragraph() {
		ParagraphContext _localctx = new ParagraphContext(Context, State);
		EnterRule(_localctx, 2, RULE_paragraph);
		try {
			State = 134;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 125;
				Match(NEWLINE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 126;
				nestedIntentSection();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 127;
				simpleIntentSection();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 128;
				entitySection();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 129;
				newEntitySection();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 130;
				importSection();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 131;
				referenceSection();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 132;
				qnaSection();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 133;
				modelInfoSection();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewlineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(LUFileParser.NEWLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(LUFileParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		public NewlineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newline; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterNewline(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitNewline(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewline(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewlineContext newline() {
		NewlineContext _localctx = new NewlineContext(Context, State);
		EnterRule(_localctx, 4, RULE_newline);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 139;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 136;
				Match(WS);
				}
				}
				State = 141;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 142;
			_la = TokenStream.LA(1);
			if ( !(_la==Eof || _la==NEWLINE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ErrorStringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INVALID_TOKEN_DEFAULT_MODE() { return GetTokens(LUFileParser.INVALID_TOKEN_DEFAULT_MODE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INVALID_TOKEN_DEFAULT_MODE(int i) {
			return GetToken(LUFileParser.INVALID_TOKEN_DEFAULT_MODE, i);
		}
		public ErrorStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_errorString; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterErrorString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitErrorString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitErrorString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ErrorStringContext errorString() {
		ErrorStringContext _localctx = new ErrorStringContext(Context, State);
		EnterRule(_localctx, 6, RULE_errorString);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 145;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 144;
					_la = TokenStream.LA(1);
					if ( !(_la==WS || _la==INVALID_TOKEN_DEFAULT_MODE) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 147;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NestedIntentSectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NestedIntentNameLineContext nestedIntentNameLine() {
			return GetRuleContext<NestedIntentNameLineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NestedIntentBodyDefinitionContext nestedIntentBodyDefinition() {
			return GetRuleContext<NestedIntentBodyDefinitionContext>(0);
		}
		public NestedIntentSectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nestedIntentSection; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterNestedIntentSection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitNestedIntentSection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNestedIntentSection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NestedIntentSectionContext nestedIntentSection() {
		NestedIntentSectionContext _localctx = new NestedIntentSectionContext(Context, State);
		EnterRule(_localctx, 8, RULE_nestedIntentSection);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 149;
			nestedIntentNameLine();
			State = 150;
			nestedIntentBodyDefinition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NestedIntentNameLineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH() { return GetToken(LUFileParser.HASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NestedIntentNameContext nestedIntentName() {
			return GetRuleContext<NestedIntentNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		public NestedIntentNameLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nestedIntentNameLine; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterNestedIntentNameLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitNestedIntentNameLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNestedIntentNameLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NestedIntentNameLineContext nestedIntentNameLine() {
		NestedIntentNameLineContext _localctx = new NestedIntentNameLineContext(Context, State);
		EnterRule(_localctx, 10, RULE_nestedIntentNameLine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 155;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 152;
				Match(WS);
				}
				}
				State = 157;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 158;
			Match(HASH);
			State = 162;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 159;
				Match(WS);
				}
				}
				State = 164;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 165;
			nestedIntentName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NestedIntentNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameIdentifierContext[] nameIdentifier() {
			return GetRuleContexts<NameIdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameIdentifierContext nameIdentifier(int i) {
			return GetRuleContext<NameIdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		public NestedIntentNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nestedIntentName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterNestedIntentName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitNestedIntentName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNestedIntentName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NestedIntentNameContext nestedIntentName() {
		NestedIntentNameContext _localctx = new NestedIntentNameContext(Context, State);
		EnterRule(_localctx, 12, RULE_nestedIntentName);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 167;
			nameIdentifier();
			State = 172;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 170;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case WS:
						{
						State = 168;
						Match(WS);
						}
						break;
					case IDENTIFIER:
						{
						State = 169;
						nameIdentifier();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 174;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(LUFileParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(LUFileParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(LUFileParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(LUFileParser.DOT, i);
		}
		public NameIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterNameIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitNameIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameIdentifierContext nameIdentifier() {
		NameIdentifierContext _localctx = new NameIdentifierContext(Context, State);
		EnterRule(_localctx, 14, RULE_nameIdentifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 175;
			Match(IDENTIFIER);
			State = 180;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOT) {
				{
				{
				State = 176;
				Match(DOT);
				State = 177;
				Match(IDENTIFIER);
				}
				}
				State = 182;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NestedIntentBodyDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SubIntentDefinitionContext[] subIntentDefinition() {
			return GetRuleContexts<SubIntentDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubIntentDefinitionContext subIntentDefinition(int i) {
			return GetRuleContext<SubIntentDefinitionContext>(i);
		}
		public NestedIntentBodyDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nestedIntentBodyDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterNestedIntentBodyDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitNestedIntentBodyDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNestedIntentBodyDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NestedIntentBodyDefinitionContext nestedIntentBodyDefinition() {
		NestedIntentBodyDefinitionContext _localctx = new NestedIntentBodyDefinitionContext(Context, State);
		EnterRule(_localctx, 16, RULE_nestedIntentBodyDefinition);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 184;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 183;
					subIntentDefinition();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 186;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubIntentDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH() { return GetToken(LUFileParser.HASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleIntentSectionContext simpleIntentSection() {
			return GetRuleContext<SimpleIntentSectionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		public SubIntentDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subIntentDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterSubIntentDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitSubIntentDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubIntentDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubIntentDefinitionContext subIntentDefinition() {
		SubIntentDefinitionContext _localctx = new SubIntentDefinitionContext(Context, State);
		EnterRule(_localctx, 18, RULE_subIntentDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 191;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 188;
				Match(WS);
				}
				}
				State = 193;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 194;
			Match(HASH);
			State = 195;
			simpleIntentSection();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleIntentSectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntentDefinitionContext intentDefinition() {
			return GetRuleContext<IntentDefinitionContext>(0);
		}
		public SimpleIntentSectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleIntentSection; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterSimpleIntentSection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitSimpleIntentSection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleIntentSection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleIntentSectionContext simpleIntentSection() {
		SimpleIntentSectionContext _localctx = new SimpleIntentSectionContext(Context, State);
		EnterRule(_localctx, 20, RULE_simpleIntentSection);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 197;
			intentDefinition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntentDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntentNameLineContext intentNameLine() {
			return GetRuleContext<IntentNameLineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntentBodyContext intentBody() {
			return GetRuleContext<IntentBodyContext>(0);
		}
		public IntentDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intentDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterIntentDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitIntentDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntentDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntentDefinitionContext intentDefinition() {
		IntentDefinitionContext _localctx = new IntentDefinitionContext(Context, State);
		EnterRule(_localctx, 22, RULE_intentDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 199;
			intentNameLine();
			State = 201;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				{
				State = 200;
				intentBody();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntentNameLineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] HASH() { return GetTokens(LUFileParser.HASH); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH(int i) {
			return GetToken(LUFileParser.HASH, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntentNameContext intentName() {
			return GetRuleContext<IntentNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		public IntentNameLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intentNameLine; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterIntentNameLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitIntentNameLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntentNameLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntentNameLineContext intentNameLine() {
		IntentNameLineContext _localctx = new IntentNameLineContext(Context, State);
		EnterRule(_localctx, 24, RULE_intentNameLine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 206;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 203;
				Match(WS);
				}
				}
				State = 208;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 209;
			Match(HASH);
			State = 211;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==HASH) {
				{
				State = 210;
				Match(HASH);
				}
			}

			State = 216;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 213;
				Match(WS);
				}
				}
				State = 218;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 219;
			intentName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntentNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameIdentifierContext[] nameIdentifier() {
			return GetRuleContexts<NameIdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameIdentifierContext nameIdentifier(int i) {
			return GetRuleContext<NameIdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		public IntentNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intentName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterIntentName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitIntentName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntentName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntentNameContext intentName() {
		IntentNameContext _localctx = new IntentNameContext(Context, State);
		EnterRule(_localctx, 26, RULE_intentName);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 221;
			nameIdentifier();
			State = 226;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 224;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case WS:
						{
						State = 222;
						Match(WS);
						}
						break;
					case IDENTIFIER:
						{
						State = 223;
						nameIdentifier();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 228;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntentBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NormalIntentBodyContext normalIntentBody() {
			return GetRuleContext<NormalIntentBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		public IntentBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intentBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterIntentBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitIntentBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntentBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntentBodyContext intentBody() {
		IntentBodyContext _localctx = new IntentBodyContext(Context, State);
		EnterRule(_localctx, 28, RULE_intentBody);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 232;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 229;
					Match(WS);
					}
					} 
				}
				State = 234;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			}
			State = 235;
			normalIntentBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NormalIntentBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ErrorStringContext[] errorString() {
			return GetRuleContexts<ErrorStringContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ErrorStringContext errorString(int i) {
			return GetRuleContext<ErrorStringContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NormalIntentStringContext[] normalIntentString() {
			return GetRuleContexts<NormalIntentStringContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NormalIntentStringContext normalIntentString(int i) {
			return GetRuleContext<NormalIntentStringContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext[] newline() {
			return GetRuleContexts<NewlineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline(int i) {
			return GetRuleContext<NewlineContext>(i);
		}
		public NormalIntentBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_normalIntentBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterNormalIntentBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitNormalIntentBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNormalIntentBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NormalIntentBodyContext normalIntentBody() {
		NormalIntentBodyContext _localctx = new NormalIntentBodyContext(Context, State);
		EnterRule(_localctx, 30, RULE_normalIntentBody);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 240;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 237;
					Match(WS);
					}
					} 
				}
				State = 242;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			}
			State = 247;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 247;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
					case 1:
						{
						{
						State = 243;
						normalIntentString();
						State = 244;
						newline();
						}
						}
						break;
					case 2:
						{
						State = 246;
						errorString();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 249;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NormalIntentStringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DASH() { return GetToken(LUFileParser.DASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TEXT() { return GetTokens(LUFileParser.TEXT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT(int i) {
			return GetToken(LUFileParser.TEXT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EXPRESSION() { return GetTokens(LUFileParser.EXPRESSION); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPRESSION(int i) {
			return GetToken(LUFileParser.EXPRESSION, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ESCAPE_CHARACTER() { return GetTokens(LUFileParser.ESCAPE_CHARACTER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE_CHARACTER(int i) {
			return GetToken(LUFileParser.ESCAPE_CHARACTER, i);
		}
		public NormalIntentStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_normalIntentString; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterNormalIntentString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitNormalIntentString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNormalIntentString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NormalIntentStringContext normalIntentString() {
		NormalIntentStringContext _localctx = new NormalIntentStringContext(Context, State);
		EnterRule(_localctx, 32, RULE_normalIntentString);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 254;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 251;
				Match(WS);
				}
				}
				State = 256;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 257;
			Match(DASH);
			State = 261;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 258;
					_la = TokenStream.LA(1);
					if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 15032385538L) != 0) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					} 
				}
				State = 263;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewEntitySectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NewEntityDefinitionContext newEntityDefinition() {
			return GetRuleContext<NewEntityDefinitionContext>(0);
		}
		public NewEntitySectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newEntitySection; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterNewEntitySection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitNewEntitySection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewEntitySection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewEntitySectionContext newEntitySection() {
		NewEntitySectionContext _localctx = new NewEntitySectionContext(Context, State);
		EnterRule(_localctx, 34, RULE_newEntitySection);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 264;
			newEntityDefinition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewEntityDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NewEntityLineContext newEntityLine() {
			return GetRuleContext<NewEntityLineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewEntityListbodyContext newEntityListbody() {
			return GetRuleContext<NewEntityListbodyContext>(0);
		}
		public NewEntityDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newEntityDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterNewEntityDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitNewEntityDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewEntityDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewEntityDefinitionContext newEntityDefinition() {
		NewEntityDefinitionContext _localctx = new NewEntityDefinitionContext(Context, State);
		EnterRule(_localctx, 36, RULE_newEntityDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 266;
			newEntityLine();
			State = 268;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				{
				State = 267;
				newEntityListbody();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewEntityListbodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ErrorStringContext[] errorString() {
			return GetRuleContexts<ErrorStringContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ErrorStringContext errorString(int i) {
			return GetRuleContext<ErrorStringContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NormalItemStringContext[] normalItemString() {
			return GetRuleContexts<NormalItemStringContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NormalItemStringContext normalItemString(int i) {
			return GetRuleContext<NormalItemStringContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext[] newline() {
			return GetRuleContexts<NewlineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline(int i) {
			return GetRuleContext<NewlineContext>(i);
		}
		public NewEntityListbodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newEntityListbody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterNewEntityListbody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitNewEntityListbody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewEntityListbody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewEntityListbodyContext newEntityListbody() {
		NewEntityListbodyContext _localctx = new NewEntityListbodyContext(Context, State);
		EnterRule(_localctx, 38, RULE_newEntityListbody);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 274;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 274;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
					case 1:
						{
						{
						State = 270;
						normalItemString();
						State = 271;
						newline();
						}
						}
						break;
					case 2:
						{
						State = 273;
						errorString();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 276;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewEntityLineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(LUFileParser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline() {
			return GetRuleContext<NewlineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewEntityTypeContext newEntityType() {
			return GetRuleContext<NewEntityTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewEntityNameContext newEntityName() {
			return GetRuleContext<NewEntityNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewEntityNameWithWSContext newEntityNameWithWS() {
			return GetRuleContext<NewEntityNameWithWSContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewEntityRolesContext newEntityRoles() {
			return GetRuleContext<NewEntityRolesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewEntityUsesFeaturesContext newEntityUsesFeatures() {
			return GetRuleContext<NewEntityUsesFeaturesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(LUFileParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NewCompositeDefinitionContext newCompositeDefinition() {
			return GetRuleContext<NewCompositeDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewRegexDefinitionContext newRegexDefinition() {
			return GetRuleContext<NewRegexDefinitionContext>(0);
		}
		public NewEntityLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newEntityLine; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterNewEntityLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitNewEntityLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewEntityLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewEntityLineContext newEntityLine() {
		NewEntityLineContext _localctx = new NewEntityLineContext(Context, State);
		EnterRule(_localctx, 40, RULE_newEntityLine);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 281;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 278;
				Match(WS);
				}
				}
				State = 283;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 284;
			Match(AT);
			State = 288;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 285;
					Match(WS);
					}
					} 
				}
				State = 290;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
			}
			State = 292;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEW_ENTITY_TYPE_IDENTIFIER) {
				{
				State = 291;
				newEntityType();
				}
			}

			State = 297;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 294;
					Match(WS);
					}
					} 
				}
				State = 299;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
			}
			State = 302;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				{
				State = 300;
				newEntityName();
				}
				break;
			case 2:
				{
				State = 301;
				newEntityNameWithWS();
				}
				break;
			}
			State = 307;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 304;
					Match(WS);
					}
					} 
				}
				State = 309;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
			}
			State = 311;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
			case 1:
				{
				State = 310;
				newEntityRoles();
				}
				break;
			}
			State = 316;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,33,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 313;
					Match(WS);
					}
					} 
				}
				State = 318;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,33,Context);
			}
			State = 320;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==HAS_FEATURES_LABEL) {
				{
				State = 319;
				newEntityUsesFeatures();
				}
			}

			State = 325;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,35,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 322;
					Match(WS);
					}
					} 
				}
				State = 327;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,35,Context);
			}
			State = 329;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQUAL) {
				{
				State = 328;
				Match(EQUAL);
				}
			}

			State = 334;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,37,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 331;
					Match(WS);
					}
					} 
				}
				State = 336;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,37,Context);
			}
			State = 339;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NEW_COMPOSITE_ENTITY:
				{
				State = 337;
				newCompositeDefinition();
				}
				break;
			case NEW_REGEX_ENTITY:
				{
				State = 338;
				newRegexDefinition();
				}
				break;
			case Eof:
			case WS:
			case NEWLINE:
				break;
			default:
				break;
			}
			State = 341;
			newline();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewCompositeDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW_COMPOSITE_ENTITY() { return GetToken(LUFileParser.NEW_COMPOSITE_ENTITY, 0); }
		public NewCompositeDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newCompositeDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterNewCompositeDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitNewCompositeDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewCompositeDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewCompositeDefinitionContext newCompositeDefinition() {
		NewCompositeDefinitionContext _localctx = new NewCompositeDefinitionContext(Context, State);
		EnterRule(_localctx, 42, RULE_newCompositeDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 343;
			Match(NEW_COMPOSITE_ENTITY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewRegexDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW_REGEX_ENTITY() { return GetToken(LUFileParser.NEW_REGEX_ENTITY, 0); }
		public NewRegexDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newRegexDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterNewRegexDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitNewRegexDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewRegexDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewRegexDefinitionContext newRegexDefinition() {
		NewRegexDefinitionContext _localctx = new NewRegexDefinitionContext(Context, State);
		EnterRule(_localctx, 44, RULE_newRegexDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 345;
			Match(NEW_REGEX_ENTITY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewEntityTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW_ENTITY_TYPE_IDENTIFIER() { return GetToken(LUFileParser.NEW_ENTITY_TYPE_IDENTIFIER, 0); }
		public NewEntityTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newEntityType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterNewEntityType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitNewEntityType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewEntityType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewEntityTypeContext newEntityType() {
		NewEntityTypeContext _localctx = new NewEntityTypeContext(Context, State);
		EnterRule(_localctx, 46, RULE_newEntityType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 347;
			Match(NEW_ENTITY_TYPE_IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewEntityRolesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NewEntityRoleOrFeaturesContext newEntityRoleOrFeatures() {
			return GetRuleContext<NewEntityRoleOrFeaturesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HAS_ROLES_LABEL() { return GetToken(LUFileParser.HAS_ROLES_LABEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		public NewEntityRolesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newEntityRoles; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterNewEntityRoles(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitNewEntityRoles(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewEntityRoles(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewEntityRolesContext newEntityRoles() {
		NewEntityRolesContext _localctx = new NewEntityRolesContext(Context, State);
		EnterRule(_localctx, 48, RULE_newEntityRoles);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 350;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==HAS_ROLES_LABEL) {
				{
				State = 349;
				Match(HAS_ROLES_LABEL);
				}
			}

			State = 355;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 352;
				Match(WS);
				}
				}
				State = 357;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 358;
			newEntityRoleOrFeatures();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewEntityUsesFeaturesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HAS_FEATURES_LABEL() { return GetToken(LUFileParser.HAS_FEATURES_LABEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NewEntityRoleOrFeaturesContext newEntityRoleOrFeatures() {
			return GetRuleContext<NewEntityRoleOrFeaturesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		public NewEntityUsesFeaturesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newEntityUsesFeatures; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterNewEntityUsesFeatures(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitNewEntityUsesFeatures(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewEntityUsesFeatures(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewEntityUsesFeaturesContext newEntityUsesFeatures() {
		NewEntityUsesFeaturesContext _localctx = new NewEntityUsesFeaturesContext(Context, State);
		EnterRule(_localctx, 50, RULE_newEntityUsesFeatures);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 360;
			Match(HAS_FEATURES_LABEL);
			State = 364;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 361;
				Match(WS);
				}
				}
				State = 366;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 367;
			newEntityRoleOrFeatures();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewEntityRoleOrFeaturesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEW_ENTITY_IDENTIFIER() { return GetTokens(LUFileParser.NEW_ENTITY_IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW_ENTITY_IDENTIFIER(int i) {
			return GetToken(LUFileParser.NEW_ENTITY_IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEW_ENTITY_IDENTIFIER_WITH_WS() { return GetTokens(LUFileParser.NEW_ENTITY_IDENTIFIER_WITH_WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW_ENTITY_IDENTIFIER_WITH_WS(int i) {
			return GetToken(LUFileParser.NEW_ENTITY_IDENTIFIER_WITH_WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(LUFileParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(LUFileParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		public NewEntityRoleOrFeaturesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newEntityRoleOrFeatures; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterNewEntityRoleOrFeatures(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitNewEntityRoleOrFeatures(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewEntityRoleOrFeatures(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewEntityRoleOrFeaturesContext newEntityRoleOrFeatures() {
		NewEntityRoleOrFeaturesContext _localctx = new NewEntityRoleOrFeaturesContext(Context, State);
		EnterRule(_localctx, 52, RULE_newEntityRoleOrFeatures);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 369;
			_la = TokenStream.LA(1);
			if ( !(_la==NEW_ENTITY_IDENTIFIER || _la==NEW_ENTITY_IDENTIFIER_WITH_WS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 386;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,44,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 373;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==WS) {
						{
						{
						State = 370;
						Match(WS);
						}
						}
						State = 375;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 376;
					Match(COMMA);
					State = 380;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==WS) {
						{
						{
						State = 377;
						Match(WS);
						}
						}
						State = 382;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 383;
					_la = TokenStream.LA(1);
					if ( !(_la==NEW_ENTITY_IDENTIFIER || _la==NEW_ENTITY_IDENTIFIER_WITH_WS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					} 
				}
				State = 388;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,44,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewEntityNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW_ENTITY_IDENTIFIER() { return GetToken(LUFileParser.NEW_ENTITY_IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PHRASE_LIST_LABEL() { return GetToken(LUFileParser.PHRASE_LIST_LABEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		public NewEntityNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newEntityName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterNewEntityName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitNewEntityName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewEntityName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewEntityNameContext newEntityName() {
		NewEntityNameContext _localctx = new NewEntityNameContext(Context, State);
		EnterRule(_localctx, 54, RULE_newEntityName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 389;
			Match(NEW_ENTITY_IDENTIFIER);
			State = 397;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,46,Context) ) {
			case 1:
				{
				State = 393;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS) {
					{
					{
					State = 390;
					Match(WS);
					}
					}
					State = 395;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 396;
				Match(PHRASE_LIST_LABEL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewEntityNameWithWSContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW_ENTITY_IDENTIFIER_WITH_WS() { return GetToken(LUFileParser.NEW_ENTITY_IDENTIFIER_WITH_WS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PHRASE_LIST_LABEL() { return GetToken(LUFileParser.PHRASE_LIST_LABEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		public NewEntityNameWithWSContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newEntityNameWithWS; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterNewEntityNameWithWS(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitNewEntityNameWithWS(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewEntityNameWithWS(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewEntityNameWithWSContext newEntityNameWithWS() {
		NewEntityNameWithWSContext _localctx = new NewEntityNameWithWSContext(Context, State);
		EnterRule(_localctx, 56, RULE_newEntityNameWithWS);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 399;
			Match(NEW_ENTITY_IDENTIFIER_WITH_WS);
			State = 407;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,48,Context) ) {
			case 1:
				{
				State = 403;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS) {
					{
					{
					State = 400;
					Match(WS);
					}
					}
					State = 405;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 406;
				Match(PHRASE_LIST_LABEL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntitySectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EntityDefinitionContext entityDefinition() {
			return GetRuleContext<EntityDefinitionContext>(0);
		}
		public EntitySectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entitySection; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterEntitySection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitEntitySection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntitySection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EntitySectionContext entitySection() {
		EntitySectionContext _localctx = new EntitySectionContext(Context, State);
		EnterRule(_localctx, 58, RULE_entitySection);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 409;
			entityDefinition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntityDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EntityLineContext entityLine() {
			return GetRuleContext<EntityLineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EntityListBodyContext entityListBody() {
			return GetRuleContext<EntityListBodyContext>(0);
		}
		public EntityDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entityDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterEntityDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitEntityDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntityDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EntityDefinitionContext entityDefinition() {
		EntityDefinitionContext _localctx = new EntityDefinitionContext(Context, State);
		EnterRule(_localctx, 60, RULE_entityDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 411;
			entityLine();
			State = 413;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,49,Context) ) {
			case 1:
				{
				State = 412;
				entityListBody();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntityLineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOLLAR() { return GetToken(LUFileParser.DOLLAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EntityNameContext entityName() {
			return GetRuleContext<EntityNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON_MARK() { return GetToken(LUFileParser.COLON_MARK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EntityTypeContext entityType() {
			return GetRuleContext<EntityTypeContext>(0);
		}
		public EntityLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entityLine; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterEntityLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitEntityLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntityLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EntityLineContext entityLine() {
		EntityLineContext _localctx = new EntityLineContext(Context, State);
		EnterRule(_localctx, 62, RULE_entityLine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 418;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 415;
				Match(WS);
				}
				}
				State = 420;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 421;
			Match(DOLLAR);
			State = 423;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,51,Context) ) {
			case 1:
				{
				State = 422;
				entityName();
				}
				break;
			}
			State = 426;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,52,Context) ) {
			case 1:
				{
				State = 425;
				Match(COLON_MARK);
				}
				break;
			}
			State = 429;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,53,Context) ) {
			case 1:
				{
				State = 428;
				entityType();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntityNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ENTITY_TEXT() { return GetTokens(LUFileParser.ENTITY_TEXT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENTITY_TEXT(int i) {
			return GetToken(LUFileParser.ENTITY_TEXT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		public EntityNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entityName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterEntityName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitEntityName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntityName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EntityNameContext entityName() {
		EntityNameContext _localctx = new EntityNameContext(Context, State);
		EnterRule(_localctx, 64, RULE_entityName);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 432;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 431;
					_la = TokenStream.LA(1);
					if ( !(_la==WS || _la==ENTITY_TEXT) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 434;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,54,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntityTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CompositeEntityIdentifierContext[] compositeEntityIdentifier() {
			return GetRuleContexts<CompositeEntityIdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompositeEntityIdentifierContext compositeEntityIdentifier(int i) {
			return GetRuleContext<CompositeEntityIdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexEntityIdentifierContext[] regexEntityIdentifier() {
			return GetRuleContexts<RegexEntityIdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexEntityIdentifierContext regexEntityIdentifier(int i) {
			return GetRuleContext<RegexEntityIdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ENTITY_TEXT() { return GetTokens(LUFileParser.ENTITY_TEXT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENTITY_TEXT(int i) {
			return GetToken(LUFileParser.ENTITY_TEXT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COLON_MARK() { return GetTokens(LUFileParser.COLON_MARK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON_MARK(int i) {
			return GetToken(LUFileParser.COLON_MARK, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		public EntityTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entityType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterEntityType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitEntityType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntityType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EntityTypeContext entityType() {
		EntityTypeContext _localctx = new EntityTypeContext(Context, State);
		EnterRule(_localctx, 66, RULE_entityType);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 441;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 441;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case COMPOSITE_ENTITY:
						{
						State = 436;
						compositeEntityIdentifier();
						}
						break;
					case REGEX_ENTITY:
						{
						State = 437;
						regexEntityIdentifier();
						}
						break;
					case ENTITY_TEXT:
						{
						State = 438;
						Match(ENTITY_TEXT);
						}
						break;
					case COLON_MARK:
						{
						State = 439;
						Match(COLON_MARK);
						}
						break;
					case WS:
						{
						State = 440;
						Match(WS);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 443;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,56,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompositeEntityIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPOSITE_ENTITY() { return GetToken(LUFileParser.COMPOSITE_ENTITY, 0); }
		public CompositeEntityIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compositeEntityIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterCompositeEntityIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitCompositeEntityIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompositeEntityIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompositeEntityIdentifierContext compositeEntityIdentifier() {
		CompositeEntityIdentifierContext _localctx = new CompositeEntityIdentifierContext(Context, State);
		EnterRule(_localctx, 68, RULE_compositeEntityIdentifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 445;
			Match(COMPOSITE_ENTITY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RegexEntityIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REGEX_ENTITY() { return GetToken(LUFileParser.REGEX_ENTITY, 0); }
		public RegexEntityIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_regexEntityIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterRegexEntityIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitRegexEntityIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegexEntityIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RegexEntityIdentifierContext regexEntityIdentifier() {
		RegexEntityIdentifierContext _localctx = new RegexEntityIdentifierContext(Context, State);
		EnterRule(_localctx, 70, RULE_regexEntityIdentifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 447;
			Match(REGEX_ENTITY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntityListBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ErrorStringContext[] errorString() {
			return GetRuleContexts<ErrorStringContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ErrorStringContext errorString(int i) {
			return GetRuleContext<ErrorStringContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NormalItemStringContext[] normalItemString() {
			return GetRuleContexts<NormalItemStringContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NormalItemStringContext normalItemString(int i) {
			return GetRuleContext<NormalItemStringContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext[] newline() {
			return GetRuleContexts<NewlineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline(int i) {
			return GetRuleContext<NewlineContext>(i);
		}
		public EntityListBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entityListBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterEntityListBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitEntityListBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntityListBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EntityListBodyContext entityListBody() {
		EntityListBodyContext _localctx = new EntityListBodyContext(Context, State);
		EnterRule(_localctx, 72, RULE_entityListBody);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 453;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 453;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,57,Context) ) {
					case 1:
						{
						{
						State = 449;
						normalItemString();
						State = 450;
						newline();
						}
						}
						break;
					case 2:
						{
						State = 452;
						errorString();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 455;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,58,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NormalItemStringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DASH() { return GetToken(LUFileParser.DASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TEXT() { return GetTokens(LUFileParser.TEXT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT(int i) {
			return GetToken(LUFileParser.TEXT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EXPRESSION() { return GetTokens(LUFileParser.EXPRESSION); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPRESSION(int i) {
			return GetToken(LUFileParser.EXPRESSION, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ESCAPE_CHARACTER() { return GetTokens(LUFileParser.ESCAPE_CHARACTER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE_CHARACTER(int i) {
			return GetToken(LUFileParser.ESCAPE_CHARACTER, i);
		}
		public NormalItemStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_normalItemString; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterNormalItemString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitNormalItemString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNormalItemString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NormalItemStringContext normalItemString() {
		NormalItemStringContext _localctx = new NormalItemStringContext(Context, State);
		EnterRule(_localctx, 74, RULE_normalItemString);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 460;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 457;
				Match(WS);
				}
				}
				State = 462;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 463;
			Match(DASH);
			State = 467;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,60,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 464;
					_la = TokenStream.LA(1);
					if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 15032385538L) != 0) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					} 
				}
				State = 469;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,60,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportSectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ImportDefinitionContext importDefinition() {
			return GetRuleContext<ImportDefinitionContext>(0);
		}
		public ImportSectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importSection; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterImportSection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitImportSection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportSection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportSectionContext importSection() {
		ImportSectionContext _localctx = new ImportSectionContext(Context, State);
		EnterRule(_localctx, 76, RULE_importSection);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 470;
			importDefinition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT() { return GetToken(LUFileParser.IMPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		public ImportDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterImportDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitImportDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportDefinitionContext importDefinition() {
		ImportDefinitionContext _localctx = new ImportDefinitionContext(Context, State);
		EnterRule(_localctx, 78, RULE_importDefinition);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 475;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 472;
				Match(WS);
				}
				}
				State = 477;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 478;
			Match(IMPORT);
			State = 482;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,62,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 479;
					Match(WS);
					}
					} 
				}
				State = 484;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,62,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReferenceSectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceDefinitionContext referenceDefinition() {
			return GetRuleContext<ReferenceDefinitionContext>(0);
		}
		public ReferenceSectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_referenceSection; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterReferenceSection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitReferenceSection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReferenceSection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReferenceSectionContext referenceSection() {
		ReferenceSectionContext _localctx = new ReferenceSectionContext(Context, State);
		EnterRule(_localctx, 80, RULE_referenceSection);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 485;
			referenceDefinition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReferenceDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFERENCE() { return GetToken(LUFileParser.REFERENCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		public ReferenceDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_referenceDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterReferenceDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitReferenceDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReferenceDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReferenceDefinitionContext referenceDefinition() {
		ReferenceDefinitionContext _localctx = new ReferenceDefinitionContext(Context, State);
		EnterRule(_localctx, 82, RULE_referenceDefinition);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 490;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 487;
				Match(WS);
				}
				}
				State = 492;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 493;
			Match(REFERENCE);
			State = 497;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,64,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 494;
					Match(WS);
					}
					} 
				}
				State = 499;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,64,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QnaSectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QnaDefinitionContext qnaDefinition() {
			return GetRuleContext<QnaDefinitionContext>(0);
		}
		public QnaSectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qnaSection; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterQnaSection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitQnaSection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQnaSection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QnaSectionContext qnaSection() {
		QnaSectionContext _localctx = new QnaSectionContext(Context, State);
		EnterRule(_localctx, 84, RULE_qnaSection);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 500;
			qnaDefinition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QnaDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QnaQuestionContext qnaQuestion() {
			return GetRuleContext<QnaQuestionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MoreQuestionsBodyContext moreQuestionsBody() {
			return GetRuleContext<MoreQuestionsBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QnaAnswerBodyContext qnaAnswerBody() {
			return GetRuleContext<QnaAnswerBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QnaSourceInfoContext qnaSourceInfo() {
			return GetRuleContext<QnaSourceInfoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QnaIdMarkContext qnaIdMark() {
			return GetRuleContext<QnaIdMarkContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PromptSectionContext promptSection() {
			return GetRuleContext<PromptSectionContext>(0);
		}
		public QnaDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qnaDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterQnaDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitQnaDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQnaDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QnaDefinitionContext qnaDefinition() {
		QnaDefinitionContext _localctx = new QnaDefinitionContext(Context, State);
		EnterRule(_localctx, 86, RULE_qnaDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 503;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,65,Context) ) {
			case 1:
				{
				State = 502;
				qnaSourceInfo();
				}
				break;
			}
			State = 506;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,66,Context) ) {
			case 1:
				{
				State = 505;
				qnaIdMark();
				}
				break;
			}
			State = 508;
			qnaQuestion();
			State = 509;
			moreQuestionsBody();
			State = 510;
			qnaAnswerBody();
			State = 512;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,67,Context) ) {
			case 1:
				{
				State = 511;
				promptSection();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QnaSourceInfoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QNA_SOURCE_INFO() { return GetToken(LUFileParser.QNA_SOURCE_INFO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		public QnaSourceInfoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qnaSourceInfo; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterQnaSourceInfo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitQnaSourceInfo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQnaSourceInfo(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QnaSourceInfoContext qnaSourceInfo() {
		QnaSourceInfoContext _localctx = new QnaSourceInfoContext(Context, State);
		EnterRule(_localctx, 88, RULE_qnaSourceInfo);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 517;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 514;
				Match(WS);
				}
				}
				State = 519;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 520;
			Match(QNA_SOURCE_INFO);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QnaIdMarkContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QNA_ID_MARK() { return GetToken(LUFileParser.QNA_ID_MARK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		public QnaIdMarkContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qnaIdMark; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterQnaIdMark(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitQnaIdMark(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQnaIdMark(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QnaIdMarkContext qnaIdMark() {
		QnaIdMarkContext _localctx = new QnaIdMarkContext(Context, State);
		EnterRule(_localctx, 90, RULE_qnaIdMark);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 525;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 522;
				Match(WS);
				}
				}
				State = 527;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 528;
			Match(QNA_ID_MARK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QnaQuestionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QNA() { return GetToken(LUFileParser.QNA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QuestionTextContext questionText() {
			return GetRuleContext<QuestionTextContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		public QnaQuestionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qnaQuestion; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterQnaQuestion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitQnaQuestion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQnaQuestion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QnaQuestionContext qnaQuestion() {
		QnaQuestionContext _localctx = new QnaQuestionContext(Context, State);
		EnterRule(_localctx, 92, RULE_qnaQuestion);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 533;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 530;
				Match(WS);
				}
				}
				State = 535;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 536;
			Match(QNA);
			State = 537;
			questionText();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QuestionTextContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] QNA_TEXT() { return GetTokens(LUFileParser.QNA_TEXT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QNA_TEXT(int i) {
			return GetToken(LUFileParser.QNA_TEXT, i);
		}
		public QuestionTextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_questionText; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterQuestionText(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitQuestionText(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuestionText(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QuestionTextContext questionText() {
		QuestionTextContext _localctx = new QuestionTextContext(Context, State);
		EnterRule(_localctx, 94, RULE_questionText);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 542;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==QNA_TEXT) {
				{
				{
				State = 539;
				Match(QNA_TEXT);
				}
				}
				State = 544;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MoreQuestionsBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ErrorQuestionStringContext[] errorQuestionString() {
			return GetRuleContexts<ErrorQuestionStringContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ErrorQuestionStringContext errorQuestionString(int i) {
			return GetRuleContext<ErrorQuestionStringContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MoreQuestionContext[] moreQuestion() {
			return GetRuleContexts<MoreQuestionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MoreQuestionContext moreQuestion(int i) {
			return GetRuleContext<MoreQuestionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext[] newline() {
			return GetRuleContexts<NewlineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline(int i) {
			return GetRuleContext<NewlineContext>(i);
		}
		public MoreQuestionsBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moreQuestionsBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterMoreQuestionsBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitMoreQuestionsBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMoreQuestionsBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MoreQuestionsBodyContext moreQuestionsBody() {
		MoreQuestionsBodyContext _localctx = new MoreQuestionsBodyContext(Context, State);
		EnterRule(_localctx, 96, RULE_moreQuestionsBody);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 548;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,72,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 545;
					Match(WS);
					}
					} 
				}
				State = 550;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,72,Context);
			}
			State = 557;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,74,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 555;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case DASH:
						{
						{
						State = 551;
						moreQuestion();
						State = 552;
						newline();
						}
						}
						break;
					case WS:
					case INVALID_TOKEN_DEFAULT_MODE:
						{
						State = 554;
						errorQuestionString();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 559;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,74,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MoreQuestionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DASH() { return GetToken(LUFileParser.DASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TEXT() { return GetTokens(LUFileParser.TEXT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT(int i) {
			return GetToken(LUFileParser.TEXT, i);
		}
		public MoreQuestionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moreQuestion; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterMoreQuestion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitMoreQuestion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMoreQuestion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MoreQuestionContext moreQuestion() {
		MoreQuestionContext _localctx = new MoreQuestionContext(Context, State);
		EnterRule(_localctx, 98, RULE_moreQuestion);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 560;
			Match(DASH);
			State = 564;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,75,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 561;
					_la = TokenStream.LA(1);
					if ( !(_la==WS || _la==TEXT) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					} 
				}
				State = 566;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,75,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ErrorQuestionStringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INVALID_TOKEN_DEFAULT_MODE() { return GetTokens(LUFileParser.INVALID_TOKEN_DEFAULT_MODE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INVALID_TOKEN_DEFAULT_MODE(int i) {
			return GetToken(LUFileParser.INVALID_TOKEN_DEFAULT_MODE, i);
		}
		public ErrorQuestionStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_errorQuestionString; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterErrorQuestionString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitErrorQuestionString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitErrorQuestionString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ErrorQuestionStringContext errorQuestionString() {
		ErrorQuestionStringContext _localctx = new ErrorQuestionStringContext(Context, State);
		EnterRule(_localctx, 100, RULE_errorQuestionString);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 568;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 567;
					_la = TokenStream.LA(1);
					if ( !(_la==WS || _la==INVALID_TOKEN_DEFAULT_MODE) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 570;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,76,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QnaAnswerBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MultiLineAnswerContext multiLineAnswer() {
			return GetRuleContext<MultiLineAnswerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FilterSectionContext filterSection() {
			return GetRuleContext<FilterSectionContext>(0);
		}
		public QnaAnswerBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qnaAnswerBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterQnaAnswerBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitQnaAnswerBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQnaAnswerBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QnaAnswerBodyContext qnaAnswerBody() {
		QnaAnswerBodyContext _localctx = new QnaAnswerBodyContext(Context, State);
		EnterRule(_localctx, 102, RULE_qnaAnswerBody);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 580;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,79,Context) ) {
			case 1:
				{
				{
				State = 573;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,77,Context) ) {
				case 1:
					{
					State = 572;
					filterSection();
					}
					break;
				}
				State = 575;
				multiLineAnswer();
				}
				}
				break;
			case 2:
				{
				{
				State = 576;
				multiLineAnswer();
				State = 578;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,78,Context) ) {
				case 1:
					{
					State = 577;
					filterSection();
					}
					break;
				}
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilterSectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILTER_MARK() { return GetToken(LUFileParser.FILTER_MARK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FilterLineContext[] filterLine() {
			return GetRuleContexts<FilterLineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FilterLineContext filterLine(int i) {
			return GetRuleContext<FilterLineContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ErrorFilterLineContext[] errorFilterLine() {
			return GetRuleContexts<ErrorFilterLineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ErrorFilterLineContext errorFilterLine(int i) {
			return GetRuleContext<ErrorFilterLineContext>(i);
		}
		public FilterSectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filterSection; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterFilterSection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitFilterSection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilterSection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FilterSectionContext filterSection() {
		FilterSectionContext _localctx = new FilterSectionContext(Context, State);
		EnterRule(_localctx, 104, RULE_filterSection);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 585;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 582;
				Match(WS);
				}
				}
				State = 587;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 588;
			Match(FILTER_MARK);
			State = 591;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 591;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,81,Context) ) {
					case 1:
						{
						State = 589;
						filterLine();
						}
						break;
					case 2:
						{
						State = 590;
						errorFilterLine();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 593;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,82,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PromptSectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROMPT_MARK() { return GetToken(LUFileParser.PROMPT_MARK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FilterLineContext[] filterLine() {
			return GetRuleContexts<FilterLineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FilterLineContext filterLine(int i) {
			return GetRuleContext<FilterLineContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ErrorFilterLineContext[] errorFilterLine() {
			return GetRuleContexts<ErrorFilterLineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ErrorFilterLineContext errorFilterLine(int i) {
			return GetRuleContext<ErrorFilterLineContext>(i);
		}
		public PromptSectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_promptSection; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterPromptSection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitPromptSection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPromptSection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PromptSectionContext promptSection() {
		PromptSectionContext _localctx = new PromptSectionContext(Context, State);
		EnterRule(_localctx, 106, RULE_promptSection);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 598;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 595;
				Match(WS);
				}
				}
				State = 600;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 601;
			Match(PROMPT_MARK);
			State = 604;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 604;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,84,Context) ) {
					case 1:
						{
						State = 602;
						filterLine();
						}
						break;
					case 2:
						{
						State = 603;
						errorFilterLine();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 606;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,85,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilterLineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DASH() { return GetToken(LUFileParser.DASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline() {
			return GetRuleContext<NewlineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TEXT() { return GetTokens(LUFileParser.TEXT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT(int i) {
			return GetToken(LUFileParser.TEXT, i);
		}
		public FilterLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filterLine; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterFilterLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitFilterLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilterLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FilterLineContext filterLine() {
		FilterLineContext _localctx = new FilterLineContext(Context, State);
		EnterRule(_localctx, 108, RULE_filterLine);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 611;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 608;
				Match(WS);
				}
				}
				State = 613;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 614;
			Match(DASH);
			State = 618;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,87,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 615;
					_la = TokenStream.LA(1);
					if ( !(_la==WS || _la==TEXT) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					} 
				}
				State = 620;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,87,Context);
			}
			State = 621;
			newline();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ErrorFilterLineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INVALID_TOKEN_DEFAULT_MODE() { return GetTokens(LUFileParser.INVALID_TOKEN_DEFAULT_MODE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INVALID_TOKEN_DEFAULT_MODE(int i) {
			return GetToken(LUFileParser.INVALID_TOKEN_DEFAULT_MODE, i);
		}
		public ErrorFilterLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_errorFilterLine; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterErrorFilterLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitErrorFilterLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitErrorFilterLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ErrorFilterLineContext errorFilterLine() {
		ErrorFilterLineContext _localctx = new ErrorFilterLineContext(Context, State);
		EnterRule(_localctx, 110, RULE_errorFilterLine);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 624;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 623;
					_la = TokenStream.LA(1);
					if ( !(_la==WS || _la==INVALID_TOKEN_DEFAULT_MODE) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 626;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,88,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiLineAnswerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTI_LINE_TEXT() { return GetToken(LUFileParser.MULTI_LINE_TEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		public MultiLineAnswerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiLineAnswer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterMultiLineAnswer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitMultiLineAnswer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiLineAnswer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiLineAnswerContext multiLineAnswer() {
		MultiLineAnswerContext _localctx = new MultiLineAnswerContext(Context, State);
		EnterRule(_localctx, 112, RULE_multiLineAnswer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 631;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 628;
				Match(WS);
				}
				}
				State = 633;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 634;
			Match(MULTI_LINE_TEXT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModelInfoSectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ModelInfoDefinitionContext modelInfoDefinition() {
			return GetRuleContext<ModelInfoDefinitionContext>(0);
		}
		public ModelInfoSectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modelInfoSection; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterModelInfoSection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitModelInfoSection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModelInfoSection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModelInfoSectionContext modelInfoSection() {
		ModelInfoSectionContext _localctx = new ModelInfoSectionContext(Context, State);
		EnterRule(_localctx, 114, RULE_modelInfoSection);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 636;
			modelInfoDefinition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModelInfoDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODEL_INFO() { return GetToken(LUFileParser.MODEL_INFO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		public ModelInfoDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modelInfoDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterModelInfoDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitModelInfoDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModelInfoDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModelInfoDefinitionContext modelInfoDefinition() {
		ModelInfoDefinitionContext _localctx = new ModelInfoDefinitionContext(Context, State);
		EnterRule(_localctx, 116, RULE_modelInfoDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 641;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 638;
				Match(WS);
				}
				}
				State = 643;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 644;
			Match(MODEL_INFO);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,40,647,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,1,0,4,0,120,8,0,11,0,12,0,121,1,0,1,0,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,3,1,135,8,1,1,2,5,2,138,8,2,10,2,12,2,141,9,2,
		1,2,1,2,1,3,4,3,146,8,3,11,3,12,3,147,1,4,1,4,1,4,1,5,5,5,154,8,5,10,5,
		12,5,157,9,5,1,5,1,5,5,5,161,8,5,10,5,12,5,164,9,5,1,5,1,5,1,6,1,6,1,6,
		5,6,171,8,6,10,6,12,6,174,9,6,1,7,1,7,1,7,5,7,179,8,7,10,7,12,7,182,9,
		7,1,8,4,8,185,8,8,11,8,12,8,186,1,9,5,9,190,8,9,10,9,12,9,193,9,9,1,9,
		1,9,1,9,1,10,1,10,1,11,1,11,3,11,202,8,11,1,12,5,12,205,8,12,10,12,12,
		12,208,9,12,1,12,1,12,3,12,212,8,12,1,12,5,12,215,8,12,10,12,12,12,218,
		9,12,1,12,1,12,1,13,1,13,1,13,5,13,225,8,13,10,13,12,13,228,9,13,1,14,
		5,14,231,8,14,10,14,12,14,234,9,14,1,14,1,14,1,15,5,15,239,8,15,10,15,
		12,15,242,9,15,1,15,1,15,1,15,1,15,4,15,248,8,15,11,15,12,15,249,1,16,
		5,16,253,8,16,10,16,12,16,256,9,16,1,16,1,16,5,16,260,8,16,10,16,12,16,
		263,9,16,1,17,1,17,1,18,1,18,3,18,269,8,18,1,19,1,19,1,19,1,19,4,19,275,
		8,19,11,19,12,19,276,1,20,5,20,280,8,20,10,20,12,20,283,9,20,1,20,1,20,
		5,20,287,8,20,10,20,12,20,290,9,20,1,20,3,20,293,8,20,1,20,5,20,296,8,
		20,10,20,12,20,299,9,20,1,20,1,20,3,20,303,8,20,1,20,5,20,306,8,20,10,
		20,12,20,309,9,20,1,20,3,20,312,8,20,1,20,5,20,315,8,20,10,20,12,20,318,
		9,20,1,20,3,20,321,8,20,1,20,5,20,324,8,20,10,20,12,20,327,9,20,1,20,3,
		20,330,8,20,1,20,5,20,333,8,20,10,20,12,20,336,9,20,1,20,1,20,3,20,340,
		8,20,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,3,24,351,8,24,1,24,5,
		24,354,8,24,10,24,12,24,357,9,24,1,24,1,24,1,25,1,25,5,25,363,8,25,10,
		25,12,25,366,9,25,1,25,1,25,1,26,1,26,5,26,372,8,26,10,26,12,26,375,9,
		26,1,26,1,26,5,26,379,8,26,10,26,12,26,382,9,26,1,26,5,26,385,8,26,10,
		26,12,26,388,9,26,1,27,1,27,5,27,392,8,27,10,27,12,27,395,9,27,1,27,3,
		27,398,8,27,1,28,1,28,5,28,402,8,28,10,28,12,28,405,9,28,1,28,3,28,408,
		8,28,1,29,1,29,1,30,1,30,3,30,414,8,30,1,31,5,31,417,8,31,10,31,12,31,
		420,9,31,1,31,1,31,3,31,424,8,31,1,31,3,31,427,8,31,1,31,3,31,430,8,31,
		1,32,4,32,433,8,32,11,32,12,32,434,1,33,1,33,1,33,1,33,1,33,4,33,442,8,
		33,11,33,12,33,443,1,34,1,34,1,35,1,35,1,36,1,36,1,36,1,36,4,36,454,8,
		36,11,36,12,36,455,1,37,5,37,459,8,37,10,37,12,37,462,9,37,1,37,1,37,5,
		37,466,8,37,10,37,12,37,469,9,37,1,38,1,38,1,39,5,39,474,8,39,10,39,12,
		39,477,9,39,1,39,1,39,5,39,481,8,39,10,39,12,39,484,9,39,1,40,1,40,1,41,
		5,41,489,8,41,10,41,12,41,492,9,41,1,41,1,41,5,41,496,8,41,10,41,12,41,
		499,9,41,1,42,1,42,1,43,3,43,504,8,43,1,43,3,43,507,8,43,1,43,1,43,1,43,
		1,43,3,43,513,8,43,1,44,5,44,516,8,44,10,44,12,44,519,9,44,1,44,1,44,1,
		45,5,45,524,8,45,10,45,12,45,527,9,45,1,45,1,45,1,46,5,46,532,8,46,10,
		46,12,46,535,9,46,1,46,1,46,1,46,1,47,5,47,541,8,47,10,47,12,47,544,9,
		47,1,48,5,48,547,8,48,10,48,12,48,550,9,48,1,48,1,48,1,48,1,48,5,48,556,
		8,48,10,48,12,48,559,9,48,1,49,1,49,5,49,563,8,49,10,49,12,49,566,9,49,
		1,50,4,50,569,8,50,11,50,12,50,570,1,51,3,51,574,8,51,1,51,1,51,1,51,3,
		51,579,8,51,3,51,581,8,51,1,52,5,52,584,8,52,10,52,12,52,587,9,52,1,52,
		1,52,1,52,4,52,592,8,52,11,52,12,52,593,1,53,5,53,597,8,53,10,53,12,53,
		600,9,53,1,53,1,53,1,53,4,53,605,8,53,11,53,12,53,606,1,54,5,54,610,8,
		54,10,54,12,54,613,9,54,1,54,1,54,5,54,617,8,54,10,54,12,54,620,9,54,1,
		54,1,54,1,55,4,55,625,8,55,11,55,12,55,626,1,56,5,56,630,8,56,10,56,12,
		56,633,9,56,1,56,1,56,1,57,1,57,1,58,5,58,640,8,58,10,58,12,58,643,9,58,
		1,58,1,58,1,58,1,121,0,59,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,
		34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,
		82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,0,6,1,1,
		2,2,2,0,1,1,17,17,2,0,1,1,31,33,1,0,26,27,2,0,1,1,37,37,2,0,1,1,33,33,
		690,0,119,1,0,0,0,2,134,1,0,0,0,4,139,1,0,0,0,6,145,1,0,0,0,8,149,1,0,
		0,0,10,155,1,0,0,0,12,167,1,0,0,0,14,175,1,0,0,0,16,184,1,0,0,0,18,191,
		1,0,0,0,20,197,1,0,0,0,22,199,1,0,0,0,24,206,1,0,0,0,26,221,1,0,0,0,28,
		232,1,0,0,0,30,240,1,0,0,0,32,254,1,0,0,0,34,264,1,0,0,0,36,266,1,0,0,
		0,38,274,1,0,0,0,40,281,1,0,0,0,42,343,1,0,0,0,44,345,1,0,0,0,46,347,1,
		0,0,0,48,350,1,0,0,0,50,360,1,0,0,0,52,369,1,0,0,0,54,389,1,0,0,0,56,399,
		1,0,0,0,58,409,1,0,0,0,60,411,1,0,0,0,62,418,1,0,0,0,64,432,1,0,0,0,66,
		441,1,0,0,0,68,445,1,0,0,0,70,447,1,0,0,0,72,453,1,0,0,0,74,460,1,0,0,
		0,76,470,1,0,0,0,78,475,1,0,0,0,80,485,1,0,0,0,82,490,1,0,0,0,84,500,1,
		0,0,0,86,503,1,0,0,0,88,517,1,0,0,0,90,525,1,0,0,0,92,533,1,0,0,0,94,542,
		1,0,0,0,96,548,1,0,0,0,98,560,1,0,0,0,100,568,1,0,0,0,102,580,1,0,0,0,
		104,585,1,0,0,0,106,598,1,0,0,0,108,611,1,0,0,0,110,624,1,0,0,0,112,631,
		1,0,0,0,114,636,1,0,0,0,116,641,1,0,0,0,118,120,3,2,1,0,119,118,1,0,0,
		0,120,121,1,0,0,0,121,122,1,0,0,0,121,119,1,0,0,0,122,123,1,0,0,0,123,
		124,5,0,0,1,124,1,1,0,0,0,125,135,5,2,0,0,126,135,3,8,4,0,127,135,3,20,
		10,0,128,135,3,58,29,0,129,135,3,34,17,0,130,135,3,76,38,0,131,135,3,80,
		40,0,132,135,3,84,42,0,133,135,3,114,57,0,134,125,1,0,0,0,134,126,1,0,
		0,0,134,127,1,0,0,0,134,128,1,0,0,0,134,129,1,0,0,0,134,130,1,0,0,0,134,
		131,1,0,0,0,134,132,1,0,0,0,134,133,1,0,0,0,135,3,1,0,0,0,136,138,5,1,
		0,0,137,136,1,0,0,0,138,141,1,0,0,0,139,137,1,0,0,0,139,140,1,0,0,0,140,
		142,1,0,0,0,141,139,1,0,0,0,142,143,7,0,0,0,143,5,1,0,0,0,144,146,7,1,
		0,0,145,144,1,0,0,0,146,147,1,0,0,0,147,145,1,0,0,0,147,148,1,0,0,0,148,
		7,1,0,0,0,149,150,3,10,5,0,150,151,3,16,8,0,151,9,1,0,0,0,152,154,5,1,
		0,0,153,152,1,0,0,0,154,157,1,0,0,0,155,153,1,0,0,0,155,156,1,0,0,0,156,
		158,1,0,0,0,157,155,1,0,0,0,158,162,5,7,0,0,159,161,5,1,0,0,160,159,1,
		0,0,0,161,164,1,0,0,0,162,160,1,0,0,0,162,163,1,0,0,0,163,165,1,0,0,0,
		164,162,1,0,0,0,165,166,3,12,6,0,166,11,1,0,0,0,167,172,3,14,7,0,168,171,
		5,1,0,0,169,171,3,14,7,0,170,168,1,0,0,0,170,169,1,0,0,0,171,174,1,0,0,
		0,172,170,1,0,0,0,172,173,1,0,0,0,173,13,1,0,0,0,174,172,1,0,0,0,175,180,
		5,29,0,0,176,177,5,30,0,0,177,179,5,29,0,0,178,176,1,0,0,0,179,182,1,0,
		0,0,180,178,1,0,0,0,180,181,1,0,0,0,181,15,1,0,0,0,182,180,1,0,0,0,183,
		185,3,18,9,0,184,183,1,0,0,0,185,186,1,0,0,0,186,184,1,0,0,0,186,187,1,
		0,0,0,187,17,1,0,0,0,188,190,5,1,0,0,189,188,1,0,0,0,190,193,1,0,0,0,191,
		189,1,0,0,0,191,192,1,0,0,0,192,194,1,0,0,0,193,191,1,0,0,0,194,195,5,
		7,0,0,195,196,3,20,10,0,196,19,1,0,0,0,197,198,3,22,11,0,198,21,1,0,0,
		0,199,201,3,24,12,0,200,202,3,28,14,0,201,200,1,0,0,0,201,202,1,0,0,0,
		202,23,1,0,0,0,203,205,5,1,0,0,204,203,1,0,0,0,205,208,1,0,0,0,206,204,
		1,0,0,0,206,207,1,0,0,0,207,209,1,0,0,0,208,206,1,0,0,0,209,211,5,7,0,
		0,210,212,5,7,0,0,211,210,1,0,0,0,211,212,1,0,0,0,212,216,1,0,0,0,213,
		215,5,1,0,0,214,213,1,0,0,0,215,218,1,0,0,0,216,214,1,0,0,0,216,217,1,
		0,0,0,217,219,1,0,0,0,218,216,1,0,0,0,219,220,3,26,13,0,220,25,1,0,0,0,
		221,226,3,14,7,0,222,225,5,1,0,0,223,225,3,14,7,0,224,222,1,0,0,0,224,
		223,1,0,0,0,225,228,1,0,0,0,226,224,1,0,0,0,226,227,1,0,0,0,227,27,1,0,
		0,0,228,226,1,0,0,0,229,231,5,1,0,0,230,229,1,0,0,0,231,234,1,0,0,0,232,
		230,1,0,0,0,232,233,1,0,0,0,233,235,1,0,0,0,234,232,1,0,0,0,235,236,3,
		30,15,0,236,29,1,0,0,0,237,239,5,1,0,0,238,237,1,0,0,0,239,242,1,0,0,0,
		240,238,1,0,0,0,240,241,1,0,0,0,241,247,1,0,0,0,242,240,1,0,0,0,243,244,
		3,32,16,0,244,245,3,4,2,0,245,248,1,0,0,0,246,248,3,6,3,0,247,243,1,0,
		0,0,247,246,1,0,0,0,248,249,1,0,0,0,249,247,1,0,0,0,249,250,1,0,0,0,250,
		31,1,0,0,0,251,253,5,1,0,0,252,251,1,0,0,0,253,256,1,0,0,0,254,252,1,0,
		0,0,254,255,1,0,0,0,255,257,1,0,0,0,256,254,1,0,0,0,257,261,5,8,0,0,258,
		260,7,2,0,0,259,258,1,0,0,0,260,263,1,0,0,0,261,259,1,0,0,0,261,262,1,
		0,0,0,262,33,1,0,0,0,263,261,1,0,0,0,264,265,3,36,18,0,265,35,1,0,0,0,
		266,268,3,40,20,0,267,269,3,38,19,0,268,267,1,0,0,0,268,269,1,0,0,0,269,
		37,1,0,0,0,270,271,3,74,37,0,271,272,3,4,2,0,272,275,1,0,0,0,273,275,3,
		6,3,0,274,270,1,0,0,0,274,273,1,0,0,0,275,276,1,0,0,0,276,274,1,0,0,0,
		276,277,1,0,0,0,277,39,1,0,0,0,278,280,5,1,0,0,279,278,1,0,0,0,280,283,
		1,0,0,0,281,279,1,0,0,0,281,282,1,0,0,0,282,284,1,0,0,0,283,281,1,0,0,
		0,284,288,5,10,0,0,285,287,5,1,0,0,286,285,1,0,0,0,287,290,1,0,0,0,288,
		286,1,0,0,0,288,289,1,0,0,0,289,292,1,0,0,0,290,288,1,0,0,0,291,293,3,
		46,23,0,292,291,1,0,0,0,292,293,1,0,0,0,293,297,1,0,0,0,294,296,5,1,0,
		0,295,294,1,0,0,0,296,299,1,0,0,0,297,295,1,0,0,0,297,298,1,0,0,0,298,
		302,1,0,0,0,299,297,1,0,0,0,300,303,3,54,27,0,301,303,3,56,28,0,302,300,
		1,0,0,0,302,301,1,0,0,0,302,303,1,0,0,0,303,307,1,0,0,0,304,306,5,1,0,
		0,305,304,1,0,0,0,306,309,1,0,0,0,307,305,1,0,0,0,307,308,1,0,0,0,308,
		311,1,0,0,0,309,307,1,0,0,0,310,312,3,48,24,0,311,310,1,0,0,0,311,312,
		1,0,0,0,312,316,1,0,0,0,313,315,5,1,0,0,314,313,1,0,0,0,315,318,1,0,0,
		0,316,314,1,0,0,0,316,317,1,0,0,0,317,320,1,0,0,0,318,316,1,0,0,0,319,
		321,3,50,25,0,320,319,1,0,0,0,320,321,1,0,0,0,321,325,1,0,0,0,322,324,
		5,1,0,0,323,322,1,0,0,0,324,327,1,0,0,0,325,323,1,0,0,0,325,326,1,0,0,
		0,326,329,1,0,0,0,327,325,1,0,0,0,328,330,5,18,0,0,329,328,1,0,0,0,329,
		330,1,0,0,0,330,334,1,0,0,0,331,333,5,1,0,0,332,331,1,0,0,0,333,336,1,
		0,0,0,334,332,1,0,0,0,334,335,1,0,0,0,335,339,1,0,0,0,336,334,1,0,0,0,
		337,340,3,42,21,0,338,340,3,44,22,0,339,337,1,0,0,0,339,338,1,0,0,0,339,
		340,1,0,0,0,340,341,1,0,0,0,341,342,3,4,2,0,342,41,1,0,0,0,343,344,5,24,
		0,0,344,43,1,0,0,0,345,346,5,25,0,0,346,45,1,0,0,0,347,348,5,22,0,0,348,
		47,1,0,0,0,349,351,5,20,0,0,350,349,1,0,0,0,350,351,1,0,0,0,351,355,1,
		0,0,0,352,354,5,1,0,0,353,352,1,0,0,0,354,357,1,0,0,0,355,353,1,0,0,0,
		355,356,1,0,0,0,356,358,1,0,0,0,357,355,1,0,0,0,358,359,3,52,26,0,359,
		49,1,0,0,0,360,364,5,21,0,0,361,363,5,1,0,0,362,361,1,0,0,0,363,366,1,
		0,0,0,364,362,1,0,0,0,364,365,1,0,0,0,365,367,1,0,0,0,366,364,1,0,0,0,
		367,368,3,52,26,0,368,51,1,0,0,0,369,386,7,3,0,0,370,372,5,1,0,0,371,370,
		1,0,0,0,372,375,1,0,0,0,373,371,1,0,0,0,373,374,1,0,0,0,374,376,1,0,0,
		0,375,373,1,0,0,0,376,380,5,19,0,0,377,379,5,1,0,0,378,377,1,0,0,0,379,
		382,1,0,0,0,380,378,1,0,0,0,380,381,1,0,0,0,381,383,1,0,0,0,382,380,1,
		0,0,0,383,385,7,3,0,0,384,373,1,0,0,0,385,388,1,0,0,0,386,384,1,0,0,0,
		386,387,1,0,0,0,387,53,1,0,0,0,388,386,1,0,0,0,389,397,5,26,0,0,390,392,
		5,1,0,0,391,390,1,0,0,0,392,395,1,0,0,0,393,391,1,0,0,0,393,394,1,0,0,
		0,394,396,1,0,0,0,395,393,1,0,0,0,396,398,5,23,0,0,397,393,1,0,0,0,397,
		398,1,0,0,0,398,55,1,0,0,0,399,407,5,27,0,0,400,402,5,1,0,0,401,400,1,
		0,0,0,402,405,1,0,0,0,403,401,1,0,0,0,403,404,1,0,0,0,404,406,1,0,0,0,
		405,403,1,0,0,0,406,408,5,23,0,0,407,403,1,0,0,0,407,408,1,0,0,0,408,57,
		1,0,0,0,409,410,3,60,30,0,410,59,1,0,0,0,411,413,3,62,31,0,412,414,3,72,
		36,0,413,412,1,0,0,0,413,414,1,0,0,0,414,61,1,0,0,0,415,417,5,1,0,0,416,
		415,1,0,0,0,417,420,1,0,0,0,418,416,1,0,0,0,418,419,1,0,0,0,419,421,1,
		0,0,0,420,418,1,0,0,0,421,423,5,9,0,0,422,424,3,64,32,0,423,422,1,0,0,
		0,423,424,1,0,0,0,424,426,1,0,0,0,425,427,5,38,0,0,426,425,1,0,0,0,426,
		427,1,0,0,0,427,429,1,0,0,0,428,430,3,66,33,0,429,428,1,0,0,0,429,430,
		1,0,0,0,430,63,1,0,0,0,431,433,7,4,0,0,432,431,1,0,0,0,433,434,1,0,0,0,
		434,432,1,0,0,0,434,435,1,0,0,0,435,65,1,0,0,0,436,442,3,68,34,0,437,442,
		3,70,35,0,438,442,5,37,0,0,439,442,5,38,0,0,440,442,5,1,0,0,441,436,1,
		0,0,0,441,437,1,0,0,0,441,438,1,0,0,0,441,439,1,0,0,0,441,440,1,0,0,0,
		442,443,1,0,0,0,443,441,1,0,0,0,443,444,1,0,0,0,444,67,1,0,0,0,445,446,
		5,35,0,0,446,69,1,0,0,0,447,448,5,36,0,0,448,71,1,0,0,0,449,450,3,74,37,
		0,450,451,3,4,2,0,451,454,1,0,0,0,452,454,3,6,3,0,453,449,1,0,0,0,453,
		452,1,0,0,0,454,455,1,0,0,0,455,453,1,0,0,0,455,456,1,0,0,0,456,73,1,0,
		0,0,457,459,5,1,0,0,458,457,1,0,0,0,459,462,1,0,0,0,460,458,1,0,0,0,460,
		461,1,0,0,0,461,463,1,0,0,0,462,460,1,0,0,0,463,467,5,8,0,0,464,466,7,
		2,0,0,465,464,1,0,0,0,466,469,1,0,0,0,467,465,1,0,0,0,467,468,1,0,0,0,
		468,75,1,0,0,0,469,467,1,0,0,0,470,471,3,78,39,0,471,77,1,0,0,0,472,474,
		5,1,0,0,473,472,1,0,0,0,474,477,1,0,0,0,475,473,1,0,0,0,475,476,1,0,0,
		0,476,478,1,0,0,0,477,475,1,0,0,0,478,482,5,11,0,0,479,481,5,1,0,0,480,
		479,1,0,0,0,481,484,1,0,0,0,482,480,1,0,0,0,482,483,1,0,0,0,483,79,1,0,
		0,0,484,482,1,0,0,0,485,486,3,82,41,0,486,81,1,0,0,0,487,489,5,1,0,0,488,
		487,1,0,0,0,489,492,1,0,0,0,490,488,1,0,0,0,490,491,1,0,0,0,491,493,1,
		0,0,0,492,490,1,0,0,0,493,497,5,12,0,0,494,496,5,1,0,0,495,494,1,0,0,0,
		496,499,1,0,0,0,497,495,1,0,0,0,497,498,1,0,0,0,498,83,1,0,0,0,499,497,
		1,0,0,0,500,501,3,86,43,0,501,85,1,0,0,0,502,504,3,88,44,0,503,502,1,0,
		0,0,503,504,1,0,0,0,504,506,1,0,0,0,505,507,3,90,45,0,506,505,1,0,0,0,
		506,507,1,0,0,0,507,508,1,0,0,0,508,509,3,92,46,0,509,510,3,96,48,0,510,
		512,3,102,51,0,511,513,3,106,53,0,512,511,1,0,0,0,512,513,1,0,0,0,513,
		87,1,0,0,0,514,516,5,1,0,0,515,514,1,0,0,0,516,519,1,0,0,0,517,515,1,0,
		0,0,517,518,1,0,0,0,518,520,1,0,0,0,519,517,1,0,0,0,520,521,5,3,0,0,521,
		89,1,0,0,0,522,524,5,1,0,0,523,522,1,0,0,0,524,527,1,0,0,0,525,523,1,0,
		0,0,525,526,1,0,0,0,526,528,1,0,0,0,527,525,1,0,0,0,528,529,5,14,0,0,529,
		91,1,0,0,0,530,532,5,1,0,0,531,530,1,0,0,0,532,535,1,0,0,0,533,531,1,0,
		0,0,533,534,1,0,0,0,534,536,1,0,0,0,535,533,1,0,0,0,536,537,5,6,0,0,537,
		538,3,94,47,0,538,93,1,0,0,0,539,541,5,40,0,0,540,539,1,0,0,0,541,544,
		1,0,0,0,542,540,1,0,0,0,542,543,1,0,0,0,543,95,1,0,0,0,544,542,1,0,0,0,
		545,547,5,1,0,0,546,545,1,0,0,0,547,550,1,0,0,0,548,546,1,0,0,0,548,549,
		1,0,0,0,549,557,1,0,0,0,550,548,1,0,0,0,551,552,3,98,49,0,552,553,3,4,
		2,0,553,556,1,0,0,0,554,556,3,100,50,0,555,551,1,0,0,0,555,554,1,0,0,0,
		556,559,1,0,0,0,557,555,1,0,0,0,557,558,1,0,0,0,558,97,1,0,0,0,559,557,
		1,0,0,0,560,564,5,8,0,0,561,563,7,5,0,0,562,561,1,0,0,0,563,566,1,0,0,
		0,564,562,1,0,0,0,564,565,1,0,0,0,565,99,1,0,0,0,566,564,1,0,0,0,567,569,
		7,1,0,0,568,567,1,0,0,0,569,570,1,0,0,0,570,568,1,0,0,0,570,571,1,0,0,
		0,571,101,1,0,0,0,572,574,3,104,52,0,573,572,1,0,0,0,573,574,1,0,0,0,574,
		575,1,0,0,0,575,581,3,112,56,0,576,578,3,112,56,0,577,579,3,104,52,0,578,
		577,1,0,0,0,578,579,1,0,0,0,579,581,1,0,0,0,580,573,1,0,0,0,580,576,1,
		0,0,0,581,103,1,0,0,0,582,584,5,1,0,0,583,582,1,0,0,0,584,587,1,0,0,0,
		585,583,1,0,0,0,585,586,1,0,0,0,586,588,1,0,0,0,587,585,1,0,0,0,588,591,
		5,13,0,0,589,592,3,108,54,0,590,592,3,110,55,0,591,589,1,0,0,0,591,590,
		1,0,0,0,592,593,1,0,0,0,593,591,1,0,0,0,593,594,1,0,0,0,594,105,1,0,0,
		0,595,597,5,1,0,0,596,595,1,0,0,0,597,600,1,0,0,0,598,596,1,0,0,0,598,
		599,1,0,0,0,599,601,1,0,0,0,600,598,1,0,0,0,601,604,5,16,0,0,602,605,3,
		108,54,0,603,605,3,110,55,0,604,602,1,0,0,0,604,603,1,0,0,0,605,606,1,
		0,0,0,606,604,1,0,0,0,606,607,1,0,0,0,607,107,1,0,0,0,608,610,5,1,0,0,
		609,608,1,0,0,0,610,613,1,0,0,0,611,609,1,0,0,0,611,612,1,0,0,0,612,614,
		1,0,0,0,613,611,1,0,0,0,614,618,5,8,0,0,615,617,7,5,0,0,616,615,1,0,0,
		0,617,620,1,0,0,0,618,616,1,0,0,0,618,619,1,0,0,0,619,621,1,0,0,0,620,
		618,1,0,0,0,621,622,3,4,2,0,622,109,1,0,0,0,623,625,7,1,0,0,624,623,1,
		0,0,0,625,626,1,0,0,0,626,624,1,0,0,0,626,627,1,0,0,0,627,111,1,0,0,0,
		628,630,5,1,0,0,629,628,1,0,0,0,630,633,1,0,0,0,631,629,1,0,0,0,631,632,
		1,0,0,0,632,634,1,0,0,0,633,631,1,0,0,0,634,635,5,15,0,0,635,113,1,0,0,
		0,636,637,3,116,58,0,637,115,1,0,0,0,638,640,5,1,0,0,639,638,1,0,0,0,640,
		643,1,0,0,0,641,639,1,0,0,0,641,642,1,0,0,0,642,644,1,0,0,0,643,641,1,
		0,0,0,644,645,5,4,0,0,645,117,1,0,0,0,91,121,134,139,147,155,162,170,172,
		180,186,191,201,206,211,216,224,226,232,240,247,249,254,261,268,274,276,
		281,288,292,297,302,307,311,316,320,325,329,334,339,350,355,364,373,380,
		386,393,397,403,407,413,418,423,426,429,434,441,443,453,455,460,467,475,
		482,490,497,503,506,512,517,525,533,542,548,555,557,564,570,573,578,580,
		585,591,593,598,604,606,611,618,626,631,641
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
