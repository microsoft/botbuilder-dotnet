//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from LUFileParser.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class LUFileParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		WS=1, NEWLINE=2, QNA_SOURCE_INFO=3, MODEL_INFO=4, COMMENT=5, QNA=6, HASH=7, 
		DASH=8, DOLLAR=9, AT=10, IMPORT=11, REFERENCE=12, FILTER_MARK=13, QNA_ID_MARK=14, 
		MULTI_LINE_TEXT=15, PROMPT_MARK=16, INVALID_TOKEN_DEFAULT_MODE=17, EQUAL=18, 
		COMMA=19, HAS_ROLES_LABEL=20, HAS_FEATURES_LABEL=21, NEW_ENTITY_TYPE_IDENTIFIER=22, 
		PHRASE_LIST_LABEL=23, NEW_COMPOSITE_ENTITY=24, NEW_REGEX_ENTITY=25, NEW_ENTITY_IDENTIFIER=26, 
		NEW_ENTITY_IDENTIFIER_WITH_WS=27, NEWLINE_IN_NAME=28, IDENTIFIER=29, DOT=30, 
		ESCAPE_CHARACTER=31, EXPRESSION=32, TEXT=33, NEWLINE_IN_ENTITY=34, COMPOSITE_ENTITY=35, 
		REGEX_ENTITY=36, ENTITY_TEXT=37, COLON_MARK=38, NEWLINE_IN_QNA=39, QNA_TEXT=40;
	public const int
		RULE_file = 0, RULE_paragraph = 1, RULE_newline = 2, RULE_commentDefinition = 3, 
		RULE_errorString = 4, RULE_nestedIntentSection = 5, RULE_nestedIntentNameLine = 6, 
		RULE_nestedIntentName = 7, RULE_nameIdentifier = 8, RULE_nestedIntentBodyDefinition = 9, 
		RULE_subIntentDefinition = 10, RULE_simpleIntentSection = 11, RULE_intentDefinition = 12, 
		RULE_intentNameLine = 13, RULE_intentName = 14, RULE_intentBody = 15, 
		RULE_normalIntentBody = 16, RULE_normalIntentString = 17, RULE_newEntitySection = 18, 
		RULE_newEntityDefinition = 19, RULE_newEntityListbody = 20, RULE_newEntityLine = 21, 
		RULE_newCompositeDefinition = 22, RULE_newRegexDefinition = 23, RULE_newEntityType = 24, 
		RULE_newEntityRoles = 25, RULE_newEntityUsesFeatures = 26, RULE_newEntityRoleOrFeatures = 27, 
		RULE_newEntityName = 28, RULE_newEntityNameWithWS = 29, RULE_entitySection = 30, 
		RULE_entityDefinition = 31, RULE_entityLine = 32, RULE_entityName = 33, 
		RULE_entityType = 34, RULE_compositeEntityIdentifier = 35, RULE_regexEntityIdentifier = 36, 
		RULE_entityListBody = 37, RULE_normalItemString = 38, RULE_importSection = 39, 
		RULE_importDefinition = 40, RULE_referenceSection = 41, RULE_referenceDefinition = 42, 
		RULE_qnaSection = 43, RULE_qnaDefinition = 44, RULE_qnaSourceInfo = 45, 
		RULE_qnaIdMark = 46, RULE_qnaQuestion = 47, RULE_questionText = 48, RULE_moreQuestionsBody = 49, 
		RULE_moreQuestion = 50, RULE_errorQuestionString = 51, RULE_qnaAnswerBody = 52, 
		RULE_filterSection = 53, RULE_promptSection = 54, RULE_filterLine = 55, 
		RULE_errorFilterLine = 56, RULE_multiLineAnswer = 57, RULE_modelInfoSection = 58, 
		RULE_modelInfoDefinition = 59;
	public static readonly string[] ruleNames = {
		"file", "paragraph", "newline", "commentDefinition", "errorString", "nestedIntentSection", 
		"nestedIntentNameLine", "nestedIntentName", "nameIdentifier", "nestedIntentBodyDefinition", 
		"subIntentDefinition", "simpleIntentSection", "intentDefinition", "intentNameLine", 
		"intentName", "intentBody", "normalIntentBody", "normalIntentString", 
		"newEntitySection", "newEntityDefinition", "newEntityListbody", "newEntityLine", 
		"newCompositeDefinition", "newRegexDefinition", "newEntityType", "newEntityRoles", 
		"newEntityUsesFeatures", "newEntityRoleOrFeatures", "newEntityName", "newEntityNameWithWS", 
		"entitySection", "entityDefinition", "entityLine", "entityName", "entityType", 
		"compositeEntityIdentifier", "regexEntityIdentifier", "entityListBody", 
		"normalItemString", "importSection", "importDefinition", "referenceSection", 
		"referenceDefinition", "qnaSection", "qnaDefinition", "qnaSourceInfo", 
		"qnaIdMark", "qnaQuestion", "questionText", "moreQuestionsBody", "moreQuestion", 
		"errorQuestionString", "qnaAnswerBody", "filterSection", "promptSection", 
		"filterLine", "errorFilterLine", "multiLineAnswer", "modelInfoSection", 
		"modelInfoDefinition"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, null, "'$'", "'@'", null, 
		null, null, null, null, null, null, "'='", "','", null, null, null, null, 
		null, null, null, null, null, null, "'.'", null, null, null, null, null, 
		null, null, "':'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "WS", "NEWLINE", "QNA_SOURCE_INFO", "MODEL_INFO", "COMMENT", "QNA", 
		"HASH", "DASH", "DOLLAR", "AT", "IMPORT", "REFERENCE", "FILTER_MARK", 
		"QNA_ID_MARK", "MULTI_LINE_TEXT", "PROMPT_MARK", "INVALID_TOKEN_DEFAULT_MODE", 
		"EQUAL", "COMMA", "HAS_ROLES_LABEL", "HAS_FEATURES_LABEL", "NEW_ENTITY_TYPE_IDENTIFIER", 
		"PHRASE_LIST_LABEL", "NEW_COMPOSITE_ENTITY", "NEW_REGEX_ENTITY", "NEW_ENTITY_IDENTIFIER", 
		"NEW_ENTITY_IDENTIFIER_WITH_WS", "NEWLINE_IN_NAME", "IDENTIFIER", "DOT", 
		"ESCAPE_CHARACTER", "EXPRESSION", "TEXT", "NEWLINE_IN_ENTITY", "COMPOSITE_ENTITY", 
		"REGEX_ENTITY", "ENTITY_TEXT", "COLON_MARK", "NEWLINE_IN_QNA", "QNA_TEXT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "LUFileParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static LUFileParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public LUFileParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public LUFileParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class FileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(LUFileParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParagraphContext[] paragraph() {
			return GetRuleContexts<ParagraphContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParagraphContext paragraph(int i) {
			return GetRuleContext<ParagraphContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommentDefinitionContext commentDefinition() {
			return GetRuleContext<CommentDefinitionContext>(0);
		}
		public FileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterFile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitFile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileContext file() {
		FileContext _localctx = new FileContext(Context, State);
		EnterRule(_localctx, 0, RULE_file);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 128;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WS:
			case NEWLINE:
			case QNA_SOURCE_INFO:
			case MODEL_INFO:
			case QNA:
			case HASH:
			case DOLLAR:
			case AT:
			case IMPORT:
			case REFERENCE:
			case QNA_ID_MARK:
				{
				State = 121;
				ErrorHandler.Sync(this);
				_alt = 1+1;
				do {
					switch (_alt) {
					case 1+1:
						{
						{
						State = 120;
						paragraph();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 123;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
				} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case Eof:
			case COMMENT:
				{
				State = 126;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMENT) {
					{
					State = 125;
					commentDefinition();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 130;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParagraphContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(LUFileParser.NEWLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NestedIntentSectionContext nestedIntentSection() {
			return GetRuleContext<NestedIntentSectionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleIntentSectionContext simpleIntentSection() {
			return GetRuleContext<SimpleIntentSectionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EntitySectionContext entitySection() {
			return GetRuleContext<EntitySectionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewEntitySectionContext newEntitySection() {
			return GetRuleContext<NewEntitySectionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportSectionContext importSection() {
			return GetRuleContext<ImportSectionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceSectionContext referenceSection() {
			return GetRuleContext<ReferenceSectionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QnaSectionContext qnaSection() {
			return GetRuleContext<QnaSectionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModelInfoSectionContext modelInfoSection() {
			return GetRuleContext<ModelInfoSectionContext>(0);
		}
		public ParagraphContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paragraph; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterParagraph(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitParagraph(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParagraph(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParagraphContext paragraph() {
		ParagraphContext _localctx = new ParagraphContext(Context, State);
		EnterRule(_localctx, 2, RULE_paragraph);
		try {
			State = 141;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 132;
				Match(NEWLINE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 133;
				nestedIntentSection();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 134;
				simpleIntentSection();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 135;
				entitySection();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 136;
				newEntitySection();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 137;
				importSection();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 138;
				referenceSection();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 139;
				qnaSection();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 140;
				modelInfoSection();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewlineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(LUFileParser.NEWLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(LUFileParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		public NewlineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newline; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterNewline(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitNewline(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewline(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewlineContext newline() {
		NewlineContext _localctx = new NewlineContext(Context, State);
		EnterRule(_localctx, 4, RULE_newline);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 146;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 143;
				Match(WS);
				}
				}
				State = 148;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 149;
			_la = TokenStream.LA(1);
			if ( !(_la==Eof || _la==NEWLINE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommentDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(LUFileParser.COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(LUFileParser.NEWLINE, 0); }
		public CommentDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commentDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterCommentDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitCommentDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommentDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommentDefinitionContext commentDefinition() {
		CommentDefinitionContext _localctx = new CommentDefinitionContext(Context, State);
		EnterRule(_localctx, 6, RULE_commentDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 151;
			Match(COMMENT);
			State = 153;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEWLINE) {
				{
				State = 152;
				Match(NEWLINE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ErrorStringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INVALID_TOKEN_DEFAULT_MODE() { return GetTokens(LUFileParser.INVALID_TOKEN_DEFAULT_MODE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INVALID_TOKEN_DEFAULT_MODE(int i) {
			return GetToken(LUFileParser.INVALID_TOKEN_DEFAULT_MODE, i);
		}
		public ErrorStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_errorString; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterErrorString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitErrorString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitErrorString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ErrorStringContext errorString() {
		ErrorStringContext _localctx = new ErrorStringContext(Context, State);
		EnterRule(_localctx, 8, RULE_errorString);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 156;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 155;
					_la = TokenStream.LA(1);
					if ( !(_la==WS || _la==INVALID_TOKEN_DEFAULT_MODE) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 158;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NestedIntentSectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NestedIntentNameLineContext nestedIntentNameLine() {
			return GetRuleContext<NestedIntentNameLineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NestedIntentBodyDefinitionContext nestedIntentBodyDefinition() {
			return GetRuleContext<NestedIntentBodyDefinitionContext>(0);
		}
		public NestedIntentSectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nestedIntentSection; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterNestedIntentSection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitNestedIntentSection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNestedIntentSection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NestedIntentSectionContext nestedIntentSection() {
		NestedIntentSectionContext _localctx = new NestedIntentSectionContext(Context, State);
		EnterRule(_localctx, 10, RULE_nestedIntentSection);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 160;
			nestedIntentNameLine();
			State = 161;
			nestedIntentBodyDefinition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NestedIntentNameLineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH() { return GetToken(LUFileParser.HASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NestedIntentNameContext nestedIntentName() {
			return GetRuleContext<NestedIntentNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		public NestedIntentNameLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nestedIntentNameLine; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterNestedIntentNameLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitNestedIntentNameLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNestedIntentNameLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NestedIntentNameLineContext nestedIntentNameLine() {
		NestedIntentNameLineContext _localctx = new NestedIntentNameLineContext(Context, State);
		EnterRule(_localctx, 12, RULE_nestedIntentNameLine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 166;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 163;
				Match(WS);
				}
				}
				State = 168;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 169;
			Match(HASH);
			State = 173;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 170;
				Match(WS);
				}
				}
				State = 175;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 176;
			nestedIntentName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NestedIntentNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameIdentifierContext[] nameIdentifier() {
			return GetRuleContexts<NameIdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameIdentifierContext nameIdentifier(int i) {
			return GetRuleContext<NameIdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		public NestedIntentNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nestedIntentName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterNestedIntentName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitNestedIntentName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNestedIntentName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NestedIntentNameContext nestedIntentName() {
		NestedIntentNameContext _localctx = new NestedIntentNameContext(Context, State);
		EnterRule(_localctx, 14, RULE_nestedIntentName);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 178;
			nameIdentifier();
			State = 183;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 181;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case WS:
						{
						State = 179;
						Match(WS);
						}
						break;
					case IDENTIFIER:
						{
						State = 180;
						nameIdentifier();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 185;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(LUFileParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(LUFileParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(LUFileParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(LUFileParser.DOT, i);
		}
		public NameIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterNameIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitNameIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameIdentifierContext nameIdentifier() {
		NameIdentifierContext _localctx = new NameIdentifierContext(Context, State);
		EnterRule(_localctx, 16, RULE_nameIdentifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 186;
			Match(IDENTIFIER);
			State = 191;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOT) {
				{
				{
				State = 187;
				Match(DOT);
				State = 188;
				Match(IDENTIFIER);
				}
				}
				State = 193;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NestedIntentBodyDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SubIntentDefinitionContext[] subIntentDefinition() {
			return GetRuleContexts<SubIntentDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubIntentDefinitionContext subIntentDefinition(int i) {
			return GetRuleContext<SubIntentDefinitionContext>(i);
		}
		public NestedIntentBodyDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nestedIntentBodyDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterNestedIntentBodyDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitNestedIntentBodyDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNestedIntentBodyDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NestedIntentBodyDefinitionContext nestedIntentBodyDefinition() {
		NestedIntentBodyDefinitionContext _localctx = new NestedIntentBodyDefinitionContext(Context, State);
		EnterRule(_localctx, 18, RULE_nestedIntentBodyDefinition);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 195;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 194;
					subIntentDefinition();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 197;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubIntentDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH() { return GetToken(LUFileParser.HASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleIntentSectionContext simpleIntentSection() {
			return GetRuleContext<SimpleIntentSectionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		public SubIntentDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subIntentDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterSubIntentDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitSubIntentDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubIntentDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubIntentDefinitionContext subIntentDefinition() {
		SubIntentDefinitionContext _localctx = new SubIntentDefinitionContext(Context, State);
		EnterRule(_localctx, 20, RULE_subIntentDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 202;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 199;
				Match(WS);
				}
				}
				State = 204;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 205;
			Match(HASH);
			State = 206;
			simpleIntentSection();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleIntentSectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntentDefinitionContext intentDefinition() {
			return GetRuleContext<IntentDefinitionContext>(0);
		}
		public SimpleIntentSectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleIntentSection; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterSimpleIntentSection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitSimpleIntentSection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleIntentSection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleIntentSectionContext simpleIntentSection() {
		SimpleIntentSectionContext _localctx = new SimpleIntentSectionContext(Context, State);
		EnterRule(_localctx, 22, RULE_simpleIntentSection);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 208;
			intentDefinition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntentDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntentNameLineContext intentNameLine() {
			return GetRuleContext<IntentNameLineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntentBodyContext intentBody() {
			return GetRuleContext<IntentBodyContext>(0);
		}
		public IntentDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intentDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterIntentDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitIntentDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntentDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntentDefinitionContext intentDefinition() {
		IntentDefinitionContext _localctx = new IntentDefinitionContext(Context, State);
		EnterRule(_localctx, 24, RULE_intentDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 210;
			intentNameLine();
			State = 212;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				{
				State = 211;
				intentBody();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntentNameLineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] HASH() { return GetTokens(LUFileParser.HASH); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH(int i) {
			return GetToken(LUFileParser.HASH, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntentNameContext intentName() {
			return GetRuleContext<IntentNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		public IntentNameLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intentNameLine; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterIntentNameLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitIntentNameLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntentNameLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntentNameLineContext intentNameLine() {
		IntentNameLineContext _localctx = new IntentNameLineContext(Context, State);
		EnterRule(_localctx, 26, RULE_intentNameLine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 217;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 214;
				Match(WS);
				}
				}
				State = 219;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 220;
			Match(HASH);
			State = 222;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==HASH) {
				{
				State = 221;
				Match(HASH);
				}
			}

			State = 227;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 224;
				Match(WS);
				}
				}
				State = 229;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 230;
			intentName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntentNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameIdentifierContext[] nameIdentifier() {
			return GetRuleContexts<NameIdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameIdentifierContext nameIdentifier(int i) {
			return GetRuleContext<NameIdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		public IntentNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intentName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterIntentName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitIntentName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntentName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntentNameContext intentName() {
		IntentNameContext _localctx = new IntentNameContext(Context, State);
		EnterRule(_localctx, 28, RULE_intentName);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 232;
			nameIdentifier();
			State = 237;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 235;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case WS:
						{
						State = 233;
						Match(WS);
						}
						break;
					case IDENTIFIER:
						{
						State = 234;
						nameIdentifier();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 239;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntentBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NormalIntentBodyContext normalIntentBody() {
			return GetRuleContext<NormalIntentBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		public IntentBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intentBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterIntentBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitIntentBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntentBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntentBodyContext intentBody() {
		IntentBodyContext _localctx = new IntentBodyContext(Context, State);
		EnterRule(_localctx, 30, RULE_intentBody);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 243;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 240;
					Match(WS);
					}
					} 
				}
				State = 245;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			}
			State = 246;
			normalIntentBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NormalIntentBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ErrorStringContext[] errorString() {
			return GetRuleContexts<ErrorStringContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ErrorStringContext errorString(int i) {
			return GetRuleContext<ErrorStringContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NormalIntentStringContext[] normalIntentString() {
			return GetRuleContexts<NormalIntentStringContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NormalIntentStringContext normalIntentString(int i) {
			return GetRuleContext<NormalIntentStringContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext[] newline() {
			return GetRuleContexts<NewlineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline(int i) {
			return GetRuleContext<NewlineContext>(i);
		}
		public NormalIntentBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_normalIntentBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterNormalIntentBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitNormalIntentBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNormalIntentBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NormalIntentBodyContext normalIntentBody() {
		NormalIntentBodyContext _localctx = new NormalIntentBodyContext(Context, State);
		EnterRule(_localctx, 32, RULE_normalIntentBody);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 251;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 248;
					Match(WS);
					}
					} 
				}
				State = 253;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			}
			State = 258;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 258;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
					case 1:
						{
						{
						State = 254;
						normalIntentString();
						State = 255;
						newline();
						}
						}
						break;
					case 2:
						{
						State = 257;
						errorString();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 260;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NormalIntentStringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DASH() { return GetToken(LUFileParser.DASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TEXT() { return GetTokens(LUFileParser.TEXT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT(int i) {
			return GetToken(LUFileParser.TEXT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EXPRESSION() { return GetTokens(LUFileParser.EXPRESSION); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPRESSION(int i) {
			return GetToken(LUFileParser.EXPRESSION, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ESCAPE_CHARACTER() { return GetTokens(LUFileParser.ESCAPE_CHARACTER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE_CHARACTER(int i) {
			return GetToken(LUFileParser.ESCAPE_CHARACTER, i);
		}
		public NormalIntentStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_normalIntentString; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterNormalIntentString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitNormalIntentString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNormalIntentString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NormalIntentStringContext normalIntentString() {
		NormalIntentStringContext _localctx = new NormalIntentStringContext(Context, State);
		EnterRule(_localctx, 34, RULE_normalIntentString);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 265;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 262;
				Match(WS);
				}
				}
				State = 267;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 268;
			Match(DASH);
			State = 272;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 269;
					_la = TokenStream.LA(1);
					if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 15032385538L) != 0) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					} 
				}
				State = 274;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewEntitySectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NewEntityDefinitionContext newEntityDefinition() {
			return GetRuleContext<NewEntityDefinitionContext>(0);
		}
		public NewEntitySectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newEntitySection; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterNewEntitySection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitNewEntitySection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewEntitySection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewEntitySectionContext newEntitySection() {
		NewEntitySectionContext _localctx = new NewEntitySectionContext(Context, State);
		EnterRule(_localctx, 36, RULE_newEntitySection);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 275;
			newEntityDefinition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewEntityDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NewEntityLineContext newEntityLine() {
			return GetRuleContext<NewEntityLineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewEntityListbodyContext newEntityListbody() {
			return GetRuleContext<NewEntityListbodyContext>(0);
		}
		public NewEntityDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newEntityDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterNewEntityDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitNewEntityDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewEntityDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewEntityDefinitionContext newEntityDefinition() {
		NewEntityDefinitionContext _localctx = new NewEntityDefinitionContext(Context, State);
		EnterRule(_localctx, 38, RULE_newEntityDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 277;
			newEntityLine();
			State = 279;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				{
				State = 278;
				newEntityListbody();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewEntityListbodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ErrorStringContext[] errorString() {
			return GetRuleContexts<ErrorStringContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ErrorStringContext errorString(int i) {
			return GetRuleContext<ErrorStringContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NormalItemStringContext[] normalItemString() {
			return GetRuleContexts<NormalItemStringContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NormalItemStringContext normalItemString(int i) {
			return GetRuleContext<NormalItemStringContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext[] newline() {
			return GetRuleContexts<NewlineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline(int i) {
			return GetRuleContext<NewlineContext>(i);
		}
		public NewEntityListbodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newEntityListbody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterNewEntityListbody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitNewEntityListbody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewEntityListbody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewEntityListbodyContext newEntityListbody() {
		NewEntityListbodyContext _localctx = new NewEntityListbodyContext(Context, State);
		EnterRule(_localctx, 40, RULE_newEntityListbody);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 285;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 285;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
					case 1:
						{
						{
						State = 281;
						normalItemString();
						State = 282;
						newline();
						}
						}
						break;
					case 2:
						{
						State = 284;
						errorString();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 287;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,28,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewEntityLineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(LUFileParser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline() {
			return GetRuleContext<NewlineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewEntityTypeContext newEntityType() {
			return GetRuleContext<NewEntityTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewEntityNameContext newEntityName() {
			return GetRuleContext<NewEntityNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewEntityNameWithWSContext newEntityNameWithWS() {
			return GetRuleContext<NewEntityNameWithWSContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewEntityRolesContext newEntityRoles() {
			return GetRuleContext<NewEntityRolesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewEntityUsesFeaturesContext newEntityUsesFeatures() {
			return GetRuleContext<NewEntityUsesFeaturesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(LUFileParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NewCompositeDefinitionContext newCompositeDefinition() {
			return GetRuleContext<NewCompositeDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewRegexDefinitionContext newRegexDefinition() {
			return GetRuleContext<NewRegexDefinitionContext>(0);
		}
		public NewEntityLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newEntityLine; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterNewEntityLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitNewEntityLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewEntityLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewEntityLineContext newEntityLine() {
		NewEntityLineContext _localctx = new NewEntityLineContext(Context, State);
		EnterRule(_localctx, 42, RULE_newEntityLine);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 292;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 289;
				Match(WS);
				}
				}
				State = 294;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 295;
			Match(AT);
			State = 299;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,30,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 296;
					Match(WS);
					}
					} 
				}
				State = 301;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,30,Context);
			}
			State = 303;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEW_ENTITY_TYPE_IDENTIFIER) {
				{
				State = 302;
				newEntityType();
				}
			}

			State = 308;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 305;
					Match(WS);
					}
					} 
				}
				State = 310;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
			}
			State = 313;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
			case 1:
				{
				State = 311;
				newEntityName();
				}
				break;
			case 2:
				{
				State = 312;
				newEntityNameWithWS();
				}
				break;
			}
			State = 318;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,34,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 315;
					Match(WS);
					}
					} 
				}
				State = 320;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,34,Context);
			}
			State = 322;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
			case 1:
				{
				State = 321;
				newEntityRoles();
				}
				break;
			}
			State = 327;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,36,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 324;
					Match(WS);
					}
					} 
				}
				State = 329;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,36,Context);
			}
			State = 331;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==HAS_FEATURES_LABEL) {
				{
				State = 330;
				newEntityUsesFeatures();
				}
			}

			State = 336;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,38,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 333;
					Match(WS);
					}
					} 
				}
				State = 338;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,38,Context);
			}
			State = 340;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQUAL) {
				{
				State = 339;
				Match(EQUAL);
				}
			}

			State = 345;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,40,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 342;
					Match(WS);
					}
					} 
				}
				State = 347;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,40,Context);
			}
			State = 350;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NEW_COMPOSITE_ENTITY:
				{
				State = 348;
				newCompositeDefinition();
				}
				break;
			case NEW_REGEX_ENTITY:
				{
				State = 349;
				newRegexDefinition();
				}
				break;
			case Eof:
			case WS:
			case NEWLINE:
				break;
			default:
				break;
			}
			State = 352;
			newline();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewCompositeDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW_COMPOSITE_ENTITY() { return GetToken(LUFileParser.NEW_COMPOSITE_ENTITY, 0); }
		public NewCompositeDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newCompositeDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterNewCompositeDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitNewCompositeDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewCompositeDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewCompositeDefinitionContext newCompositeDefinition() {
		NewCompositeDefinitionContext _localctx = new NewCompositeDefinitionContext(Context, State);
		EnterRule(_localctx, 44, RULE_newCompositeDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 354;
			Match(NEW_COMPOSITE_ENTITY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewRegexDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW_REGEX_ENTITY() { return GetToken(LUFileParser.NEW_REGEX_ENTITY, 0); }
		public NewRegexDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newRegexDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterNewRegexDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitNewRegexDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewRegexDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewRegexDefinitionContext newRegexDefinition() {
		NewRegexDefinitionContext _localctx = new NewRegexDefinitionContext(Context, State);
		EnterRule(_localctx, 46, RULE_newRegexDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 356;
			Match(NEW_REGEX_ENTITY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewEntityTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW_ENTITY_TYPE_IDENTIFIER() { return GetToken(LUFileParser.NEW_ENTITY_TYPE_IDENTIFIER, 0); }
		public NewEntityTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newEntityType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterNewEntityType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitNewEntityType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewEntityType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewEntityTypeContext newEntityType() {
		NewEntityTypeContext _localctx = new NewEntityTypeContext(Context, State);
		EnterRule(_localctx, 48, RULE_newEntityType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 358;
			Match(NEW_ENTITY_TYPE_IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewEntityRolesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NewEntityRoleOrFeaturesContext newEntityRoleOrFeatures() {
			return GetRuleContext<NewEntityRoleOrFeaturesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HAS_ROLES_LABEL() { return GetToken(LUFileParser.HAS_ROLES_LABEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		public NewEntityRolesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newEntityRoles; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterNewEntityRoles(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitNewEntityRoles(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewEntityRoles(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewEntityRolesContext newEntityRoles() {
		NewEntityRolesContext _localctx = new NewEntityRolesContext(Context, State);
		EnterRule(_localctx, 50, RULE_newEntityRoles);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 361;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==HAS_ROLES_LABEL) {
				{
				State = 360;
				Match(HAS_ROLES_LABEL);
				}
			}

			State = 366;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 363;
				Match(WS);
				}
				}
				State = 368;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 369;
			newEntityRoleOrFeatures();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewEntityUsesFeaturesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HAS_FEATURES_LABEL() { return GetToken(LUFileParser.HAS_FEATURES_LABEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NewEntityRoleOrFeaturesContext newEntityRoleOrFeatures() {
			return GetRuleContext<NewEntityRoleOrFeaturesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		public NewEntityUsesFeaturesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newEntityUsesFeatures; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterNewEntityUsesFeatures(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitNewEntityUsesFeatures(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewEntityUsesFeatures(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewEntityUsesFeaturesContext newEntityUsesFeatures() {
		NewEntityUsesFeaturesContext _localctx = new NewEntityUsesFeaturesContext(Context, State);
		EnterRule(_localctx, 52, RULE_newEntityUsesFeatures);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 371;
			Match(HAS_FEATURES_LABEL);
			State = 375;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 372;
				Match(WS);
				}
				}
				State = 377;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 378;
			newEntityRoleOrFeatures();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewEntityRoleOrFeaturesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEW_ENTITY_IDENTIFIER() { return GetTokens(LUFileParser.NEW_ENTITY_IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW_ENTITY_IDENTIFIER(int i) {
			return GetToken(LUFileParser.NEW_ENTITY_IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEW_ENTITY_IDENTIFIER_WITH_WS() { return GetTokens(LUFileParser.NEW_ENTITY_IDENTIFIER_WITH_WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW_ENTITY_IDENTIFIER_WITH_WS(int i) {
			return GetToken(LUFileParser.NEW_ENTITY_IDENTIFIER_WITH_WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(LUFileParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(LUFileParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		public NewEntityRoleOrFeaturesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newEntityRoleOrFeatures; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterNewEntityRoleOrFeatures(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitNewEntityRoleOrFeatures(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewEntityRoleOrFeatures(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewEntityRoleOrFeaturesContext newEntityRoleOrFeatures() {
		NewEntityRoleOrFeaturesContext _localctx = new NewEntityRoleOrFeaturesContext(Context, State);
		EnterRule(_localctx, 54, RULE_newEntityRoleOrFeatures);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 380;
			_la = TokenStream.LA(1);
			if ( !(_la==NEW_ENTITY_IDENTIFIER || _la==NEW_ENTITY_IDENTIFIER_WITH_WS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 397;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,47,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 384;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==WS) {
						{
						{
						State = 381;
						Match(WS);
						}
						}
						State = 386;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 387;
					Match(COMMA);
					State = 391;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==WS) {
						{
						{
						State = 388;
						Match(WS);
						}
						}
						State = 393;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 394;
					_la = TokenStream.LA(1);
					if ( !(_la==NEW_ENTITY_IDENTIFIER || _la==NEW_ENTITY_IDENTIFIER_WITH_WS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					} 
				}
				State = 399;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,47,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewEntityNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW_ENTITY_IDENTIFIER() { return GetToken(LUFileParser.NEW_ENTITY_IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PHRASE_LIST_LABEL() { return GetToken(LUFileParser.PHRASE_LIST_LABEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		public NewEntityNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newEntityName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterNewEntityName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitNewEntityName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewEntityName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewEntityNameContext newEntityName() {
		NewEntityNameContext _localctx = new NewEntityNameContext(Context, State);
		EnterRule(_localctx, 56, RULE_newEntityName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 400;
			Match(NEW_ENTITY_IDENTIFIER);
			State = 408;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,49,Context) ) {
			case 1:
				{
				State = 404;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS) {
					{
					{
					State = 401;
					Match(WS);
					}
					}
					State = 406;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 407;
				Match(PHRASE_LIST_LABEL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewEntityNameWithWSContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW_ENTITY_IDENTIFIER_WITH_WS() { return GetToken(LUFileParser.NEW_ENTITY_IDENTIFIER_WITH_WS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PHRASE_LIST_LABEL() { return GetToken(LUFileParser.PHRASE_LIST_LABEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		public NewEntityNameWithWSContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newEntityNameWithWS; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterNewEntityNameWithWS(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitNewEntityNameWithWS(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewEntityNameWithWS(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewEntityNameWithWSContext newEntityNameWithWS() {
		NewEntityNameWithWSContext _localctx = new NewEntityNameWithWSContext(Context, State);
		EnterRule(_localctx, 58, RULE_newEntityNameWithWS);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 410;
			Match(NEW_ENTITY_IDENTIFIER_WITH_WS);
			State = 418;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,51,Context) ) {
			case 1:
				{
				State = 414;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS) {
					{
					{
					State = 411;
					Match(WS);
					}
					}
					State = 416;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 417;
				Match(PHRASE_LIST_LABEL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntitySectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EntityDefinitionContext entityDefinition() {
			return GetRuleContext<EntityDefinitionContext>(0);
		}
		public EntitySectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entitySection; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterEntitySection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitEntitySection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntitySection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EntitySectionContext entitySection() {
		EntitySectionContext _localctx = new EntitySectionContext(Context, State);
		EnterRule(_localctx, 60, RULE_entitySection);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 420;
			entityDefinition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntityDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EntityLineContext entityLine() {
			return GetRuleContext<EntityLineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EntityListBodyContext entityListBody() {
			return GetRuleContext<EntityListBodyContext>(0);
		}
		public EntityDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entityDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterEntityDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitEntityDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntityDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EntityDefinitionContext entityDefinition() {
		EntityDefinitionContext _localctx = new EntityDefinitionContext(Context, State);
		EnterRule(_localctx, 62, RULE_entityDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 422;
			entityLine();
			State = 424;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,52,Context) ) {
			case 1:
				{
				State = 423;
				entityListBody();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntityLineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOLLAR() { return GetToken(LUFileParser.DOLLAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EntityNameContext entityName() {
			return GetRuleContext<EntityNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON_MARK() { return GetToken(LUFileParser.COLON_MARK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EntityTypeContext entityType() {
			return GetRuleContext<EntityTypeContext>(0);
		}
		public EntityLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entityLine; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterEntityLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitEntityLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntityLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EntityLineContext entityLine() {
		EntityLineContext _localctx = new EntityLineContext(Context, State);
		EnterRule(_localctx, 64, RULE_entityLine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 429;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 426;
				Match(WS);
				}
				}
				State = 431;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 432;
			Match(DOLLAR);
			State = 434;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,54,Context) ) {
			case 1:
				{
				State = 433;
				entityName();
				}
				break;
			}
			State = 437;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,55,Context) ) {
			case 1:
				{
				State = 436;
				Match(COLON_MARK);
				}
				break;
			}
			State = 440;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,56,Context) ) {
			case 1:
				{
				State = 439;
				entityType();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntityNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ENTITY_TEXT() { return GetTokens(LUFileParser.ENTITY_TEXT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENTITY_TEXT(int i) {
			return GetToken(LUFileParser.ENTITY_TEXT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		public EntityNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entityName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterEntityName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitEntityName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntityName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EntityNameContext entityName() {
		EntityNameContext _localctx = new EntityNameContext(Context, State);
		EnterRule(_localctx, 66, RULE_entityName);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 443;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 442;
					_la = TokenStream.LA(1);
					if ( !(_la==WS || _la==ENTITY_TEXT) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 445;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,57,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntityTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CompositeEntityIdentifierContext[] compositeEntityIdentifier() {
			return GetRuleContexts<CompositeEntityIdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompositeEntityIdentifierContext compositeEntityIdentifier(int i) {
			return GetRuleContext<CompositeEntityIdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexEntityIdentifierContext[] regexEntityIdentifier() {
			return GetRuleContexts<RegexEntityIdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexEntityIdentifierContext regexEntityIdentifier(int i) {
			return GetRuleContext<RegexEntityIdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ENTITY_TEXT() { return GetTokens(LUFileParser.ENTITY_TEXT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENTITY_TEXT(int i) {
			return GetToken(LUFileParser.ENTITY_TEXT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COLON_MARK() { return GetTokens(LUFileParser.COLON_MARK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON_MARK(int i) {
			return GetToken(LUFileParser.COLON_MARK, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		public EntityTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entityType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterEntityType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitEntityType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntityType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EntityTypeContext entityType() {
		EntityTypeContext _localctx = new EntityTypeContext(Context, State);
		EnterRule(_localctx, 68, RULE_entityType);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 452;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 452;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case COMPOSITE_ENTITY:
						{
						State = 447;
						compositeEntityIdentifier();
						}
						break;
					case REGEX_ENTITY:
						{
						State = 448;
						regexEntityIdentifier();
						}
						break;
					case ENTITY_TEXT:
						{
						State = 449;
						Match(ENTITY_TEXT);
						}
						break;
					case COLON_MARK:
						{
						State = 450;
						Match(COLON_MARK);
						}
						break;
					case WS:
						{
						State = 451;
						Match(WS);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 454;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,59,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompositeEntityIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPOSITE_ENTITY() { return GetToken(LUFileParser.COMPOSITE_ENTITY, 0); }
		public CompositeEntityIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compositeEntityIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterCompositeEntityIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitCompositeEntityIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompositeEntityIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompositeEntityIdentifierContext compositeEntityIdentifier() {
		CompositeEntityIdentifierContext _localctx = new CompositeEntityIdentifierContext(Context, State);
		EnterRule(_localctx, 70, RULE_compositeEntityIdentifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 456;
			Match(COMPOSITE_ENTITY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RegexEntityIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REGEX_ENTITY() { return GetToken(LUFileParser.REGEX_ENTITY, 0); }
		public RegexEntityIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_regexEntityIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterRegexEntityIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitRegexEntityIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegexEntityIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RegexEntityIdentifierContext regexEntityIdentifier() {
		RegexEntityIdentifierContext _localctx = new RegexEntityIdentifierContext(Context, State);
		EnterRule(_localctx, 72, RULE_regexEntityIdentifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 458;
			Match(REGEX_ENTITY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntityListBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ErrorStringContext[] errorString() {
			return GetRuleContexts<ErrorStringContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ErrorStringContext errorString(int i) {
			return GetRuleContext<ErrorStringContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NormalItemStringContext[] normalItemString() {
			return GetRuleContexts<NormalItemStringContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NormalItemStringContext normalItemString(int i) {
			return GetRuleContext<NormalItemStringContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext[] newline() {
			return GetRuleContexts<NewlineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline(int i) {
			return GetRuleContext<NewlineContext>(i);
		}
		public EntityListBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entityListBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterEntityListBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitEntityListBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntityListBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EntityListBodyContext entityListBody() {
		EntityListBodyContext _localctx = new EntityListBodyContext(Context, State);
		EnterRule(_localctx, 74, RULE_entityListBody);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 464;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 464;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,60,Context) ) {
					case 1:
						{
						{
						State = 460;
						normalItemString();
						State = 461;
						newline();
						}
						}
						break;
					case 2:
						{
						State = 463;
						errorString();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 466;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,61,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NormalItemStringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DASH() { return GetToken(LUFileParser.DASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TEXT() { return GetTokens(LUFileParser.TEXT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT(int i) {
			return GetToken(LUFileParser.TEXT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EXPRESSION() { return GetTokens(LUFileParser.EXPRESSION); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPRESSION(int i) {
			return GetToken(LUFileParser.EXPRESSION, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ESCAPE_CHARACTER() { return GetTokens(LUFileParser.ESCAPE_CHARACTER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE_CHARACTER(int i) {
			return GetToken(LUFileParser.ESCAPE_CHARACTER, i);
		}
		public NormalItemStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_normalItemString; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterNormalItemString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitNormalItemString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNormalItemString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NormalItemStringContext normalItemString() {
		NormalItemStringContext _localctx = new NormalItemStringContext(Context, State);
		EnterRule(_localctx, 76, RULE_normalItemString);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 471;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 468;
				Match(WS);
				}
				}
				State = 473;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 474;
			Match(DASH);
			State = 478;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,63,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 475;
					_la = TokenStream.LA(1);
					if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 15032385538L) != 0) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					} 
				}
				State = 480;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,63,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportSectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ImportDefinitionContext importDefinition() {
			return GetRuleContext<ImportDefinitionContext>(0);
		}
		public ImportSectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importSection; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterImportSection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitImportSection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportSection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportSectionContext importSection() {
		ImportSectionContext _localctx = new ImportSectionContext(Context, State);
		EnterRule(_localctx, 78, RULE_importSection);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 481;
			importDefinition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT() { return GetToken(LUFileParser.IMPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		public ImportDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterImportDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitImportDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportDefinitionContext importDefinition() {
		ImportDefinitionContext _localctx = new ImportDefinitionContext(Context, State);
		EnterRule(_localctx, 80, RULE_importDefinition);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 486;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 483;
				Match(WS);
				}
				}
				State = 488;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 489;
			Match(IMPORT);
			State = 493;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,65,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 490;
					Match(WS);
					}
					} 
				}
				State = 495;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,65,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReferenceSectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceDefinitionContext referenceDefinition() {
			return GetRuleContext<ReferenceDefinitionContext>(0);
		}
		public ReferenceSectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_referenceSection; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterReferenceSection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitReferenceSection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReferenceSection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReferenceSectionContext referenceSection() {
		ReferenceSectionContext _localctx = new ReferenceSectionContext(Context, State);
		EnterRule(_localctx, 82, RULE_referenceSection);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 496;
			referenceDefinition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReferenceDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFERENCE() { return GetToken(LUFileParser.REFERENCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		public ReferenceDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_referenceDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterReferenceDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitReferenceDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReferenceDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReferenceDefinitionContext referenceDefinition() {
		ReferenceDefinitionContext _localctx = new ReferenceDefinitionContext(Context, State);
		EnterRule(_localctx, 84, RULE_referenceDefinition);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 501;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 498;
				Match(WS);
				}
				}
				State = 503;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 504;
			Match(REFERENCE);
			State = 508;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,67,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 505;
					Match(WS);
					}
					} 
				}
				State = 510;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,67,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QnaSectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QnaDefinitionContext qnaDefinition() {
			return GetRuleContext<QnaDefinitionContext>(0);
		}
		public QnaSectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qnaSection; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterQnaSection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitQnaSection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQnaSection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QnaSectionContext qnaSection() {
		QnaSectionContext _localctx = new QnaSectionContext(Context, State);
		EnterRule(_localctx, 86, RULE_qnaSection);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 511;
			qnaDefinition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QnaDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QnaQuestionContext qnaQuestion() {
			return GetRuleContext<QnaQuestionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MoreQuestionsBodyContext moreQuestionsBody() {
			return GetRuleContext<MoreQuestionsBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QnaAnswerBodyContext qnaAnswerBody() {
			return GetRuleContext<QnaAnswerBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QnaSourceInfoContext qnaSourceInfo() {
			return GetRuleContext<QnaSourceInfoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QnaIdMarkContext qnaIdMark() {
			return GetRuleContext<QnaIdMarkContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PromptSectionContext promptSection() {
			return GetRuleContext<PromptSectionContext>(0);
		}
		public QnaDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qnaDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterQnaDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitQnaDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQnaDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QnaDefinitionContext qnaDefinition() {
		QnaDefinitionContext _localctx = new QnaDefinitionContext(Context, State);
		EnterRule(_localctx, 88, RULE_qnaDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 514;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,68,Context) ) {
			case 1:
				{
				State = 513;
				qnaSourceInfo();
				}
				break;
			}
			State = 517;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,69,Context) ) {
			case 1:
				{
				State = 516;
				qnaIdMark();
				}
				break;
			}
			State = 519;
			qnaQuestion();
			State = 520;
			moreQuestionsBody();
			State = 521;
			qnaAnswerBody();
			State = 523;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,70,Context) ) {
			case 1:
				{
				State = 522;
				promptSection();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QnaSourceInfoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QNA_SOURCE_INFO() { return GetToken(LUFileParser.QNA_SOURCE_INFO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		public QnaSourceInfoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qnaSourceInfo; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterQnaSourceInfo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitQnaSourceInfo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQnaSourceInfo(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QnaSourceInfoContext qnaSourceInfo() {
		QnaSourceInfoContext _localctx = new QnaSourceInfoContext(Context, State);
		EnterRule(_localctx, 90, RULE_qnaSourceInfo);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 528;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 525;
				Match(WS);
				}
				}
				State = 530;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 531;
			Match(QNA_SOURCE_INFO);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QnaIdMarkContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QNA_ID_MARK() { return GetToken(LUFileParser.QNA_ID_MARK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		public QnaIdMarkContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qnaIdMark; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterQnaIdMark(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitQnaIdMark(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQnaIdMark(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QnaIdMarkContext qnaIdMark() {
		QnaIdMarkContext _localctx = new QnaIdMarkContext(Context, State);
		EnterRule(_localctx, 92, RULE_qnaIdMark);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 536;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 533;
				Match(WS);
				}
				}
				State = 538;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 539;
			Match(QNA_ID_MARK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QnaQuestionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QNA() { return GetToken(LUFileParser.QNA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QuestionTextContext questionText() {
			return GetRuleContext<QuestionTextContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		public QnaQuestionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qnaQuestion; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterQnaQuestion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitQnaQuestion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQnaQuestion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QnaQuestionContext qnaQuestion() {
		QnaQuestionContext _localctx = new QnaQuestionContext(Context, State);
		EnterRule(_localctx, 94, RULE_qnaQuestion);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 544;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 541;
				Match(WS);
				}
				}
				State = 546;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 547;
			Match(QNA);
			State = 548;
			questionText();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QuestionTextContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] QNA_TEXT() { return GetTokens(LUFileParser.QNA_TEXT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QNA_TEXT(int i) {
			return GetToken(LUFileParser.QNA_TEXT, i);
		}
		public QuestionTextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_questionText; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterQuestionText(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitQuestionText(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuestionText(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QuestionTextContext questionText() {
		QuestionTextContext _localctx = new QuestionTextContext(Context, State);
		EnterRule(_localctx, 96, RULE_questionText);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 553;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==QNA_TEXT) {
				{
				{
				State = 550;
				Match(QNA_TEXT);
				}
				}
				State = 555;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MoreQuestionsBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ErrorQuestionStringContext[] errorQuestionString() {
			return GetRuleContexts<ErrorQuestionStringContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ErrorQuestionStringContext errorQuestionString(int i) {
			return GetRuleContext<ErrorQuestionStringContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MoreQuestionContext[] moreQuestion() {
			return GetRuleContexts<MoreQuestionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MoreQuestionContext moreQuestion(int i) {
			return GetRuleContext<MoreQuestionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext[] newline() {
			return GetRuleContexts<NewlineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline(int i) {
			return GetRuleContext<NewlineContext>(i);
		}
		public MoreQuestionsBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moreQuestionsBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterMoreQuestionsBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitMoreQuestionsBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMoreQuestionsBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MoreQuestionsBodyContext moreQuestionsBody() {
		MoreQuestionsBodyContext _localctx = new MoreQuestionsBodyContext(Context, State);
		EnterRule(_localctx, 98, RULE_moreQuestionsBody);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 559;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,75,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 556;
					Match(WS);
					}
					} 
				}
				State = 561;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,75,Context);
			}
			State = 568;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,77,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 566;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case DASH:
						{
						{
						State = 562;
						moreQuestion();
						State = 563;
						newline();
						}
						}
						break;
					case WS:
					case INVALID_TOKEN_DEFAULT_MODE:
						{
						State = 565;
						errorQuestionString();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 570;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,77,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MoreQuestionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DASH() { return GetToken(LUFileParser.DASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TEXT() { return GetTokens(LUFileParser.TEXT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT(int i) {
			return GetToken(LUFileParser.TEXT, i);
		}
		public MoreQuestionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moreQuestion; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterMoreQuestion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitMoreQuestion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMoreQuestion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MoreQuestionContext moreQuestion() {
		MoreQuestionContext _localctx = new MoreQuestionContext(Context, State);
		EnterRule(_localctx, 100, RULE_moreQuestion);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 571;
			Match(DASH);
			State = 575;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,78,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 572;
					_la = TokenStream.LA(1);
					if ( !(_la==WS || _la==TEXT) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					} 
				}
				State = 577;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,78,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ErrorQuestionStringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INVALID_TOKEN_DEFAULT_MODE() { return GetTokens(LUFileParser.INVALID_TOKEN_DEFAULT_MODE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INVALID_TOKEN_DEFAULT_MODE(int i) {
			return GetToken(LUFileParser.INVALID_TOKEN_DEFAULT_MODE, i);
		}
		public ErrorQuestionStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_errorQuestionString; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterErrorQuestionString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitErrorQuestionString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitErrorQuestionString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ErrorQuestionStringContext errorQuestionString() {
		ErrorQuestionStringContext _localctx = new ErrorQuestionStringContext(Context, State);
		EnterRule(_localctx, 102, RULE_errorQuestionString);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 579;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 578;
					_la = TokenStream.LA(1);
					if ( !(_la==WS || _la==INVALID_TOKEN_DEFAULT_MODE) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 581;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,79,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QnaAnswerBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MultiLineAnswerContext multiLineAnswer() {
			return GetRuleContext<MultiLineAnswerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FilterSectionContext filterSection() {
			return GetRuleContext<FilterSectionContext>(0);
		}
		public QnaAnswerBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qnaAnswerBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterQnaAnswerBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitQnaAnswerBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQnaAnswerBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QnaAnswerBodyContext qnaAnswerBody() {
		QnaAnswerBodyContext _localctx = new QnaAnswerBodyContext(Context, State);
		EnterRule(_localctx, 104, RULE_qnaAnswerBody);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 591;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,82,Context) ) {
			case 1:
				{
				{
				State = 584;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,80,Context) ) {
				case 1:
					{
					State = 583;
					filterSection();
					}
					break;
				}
				State = 586;
				multiLineAnswer();
				}
				}
				break;
			case 2:
				{
				{
				State = 587;
				multiLineAnswer();
				State = 589;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,81,Context) ) {
				case 1:
					{
					State = 588;
					filterSection();
					}
					break;
				}
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilterSectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILTER_MARK() { return GetToken(LUFileParser.FILTER_MARK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FilterLineContext[] filterLine() {
			return GetRuleContexts<FilterLineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FilterLineContext filterLine(int i) {
			return GetRuleContext<FilterLineContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ErrorFilterLineContext[] errorFilterLine() {
			return GetRuleContexts<ErrorFilterLineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ErrorFilterLineContext errorFilterLine(int i) {
			return GetRuleContext<ErrorFilterLineContext>(i);
		}
		public FilterSectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filterSection; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterFilterSection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitFilterSection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilterSection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FilterSectionContext filterSection() {
		FilterSectionContext _localctx = new FilterSectionContext(Context, State);
		EnterRule(_localctx, 106, RULE_filterSection);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 596;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 593;
				Match(WS);
				}
				}
				State = 598;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 599;
			Match(FILTER_MARK);
			State = 602;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 602;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,84,Context) ) {
					case 1:
						{
						State = 600;
						filterLine();
						}
						break;
					case 2:
						{
						State = 601;
						errorFilterLine();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 604;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,85,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PromptSectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROMPT_MARK() { return GetToken(LUFileParser.PROMPT_MARK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FilterLineContext[] filterLine() {
			return GetRuleContexts<FilterLineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FilterLineContext filterLine(int i) {
			return GetRuleContext<FilterLineContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ErrorFilterLineContext[] errorFilterLine() {
			return GetRuleContexts<ErrorFilterLineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ErrorFilterLineContext errorFilterLine(int i) {
			return GetRuleContext<ErrorFilterLineContext>(i);
		}
		public PromptSectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_promptSection; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterPromptSection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitPromptSection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPromptSection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PromptSectionContext promptSection() {
		PromptSectionContext _localctx = new PromptSectionContext(Context, State);
		EnterRule(_localctx, 108, RULE_promptSection);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 609;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 606;
				Match(WS);
				}
				}
				State = 611;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 612;
			Match(PROMPT_MARK);
			State = 615;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 615;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,87,Context) ) {
					case 1:
						{
						State = 613;
						filterLine();
						}
						break;
					case 2:
						{
						State = 614;
						errorFilterLine();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 617;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,88,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilterLineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DASH() { return GetToken(LUFileParser.DASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline() {
			return GetRuleContext<NewlineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TEXT() { return GetTokens(LUFileParser.TEXT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT(int i) {
			return GetToken(LUFileParser.TEXT, i);
		}
		public FilterLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filterLine; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterFilterLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitFilterLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilterLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FilterLineContext filterLine() {
		FilterLineContext _localctx = new FilterLineContext(Context, State);
		EnterRule(_localctx, 110, RULE_filterLine);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 622;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 619;
				Match(WS);
				}
				}
				State = 624;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 625;
			Match(DASH);
			State = 629;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,90,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 626;
					_la = TokenStream.LA(1);
					if ( !(_la==WS || _la==TEXT) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					} 
				}
				State = 631;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,90,Context);
			}
			State = 632;
			newline();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ErrorFilterLineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INVALID_TOKEN_DEFAULT_MODE() { return GetTokens(LUFileParser.INVALID_TOKEN_DEFAULT_MODE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INVALID_TOKEN_DEFAULT_MODE(int i) {
			return GetToken(LUFileParser.INVALID_TOKEN_DEFAULT_MODE, i);
		}
		public ErrorFilterLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_errorFilterLine; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterErrorFilterLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitErrorFilterLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitErrorFilterLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ErrorFilterLineContext errorFilterLine() {
		ErrorFilterLineContext _localctx = new ErrorFilterLineContext(Context, State);
		EnterRule(_localctx, 112, RULE_errorFilterLine);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 635;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 634;
					_la = TokenStream.LA(1);
					if ( !(_la==WS || _la==INVALID_TOKEN_DEFAULT_MODE) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 637;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,91,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiLineAnswerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTI_LINE_TEXT() { return GetToken(LUFileParser.MULTI_LINE_TEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		public MultiLineAnswerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiLineAnswer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterMultiLineAnswer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitMultiLineAnswer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiLineAnswer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiLineAnswerContext multiLineAnswer() {
		MultiLineAnswerContext _localctx = new MultiLineAnswerContext(Context, State);
		EnterRule(_localctx, 114, RULE_multiLineAnswer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 642;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 639;
				Match(WS);
				}
				}
				State = 644;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 645;
			Match(MULTI_LINE_TEXT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModelInfoSectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ModelInfoDefinitionContext modelInfoDefinition() {
			return GetRuleContext<ModelInfoDefinitionContext>(0);
		}
		public ModelInfoSectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modelInfoSection; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterModelInfoSection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitModelInfoSection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModelInfoSection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModelInfoSectionContext modelInfoSection() {
		ModelInfoSectionContext _localctx = new ModelInfoSectionContext(Context, State);
		EnterRule(_localctx, 116, RULE_modelInfoSection);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 647;
			modelInfoDefinition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModelInfoDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODEL_INFO() { return GetToken(LUFileParser.MODEL_INFO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		public ModelInfoDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modelInfoDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterModelInfoDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitModelInfoDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModelInfoDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModelInfoDefinitionContext modelInfoDefinition() {
		ModelInfoDefinitionContext _localctx = new ModelInfoDefinitionContext(Context, State);
		EnterRule(_localctx, 118, RULE_modelInfoDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 652;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 649;
				Match(WS);
				}
				}
				State = 654;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 655;
			Match(MODEL_INFO);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,40,658,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,1,0,4,0,122,8,0,11,0,12,0,123,1,0,3,0,127,
		8,0,3,0,129,8,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,142,8,
		1,1,2,5,2,145,8,2,10,2,12,2,148,9,2,1,2,1,2,1,3,1,3,3,3,154,8,3,1,4,4,
		4,157,8,4,11,4,12,4,158,1,5,1,5,1,5,1,6,5,6,165,8,6,10,6,12,6,168,9,6,
		1,6,1,6,5,6,172,8,6,10,6,12,6,175,9,6,1,6,1,6,1,7,1,7,1,7,5,7,182,8,7,
		10,7,12,7,185,9,7,1,8,1,8,1,8,5,8,190,8,8,10,8,12,8,193,9,8,1,9,4,9,196,
		8,9,11,9,12,9,197,1,10,5,10,201,8,10,10,10,12,10,204,9,10,1,10,1,10,1,
		10,1,11,1,11,1,12,1,12,3,12,213,8,12,1,13,5,13,216,8,13,10,13,12,13,219,
		9,13,1,13,1,13,3,13,223,8,13,1,13,5,13,226,8,13,10,13,12,13,229,9,13,1,
		13,1,13,1,14,1,14,1,14,5,14,236,8,14,10,14,12,14,239,9,14,1,15,5,15,242,
		8,15,10,15,12,15,245,9,15,1,15,1,15,1,16,5,16,250,8,16,10,16,12,16,253,
		9,16,1,16,1,16,1,16,1,16,4,16,259,8,16,11,16,12,16,260,1,17,5,17,264,8,
		17,10,17,12,17,267,9,17,1,17,1,17,5,17,271,8,17,10,17,12,17,274,9,17,1,
		18,1,18,1,19,1,19,3,19,280,8,19,1,20,1,20,1,20,1,20,4,20,286,8,20,11,20,
		12,20,287,1,21,5,21,291,8,21,10,21,12,21,294,9,21,1,21,1,21,5,21,298,8,
		21,10,21,12,21,301,9,21,1,21,3,21,304,8,21,1,21,5,21,307,8,21,10,21,12,
		21,310,9,21,1,21,1,21,3,21,314,8,21,1,21,5,21,317,8,21,10,21,12,21,320,
		9,21,1,21,3,21,323,8,21,1,21,5,21,326,8,21,10,21,12,21,329,9,21,1,21,3,
		21,332,8,21,1,21,5,21,335,8,21,10,21,12,21,338,9,21,1,21,3,21,341,8,21,
		1,21,5,21,344,8,21,10,21,12,21,347,9,21,1,21,1,21,3,21,351,8,21,1,21,1,
		21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,3,25,362,8,25,1,25,5,25,365,8,25,
		10,25,12,25,368,9,25,1,25,1,25,1,26,1,26,5,26,374,8,26,10,26,12,26,377,
		9,26,1,26,1,26,1,27,1,27,5,27,383,8,27,10,27,12,27,386,9,27,1,27,1,27,
		5,27,390,8,27,10,27,12,27,393,9,27,1,27,5,27,396,8,27,10,27,12,27,399,
		9,27,1,28,1,28,5,28,403,8,28,10,28,12,28,406,9,28,1,28,3,28,409,8,28,1,
		29,1,29,5,29,413,8,29,10,29,12,29,416,9,29,1,29,3,29,419,8,29,1,30,1,30,
		1,31,1,31,3,31,425,8,31,1,32,5,32,428,8,32,10,32,12,32,431,9,32,1,32,1,
		32,3,32,435,8,32,1,32,3,32,438,8,32,1,32,3,32,441,8,32,1,33,4,33,444,8,
		33,11,33,12,33,445,1,34,1,34,1,34,1,34,1,34,4,34,453,8,34,11,34,12,34,
		454,1,35,1,35,1,36,1,36,1,37,1,37,1,37,1,37,4,37,465,8,37,11,37,12,37,
		466,1,38,5,38,470,8,38,10,38,12,38,473,9,38,1,38,1,38,5,38,477,8,38,10,
		38,12,38,480,9,38,1,39,1,39,1,40,5,40,485,8,40,10,40,12,40,488,9,40,1,
		40,1,40,5,40,492,8,40,10,40,12,40,495,9,40,1,41,1,41,1,42,5,42,500,8,42,
		10,42,12,42,503,9,42,1,42,1,42,5,42,507,8,42,10,42,12,42,510,9,42,1,43,
		1,43,1,44,3,44,515,8,44,1,44,3,44,518,8,44,1,44,1,44,1,44,1,44,3,44,524,
		8,44,1,45,5,45,527,8,45,10,45,12,45,530,9,45,1,45,1,45,1,46,5,46,535,8,
		46,10,46,12,46,538,9,46,1,46,1,46,1,47,5,47,543,8,47,10,47,12,47,546,9,
		47,1,47,1,47,1,47,1,48,5,48,552,8,48,10,48,12,48,555,9,48,1,49,5,49,558,
		8,49,10,49,12,49,561,9,49,1,49,1,49,1,49,1,49,5,49,567,8,49,10,49,12,49,
		570,9,49,1,50,1,50,5,50,574,8,50,10,50,12,50,577,9,50,1,51,4,51,580,8,
		51,11,51,12,51,581,1,52,3,52,585,8,52,1,52,1,52,1,52,3,52,590,8,52,3,52,
		592,8,52,1,53,5,53,595,8,53,10,53,12,53,598,9,53,1,53,1,53,1,53,4,53,603,
		8,53,11,53,12,53,604,1,54,5,54,608,8,54,10,54,12,54,611,9,54,1,54,1,54,
		1,54,4,54,616,8,54,11,54,12,54,617,1,55,5,55,621,8,55,10,55,12,55,624,
		9,55,1,55,1,55,5,55,628,8,55,10,55,12,55,631,9,55,1,55,1,55,1,56,4,56,
		636,8,56,11,56,12,56,637,1,57,5,57,641,8,57,10,57,12,57,644,9,57,1,57,
		1,57,1,58,1,58,1,59,5,59,651,8,59,10,59,12,59,654,9,59,1,59,1,59,1,59,
		1,123,0,60,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,
		44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,
		92,94,96,98,100,102,104,106,108,110,112,114,116,118,0,6,1,1,2,2,2,0,1,
		1,17,17,2,0,1,1,31,33,1,0,26,27,2,0,1,1,37,37,2,0,1,1,33,33,703,0,128,
		1,0,0,0,2,141,1,0,0,0,4,146,1,0,0,0,6,151,1,0,0,0,8,156,1,0,0,0,10,160,
		1,0,0,0,12,166,1,0,0,0,14,178,1,0,0,0,16,186,1,0,0,0,18,195,1,0,0,0,20,
		202,1,0,0,0,22,208,1,0,0,0,24,210,1,0,0,0,26,217,1,0,0,0,28,232,1,0,0,
		0,30,243,1,0,0,0,32,251,1,0,0,0,34,265,1,0,0,0,36,275,1,0,0,0,38,277,1,
		0,0,0,40,285,1,0,0,0,42,292,1,0,0,0,44,354,1,0,0,0,46,356,1,0,0,0,48,358,
		1,0,0,0,50,361,1,0,0,0,52,371,1,0,0,0,54,380,1,0,0,0,56,400,1,0,0,0,58,
		410,1,0,0,0,60,420,1,0,0,0,62,422,1,0,0,0,64,429,1,0,0,0,66,443,1,0,0,
		0,68,452,1,0,0,0,70,456,1,0,0,0,72,458,1,0,0,0,74,464,1,0,0,0,76,471,1,
		0,0,0,78,481,1,0,0,0,80,486,1,0,0,0,82,496,1,0,0,0,84,501,1,0,0,0,86,511,
		1,0,0,0,88,514,1,0,0,0,90,528,1,0,0,0,92,536,1,0,0,0,94,544,1,0,0,0,96,
		553,1,0,0,0,98,559,1,0,0,0,100,571,1,0,0,0,102,579,1,0,0,0,104,591,1,0,
		0,0,106,596,1,0,0,0,108,609,1,0,0,0,110,622,1,0,0,0,112,635,1,0,0,0,114,
		642,1,0,0,0,116,647,1,0,0,0,118,652,1,0,0,0,120,122,3,2,1,0,121,120,1,
		0,0,0,122,123,1,0,0,0,123,124,1,0,0,0,123,121,1,0,0,0,124,129,1,0,0,0,
		125,127,3,6,3,0,126,125,1,0,0,0,126,127,1,0,0,0,127,129,1,0,0,0,128,121,
		1,0,0,0,128,126,1,0,0,0,129,130,1,0,0,0,130,131,5,0,0,1,131,1,1,0,0,0,
		132,142,5,2,0,0,133,142,3,10,5,0,134,142,3,22,11,0,135,142,3,60,30,0,136,
		142,3,36,18,0,137,142,3,78,39,0,138,142,3,82,41,0,139,142,3,86,43,0,140,
		142,3,116,58,0,141,132,1,0,0,0,141,133,1,0,0,0,141,134,1,0,0,0,141,135,
		1,0,0,0,141,136,1,0,0,0,141,137,1,0,0,0,141,138,1,0,0,0,141,139,1,0,0,
		0,141,140,1,0,0,0,142,3,1,0,0,0,143,145,5,1,0,0,144,143,1,0,0,0,145,148,
		1,0,0,0,146,144,1,0,0,0,146,147,1,0,0,0,147,149,1,0,0,0,148,146,1,0,0,
		0,149,150,7,0,0,0,150,5,1,0,0,0,151,153,5,5,0,0,152,154,5,2,0,0,153,152,
		1,0,0,0,153,154,1,0,0,0,154,7,1,0,0,0,155,157,7,1,0,0,156,155,1,0,0,0,
		157,158,1,0,0,0,158,156,1,0,0,0,158,159,1,0,0,0,159,9,1,0,0,0,160,161,
		3,12,6,0,161,162,3,18,9,0,162,11,1,0,0,0,163,165,5,1,0,0,164,163,1,0,0,
		0,165,168,1,0,0,0,166,164,1,0,0,0,166,167,1,0,0,0,167,169,1,0,0,0,168,
		166,1,0,0,0,169,173,5,7,0,0,170,172,5,1,0,0,171,170,1,0,0,0,172,175,1,
		0,0,0,173,171,1,0,0,0,173,174,1,0,0,0,174,176,1,0,0,0,175,173,1,0,0,0,
		176,177,3,14,7,0,177,13,1,0,0,0,178,183,3,16,8,0,179,182,5,1,0,0,180,182,
		3,16,8,0,181,179,1,0,0,0,181,180,1,0,0,0,182,185,1,0,0,0,183,181,1,0,0,
		0,183,184,1,0,0,0,184,15,1,0,0,0,185,183,1,0,0,0,186,191,5,29,0,0,187,
		188,5,30,0,0,188,190,5,29,0,0,189,187,1,0,0,0,190,193,1,0,0,0,191,189,
		1,0,0,0,191,192,1,0,0,0,192,17,1,0,0,0,193,191,1,0,0,0,194,196,3,20,10,
		0,195,194,1,0,0,0,196,197,1,0,0,0,197,195,1,0,0,0,197,198,1,0,0,0,198,
		19,1,0,0,0,199,201,5,1,0,0,200,199,1,0,0,0,201,204,1,0,0,0,202,200,1,0,
		0,0,202,203,1,0,0,0,203,205,1,0,0,0,204,202,1,0,0,0,205,206,5,7,0,0,206,
		207,3,22,11,0,207,21,1,0,0,0,208,209,3,24,12,0,209,23,1,0,0,0,210,212,
		3,26,13,0,211,213,3,30,15,0,212,211,1,0,0,0,212,213,1,0,0,0,213,25,1,0,
		0,0,214,216,5,1,0,0,215,214,1,0,0,0,216,219,1,0,0,0,217,215,1,0,0,0,217,
		218,1,0,0,0,218,220,1,0,0,0,219,217,1,0,0,0,220,222,5,7,0,0,221,223,5,
		7,0,0,222,221,1,0,0,0,222,223,1,0,0,0,223,227,1,0,0,0,224,226,5,1,0,0,
		225,224,1,0,0,0,226,229,1,0,0,0,227,225,1,0,0,0,227,228,1,0,0,0,228,230,
		1,0,0,0,229,227,1,0,0,0,230,231,3,28,14,0,231,27,1,0,0,0,232,237,3,16,
		8,0,233,236,5,1,0,0,234,236,3,16,8,0,235,233,1,0,0,0,235,234,1,0,0,0,236,
		239,1,0,0,0,237,235,1,0,0,0,237,238,1,0,0,0,238,29,1,0,0,0,239,237,1,0,
		0,0,240,242,5,1,0,0,241,240,1,0,0,0,242,245,1,0,0,0,243,241,1,0,0,0,243,
		244,1,0,0,0,244,246,1,0,0,0,245,243,1,0,0,0,246,247,3,32,16,0,247,31,1,
		0,0,0,248,250,5,1,0,0,249,248,1,0,0,0,250,253,1,0,0,0,251,249,1,0,0,0,
		251,252,1,0,0,0,252,258,1,0,0,0,253,251,1,0,0,0,254,255,3,34,17,0,255,
		256,3,4,2,0,256,259,1,0,0,0,257,259,3,8,4,0,258,254,1,0,0,0,258,257,1,
		0,0,0,259,260,1,0,0,0,260,258,1,0,0,0,260,261,1,0,0,0,261,33,1,0,0,0,262,
		264,5,1,0,0,263,262,1,0,0,0,264,267,1,0,0,0,265,263,1,0,0,0,265,266,1,
		0,0,0,266,268,1,0,0,0,267,265,1,0,0,0,268,272,5,8,0,0,269,271,7,2,0,0,
		270,269,1,0,0,0,271,274,1,0,0,0,272,270,1,0,0,0,272,273,1,0,0,0,273,35,
		1,0,0,0,274,272,1,0,0,0,275,276,3,38,19,0,276,37,1,0,0,0,277,279,3,42,
		21,0,278,280,3,40,20,0,279,278,1,0,0,0,279,280,1,0,0,0,280,39,1,0,0,0,
		281,282,3,76,38,0,282,283,3,4,2,0,283,286,1,0,0,0,284,286,3,8,4,0,285,
		281,1,0,0,0,285,284,1,0,0,0,286,287,1,0,0,0,287,285,1,0,0,0,287,288,1,
		0,0,0,288,41,1,0,0,0,289,291,5,1,0,0,290,289,1,0,0,0,291,294,1,0,0,0,292,
		290,1,0,0,0,292,293,1,0,0,0,293,295,1,0,0,0,294,292,1,0,0,0,295,299,5,
		10,0,0,296,298,5,1,0,0,297,296,1,0,0,0,298,301,1,0,0,0,299,297,1,0,0,0,
		299,300,1,0,0,0,300,303,1,0,0,0,301,299,1,0,0,0,302,304,3,48,24,0,303,
		302,1,0,0,0,303,304,1,0,0,0,304,308,1,0,0,0,305,307,5,1,0,0,306,305,1,
		0,0,0,307,310,1,0,0,0,308,306,1,0,0,0,308,309,1,0,0,0,309,313,1,0,0,0,
		310,308,1,0,0,0,311,314,3,56,28,0,312,314,3,58,29,0,313,311,1,0,0,0,313,
		312,1,0,0,0,313,314,1,0,0,0,314,318,1,0,0,0,315,317,5,1,0,0,316,315,1,
		0,0,0,317,320,1,0,0,0,318,316,1,0,0,0,318,319,1,0,0,0,319,322,1,0,0,0,
		320,318,1,0,0,0,321,323,3,50,25,0,322,321,1,0,0,0,322,323,1,0,0,0,323,
		327,1,0,0,0,324,326,5,1,0,0,325,324,1,0,0,0,326,329,1,0,0,0,327,325,1,
		0,0,0,327,328,1,0,0,0,328,331,1,0,0,0,329,327,1,0,0,0,330,332,3,52,26,
		0,331,330,1,0,0,0,331,332,1,0,0,0,332,336,1,0,0,0,333,335,5,1,0,0,334,
		333,1,0,0,0,335,338,1,0,0,0,336,334,1,0,0,0,336,337,1,0,0,0,337,340,1,
		0,0,0,338,336,1,0,0,0,339,341,5,18,0,0,340,339,1,0,0,0,340,341,1,0,0,0,
		341,345,1,0,0,0,342,344,5,1,0,0,343,342,1,0,0,0,344,347,1,0,0,0,345,343,
		1,0,0,0,345,346,1,0,0,0,346,350,1,0,0,0,347,345,1,0,0,0,348,351,3,44,22,
		0,349,351,3,46,23,0,350,348,1,0,0,0,350,349,1,0,0,0,350,351,1,0,0,0,351,
		352,1,0,0,0,352,353,3,4,2,0,353,43,1,0,0,0,354,355,5,24,0,0,355,45,1,0,
		0,0,356,357,5,25,0,0,357,47,1,0,0,0,358,359,5,22,0,0,359,49,1,0,0,0,360,
		362,5,20,0,0,361,360,1,0,0,0,361,362,1,0,0,0,362,366,1,0,0,0,363,365,5,
		1,0,0,364,363,1,0,0,0,365,368,1,0,0,0,366,364,1,0,0,0,366,367,1,0,0,0,
		367,369,1,0,0,0,368,366,1,0,0,0,369,370,3,54,27,0,370,51,1,0,0,0,371,375,
		5,21,0,0,372,374,5,1,0,0,373,372,1,0,0,0,374,377,1,0,0,0,375,373,1,0,0,
		0,375,376,1,0,0,0,376,378,1,0,0,0,377,375,1,0,0,0,378,379,3,54,27,0,379,
		53,1,0,0,0,380,397,7,3,0,0,381,383,5,1,0,0,382,381,1,0,0,0,383,386,1,0,
		0,0,384,382,1,0,0,0,384,385,1,0,0,0,385,387,1,0,0,0,386,384,1,0,0,0,387,
		391,5,19,0,0,388,390,5,1,0,0,389,388,1,0,0,0,390,393,1,0,0,0,391,389,1,
		0,0,0,391,392,1,0,0,0,392,394,1,0,0,0,393,391,1,0,0,0,394,396,7,3,0,0,
		395,384,1,0,0,0,396,399,1,0,0,0,397,395,1,0,0,0,397,398,1,0,0,0,398,55,
		1,0,0,0,399,397,1,0,0,0,400,408,5,26,0,0,401,403,5,1,0,0,402,401,1,0,0,
		0,403,406,1,0,0,0,404,402,1,0,0,0,404,405,1,0,0,0,405,407,1,0,0,0,406,
		404,1,0,0,0,407,409,5,23,0,0,408,404,1,0,0,0,408,409,1,0,0,0,409,57,1,
		0,0,0,410,418,5,27,0,0,411,413,5,1,0,0,412,411,1,0,0,0,413,416,1,0,0,0,
		414,412,1,0,0,0,414,415,1,0,0,0,415,417,1,0,0,0,416,414,1,0,0,0,417,419,
		5,23,0,0,418,414,1,0,0,0,418,419,1,0,0,0,419,59,1,0,0,0,420,421,3,62,31,
		0,421,61,1,0,0,0,422,424,3,64,32,0,423,425,3,74,37,0,424,423,1,0,0,0,424,
		425,1,0,0,0,425,63,1,0,0,0,426,428,5,1,0,0,427,426,1,0,0,0,428,431,1,0,
		0,0,429,427,1,0,0,0,429,430,1,0,0,0,430,432,1,0,0,0,431,429,1,0,0,0,432,
		434,5,9,0,0,433,435,3,66,33,0,434,433,1,0,0,0,434,435,1,0,0,0,435,437,
		1,0,0,0,436,438,5,38,0,0,437,436,1,0,0,0,437,438,1,0,0,0,438,440,1,0,0,
		0,439,441,3,68,34,0,440,439,1,0,0,0,440,441,1,0,0,0,441,65,1,0,0,0,442,
		444,7,4,0,0,443,442,1,0,0,0,444,445,1,0,0,0,445,443,1,0,0,0,445,446,1,
		0,0,0,446,67,1,0,0,0,447,453,3,70,35,0,448,453,3,72,36,0,449,453,5,37,
		0,0,450,453,5,38,0,0,451,453,5,1,0,0,452,447,1,0,0,0,452,448,1,0,0,0,452,
		449,1,0,0,0,452,450,1,0,0,0,452,451,1,0,0,0,453,454,1,0,0,0,454,452,1,
		0,0,0,454,455,1,0,0,0,455,69,1,0,0,0,456,457,5,35,0,0,457,71,1,0,0,0,458,
		459,5,36,0,0,459,73,1,0,0,0,460,461,3,76,38,0,461,462,3,4,2,0,462,465,
		1,0,0,0,463,465,3,8,4,0,464,460,1,0,0,0,464,463,1,0,0,0,465,466,1,0,0,
		0,466,464,1,0,0,0,466,467,1,0,0,0,467,75,1,0,0,0,468,470,5,1,0,0,469,468,
		1,0,0,0,470,473,1,0,0,0,471,469,1,0,0,0,471,472,1,0,0,0,472,474,1,0,0,
		0,473,471,1,0,0,0,474,478,5,8,0,0,475,477,7,2,0,0,476,475,1,0,0,0,477,
		480,1,0,0,0,478,476,1,0,0,0,478,479,1,0,0,0,479,77,1,0,0,0,480,478,1,0,
		0,0,481,482,3,80,40,0,482,79,1,0,0,0,483,485,5,1,0,0,484,483,1,0,0,0,485,
		488,1,0,0,0,486,484,1,0,0,0,486,487,1,0,0,0,487,489,1,0,0,0,488,486,1,
		0,0,0,489,493,5,11,0,0,490,492,5,1,0,0,491,490,1,0,0,0,492,495,1,0,0,0,
		493,491,1,0,0,0,493,494,1,0,0,0,494,81,1,0,0,0,495,493,1,0,0,0,496,497,
		3,84,42,0,497,83,1,0,0,0,498,500,5,1,0,0,499,498,1,0,0,0,500,503,1,0,0,
		0,501,499,1,0,0,0,501,502,1,0,0,0,502,504,1,0,0,0,503,501,1,0,0,0,504,
		508,5,12,0,0,505,507,5,1,0,0,506,505,1,0,0,0,507,510,1,0,0,0,508,506,1,
		0,0,0,508,509,1,0,0,0,509,85,1,0,0,0,510,508,1,0,0,0,511,512,3,88,44,0,
		512,87,1,0,0,0,513,515,3,90,45,0,514,513,1,0,0,0,514,515,1,0,0,0,515,517,
		1,0,0,0,516,518,3,92,46,0,517,516,1,0,0,0,517,518,1,0,0,0,518,519,1,0,
		0,0,519,520,3,94,47,0,520,521,3,98,49,0,521,523,3,104,52,0,522,524,3,108,
		54,0,523,522,1,0,0,0,523,524,1,0,0,0,524,89,1,0,0,0,525,527,5,1,0,0,526,
		525,1,0,0,0,527,530,1,0,0,0,528,526,1,0,0,0,528,529,1,0,0,0,529,531,1,
		0,0,0,530,528,1,0,0,0,531,532,5,3,0,0,532,91,1,0,0,0,533,535,5,1,0,0,534,
		533,1,0,0,0,535,538,1,0,0,0,536,534,1,0,0,0,536,537,1,0,0,0,537,539,1,
		0,0,0,538,536,1,0,0,0,539,540,5,14,0,0,540,93,1,0,0,0,541,543,5,1,0,0,
		542,541,1,0,0,0,543,546,1,0,0,0,544,542,1,0,0,0,544,545,1,0,0,0,545,547,
		1,0,0,0,546,544,1,0,0,0,547,548,5,6,0,0,548,549,3,96,48,0,549,95,1,0,0,
		0,550,552,5,40,0,0,551,550,1,0,0,0,552,555,1,0,0,0,553,551,1,0,0,0,553,
		554,1,0,0,0,554,97,1,0,0,0,555,553,1,0,0,0,556,558,5,1,0,0,557,556,1,0,
		0,0,558,561,1,0,0,0,559,557,1,0,0,0,559,560,1,0,0,0,560,568,1,0,0,0,561,
		559,1,0,0,0,562,563,3,100,50,0,563,564,3,4,2,0,564,567,1,0,0,0,565,567,
		3,102,51,0,566,562,1,0,0,0,566,565,1,0,0,0,567,570,1,0,0,0,568,566,1,0,
		0,0,568,569,1,0,0,0,569,99,1,0,0,0,570,568,1,0,0,0,571,575,5,8,0,0,572,
		574,7,5,0,0,573,572,1,0,0,0,574,577,1,0,0,0,575,573,1,0,0,0,575,576,1,
		0,0,0,576,101,1,0,0,0,577,575,1,0,0,0,578,580,7,1,0,0,579,578,1,0,0,0,
		580,581,1,0,0,0,581,579,1,0,0,0,581,582,1,0,0,0,582,103,1,0,0,0,583,585,
		3,106,53,0,584,583,1,0,0,0,584,585,1,0,0,0,585,586,1,0,0,0,586,592,3,114,
		57,0,587,589,3,114,57,0,588,590,3,106,53,0,589,588,1,0,0,0,589,590,1,0,
		0,0,590,592,1,0,0,0,591,584,1,0,0,0,591,587,1,0,0,0,592,105,1,0,0,0,593,
		595,5,1,0,0,594,593,1,0,0,0,595,598,1,0,0,0,596,594,1,0,0,0,596,597,1,
		0,0,0,597,599,1,0,0,0,598,596,1,0,0,0,599,602,5,13,0,0,600,603,3,110,55,
		0,601,603,3,112,56,0,602,600,1,0,0,0,602,601,1,0,0,0,603,604,1,0,0,0,604,
		602,1,0,0,0,604,605,1,0,0,0,605,107,1,0,0,0,606,608,5,1,0,0,607,606,1,
		0,0,0,608,611,1,0,0,0,609,607,1,0,0,0,609,610,1,0,0,0,610,612,1,0,0,0,
		611,609,1,0,0,0,612,615,5,16,0,0,613,616,3,110,55,0,614,616,3,112,56,0,
		615,613,1,0,0,0,615,614,1,0,0,0,616,617,1,0,0,0,617,615,1,0,0,0,617,618,
		1,0,0,0,618,109,1,0,0,0,619,621,5,1,0,0,620,619,1,0,0,0,621,624,1,0,0,
		0,622,620,1,0,0,0,622,623,1,0,0,0,623,625,1,0,0,0,624,622,1,0,0,0,625,
		629,5,8,0,0,626,628,7,5,0,0,627,626,1,0,0,0,628,631,1,0,0,0,629,627,1,
		0,0,0,629,630,1,0,0,0,630,632,1,0,0,0,631,629,1,0,0,0,632,633,3,4,2,0,
		633,111,1,0,0,0,634,636,7,1,0,0,635,634,1,0,0,0,636,637,1,0,0,0,637,635,
		1,0,0,0,637,638,1,0,0,0,638,113,1,0,0,0,639,641,5,1,0,0,640,639,1,0,0,
		0,641,644,1,0,0,0,642,640,1,0,0,0,642,643,1,0,0,0,643,645,1,0,0,0,644,
		642,1,0,0,0,645,646,5,15,0,0,646,115,1,0,0,0,647,648,3,118,59,0,648,117,
		1,0,0,0,649,651,5,1,0,0,650,649,1,0,0,0,651,654,1,0,0,0,652,650,1,0,0,
		0,652,653,1,0,0,0,653,655,1,0,0,0,654,652,1,0,0,0,655,656,5,4,0,0,656,
		119,1,0,0,0,94,123,126,128,141,146,153,158,166,173,181,183,191,197,202,
		212,217,222,227,235,237,243,251,258,260,265,272,279,285,287,292,299,303,
		308,313,318,322,327,331,336,340,345,350,361,366,375,384,391,397,404,408,
		414,418,424,429,434,437,440,445,452,454,464,466,471,478,486,493,501,508,
		514,517,523,528,536,544,553,559,566,568,575,581,584,589,591,596,602,604,
		609,615,617,622,629,637,642,652
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
