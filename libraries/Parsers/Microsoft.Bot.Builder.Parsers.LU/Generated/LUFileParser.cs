//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from LUFileParser.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class LUFileParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		WS=1, NEWLINE=2, QNA_SOURCE_INFO=3, MODEL_INFO=4, COMMENT=5, QNA=6, HASH=7, 
		DASH=8, DOLLAR=9, AT=10, IMPORT=11, REFERENCE=12, FILTER_MARK=13, QNA_ID_MARK=14, 
		MULTI_LINE_TEXT=15, PROMPT_MARK=16, INVALID_TOKEN_DEFAULT_MODE=17, EQUAL=18, 
		COMMA=19, HAS_ROLES_LABEL=20, HAS_FEATURES_LABEL=21, NEW_ENTITY_TYPE_IDENTIFIER=22, 
		PHRASE_LIST_LABEL=23, NEW_COMPOSITE_ENTITY=24, NEW_REGEX_ENTITY=25, NEW_ENTITY_IDENTIFIER=26, 
		NEW_ENTITY_IDENTIFIER_WITH_WS=27, NEWLINE_IN_NAME=28, IDENTIFIER=29, DOT=30, 
		ESCAPE_CHARACTER=31, EXPRESSION=32, TEXT=33, NEWLINE_IN_ENTITY=34, COMPOSITE_ENTITY=35, 
		REGEX_ENTITY=36, ENTITY_TEXT=37, COLON_MARK=38, NEWLINE_IN_QNA=39, QNA_TEXT=40;
	public const int
		RULE_file = 0, RULE_paragraph = 1, RULE_newline = 2, RULE_commentDefinition = 3, 
		RULE_errorString = 4, RULE_nestedIntentSection = 5, RULE_nestedIntentNameLine = 6, 
		RULE_nestedIntentName = 7, RULE_nameIdentifier = 8, RULE_nestedIntentBodyDefinition = 9, 
		RULE_subIntentDefinition = 10, RULE_simpleIntentSection = 11, RULE_intentDefinition = 12, 
		RULE_intentNameLine = 13, RULE_intentName = 14, RULE_intentBody = 15, 
		RULE_normalIntentBody = 16, RULE_normalIntentString = 17, RULE_newEntitySection = 18, 
		RULE_newEntityDefinition = 19, RULE_newEntityListbody = 20, RULE_newEntityLine = 21, 
		RULE_newCompositeDefinition = 22, RULE_newRegexDefinition = 23, RULE_newEntityType = 24, 
		RULE_newEntityRoles = 25, RULE_newEntityUsesFeatures = 26, RULE_newEntityRoleOrFeatures = 27, 
		RULE_newEntityName = 28, RULE_newEntityNameWithWS = 29, RULE_entitySection = 30, 
		RULE_entityDefinition = 31, RULE_entityLine = 32, RULE_entityName = 33, 
		RULE_entityType = 34, RULE_compositeEntityIdentifier = 35, RULE_regexEntityIdentifier = 36, 
		RULE_entityListBody = 37, RULE_normalItemString = 38, RULE_importSection = 39, 
		RULE_importDefinition = 40, RULE_referenceSection = 41, RULE_referenceDefinition = 42, 
		RULE_qnaSection = 43, RULE_qnaDefinition = 44, RULE_qnaSourceInfo = 45, 
		RULE_qnaIdMark = 46, RULE_qnaQuestion = 47, RULE_questionText = 48, RULE_moreQuestionsBody = 49, 
		RULE_moreQuestion = 50, RULE_errorQuestionString = 51, RULE_qnaAnswerBody = 52, 
		RULE_filterSection = 53, RULE_promptSection = 54, RULE_filterLine = 55, 
		RULE_errorFilterLine = 56, RULE_multiLineAnswer = 57, RULE_modelInfoSection = 58, 
		RULE_modelInfoDefinition = 59;
	public static readonly string[] ruleNames = {
		"file", "paragraph", "newline", "commentDefinition", "errorString", "nestedIntentSection", 
		"nestedIntentNameLine", "nestedIntentName", "nameIdentifier", "nestedIntentBodyDefinition", 
		"subIntentDefinition", "simpleIntentSection", "intentDefinition", "intentNameLine", 
		"intentName", "intentBody", "normalIntentBody", "normalIntentString", 
		"newEntitySection", "newEntityDefinition", "newEntityListbody", "newEntityLine", 
		"newCompositeDefinition", "newRegexDefinition", "newEntityType", "newEntityRoles", 
		"newEntityUsesFeatures", "newEntityRoleOrFeatures", "newEntityName", "newEntityNameWithWS", 
		"entitySection", "entityDefinition", "entityLine", "entityName", "entityType", 
		"compositeEntityIdentifier", "regexEntityIdentifier", "entityListBody", 
		"normalItemString", "importSection", "importDefinition", "referenceSection", 
		"referenceDefinition", "qnaSection", "qnaDefinition", "qnaSourceInfo", 
		"qnaIdMark", "qnaQuestion", "questionText", "moreQuestionsBody", "moreQuestion", 
		"errorQuestionString", "qnaAnswerBody", "filterSection", "promptSection", 
		"filterLine", "errorFilterLine", "multiLineAnswer", "modelInfoSection", 
		"modelInfoDefinition"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, null, "'$'", "'@'", null, 
		null, null, null, null, null, null, "'='", "','", null, null, null, null, 
		null, null, null, null, null, null, "'.'", null, null, null, null, null, 
		null, null, "':'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "WS", "NEWLINE", "QNA_SOURCE_INFO", "MODEL_INFO", "COMMENT", "QNA", 
		"HASH", "DASH", "DOLLAR", "AT", "IMPORT", "REFERENCE", "FILTER_MARK", 
		"QNA_ID_MARK", "MULTI_LINE_TEXT", "PROMPT_MARK", "INVALID_TOKEN_DEFAULT_MODE", 
		"EQUAL", "COMMA", "HAS_ROLES_LABEL", "HAS_FEATURES_LABEL", "NEW_ENTITY_TYPE_IDENTIFIER", 
		"PHRASE_LIST_LABEL", "NEW_COMPOSITE_ENTITY", "NEW_REGEX_ENTITY", "NEW_ENTITY_IDENTIFIER", 
		"NEW_ENTITY_IDENTIFIER_WITH_WS", "NEWLINE_IN_NAME", "IDENTIFIER", "DOT", 
		"ESCAPE_CHARACTER", "EXPRESSION", "TEXT", "NEWLINE_IN_ENTITY", "COMPOSITE_ENTITY", 
		"REGEX_ENTITY", "ENTITY_TEXT", "COLON_MARK", "NEWLINE_IN_QNA", "QNA_TEXT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "LUFileParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static LUFileParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public LUFileParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public LUFileParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class FileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(LUFileParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParagraphContext[] paragraph() {
			return GetRuleContexts<ParagraphContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParagraphContext paragraph(int i) {
			return GetRuleContext<ParagraphContext>(i);
		}
		public FileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterFile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitFile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileContext file() {
		FileContext _localctx = new FileContext(Context, State);
		EnterRule(_localctx, 0, RULE_file);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 121;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 120;
					paragraph();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 123;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 125;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParagraphContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(LUFileParser.NEWLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NestedIntentSectionContext nestedIntentSection() {
			return GetRuleContext<NestedIntentSectionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleIntentSectionContext simpleIntentSection() {
			return GetRuleContext<SimpleIntentSectionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EntitySectionContext entitySection() {
			return GetRuleContext<EntitySectionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewEntitySectionContext newEntitySection() {
			return GetRuleContext<NewEntitySectionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportSectionContext importSection() {
			return GetRuleContext<ImportSectionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceSectionContext referenceSection() {
			return GetRuleContext<ReferenceSectionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QnaSectionContext qnaSection() {
			return GetRuleContext<QnaSectionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModelInfoSectionContext modelInfoSection() {
			return GetRuleContext<ModelInfoSectionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommentDefinitionContext commentDefinition() {
			return GetRuleContext<CommentDefinitionContext>(0);
		}
		public ParagraphContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paragraph; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterParagraph(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitParagraph(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParagraph(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParagraphContext paragraph() {
		ParagraphContext _localctx = new ParagraphContext(Context, State);
		EnterRule(_localctx, 2, RULE_paragraph);
		try {
			State = 137;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 127;
				Match(NEWLINE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 128;
				nestedIntentSection();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 129;
				simpleIntentSection();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 130;
				entitySection();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 131;
				newEntitySection();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 132;
				importSection();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 133;
				referenceSection();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 134;
				qnaSection();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 135;
				modelInfoSection();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 136;
				commentDefinition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewlineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(LUFileParser.NEWLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(LUFileParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		public NewlineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newline; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterNewline(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitNewline(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewline(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewlineContext newline() {
		NewlineContext _localctx = new NewlineContext(Context, State);
		EnterRule(_localctx, 4, RULE_newline);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 142;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 139;
				Match(WS);
				}
				}
				State = 144;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 145;
			_la = TokenStream.LA(1);
			if ( !(_la==Eof || _la==NEWLINE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommentDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(LUFileParser.COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(LUFileParser.NEWLINE, 0); }
		public CommentDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commentDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterCommentDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitCommentDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommentDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommentDefinitionContext commentDefinition() {
		CommentDefinitionContext _localctx = new CommentDefinitionContext(Context, State);
		EnterRule(_localctx, 6, RULE_commentDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 147;
			Match(COMMENT);
			State = 149;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				{
				State = 148;
				Match(NEWLINE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ErrorStringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INVALID_TOKEN_DEFAULT_MODE() { return GetTokens(LUFileParser.INVALID_TOKEN_DEFAULT_MODE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INVALID_TOKEN_DEFAULT_MODE(int i) {
			return GetToken(LUFileParser.INVALID_TOKEN_DEFAULT_MODE, i);
		}
		public ErrorStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_errorString; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterErrorString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitErrorString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitErrorString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ErrorStringContext errorString() {
		ErrorStringContext _localctx = new ErrorStringContext(Context, State);
		EnterRule(_localctx, 8, RULE_errorString);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 152;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 151;
					_la = TokenStream.LA(1);
					if ( !(_la==WS || _la==INVALID_TOKEN_DEFAULT_MODE) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 154;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NestedIntentSectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NestedIntentNameLineContext nestedIntentNameLine() {
			return GetRuleContext<NestedIntentNameLineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NestedIntentBodyDefinitionContext nestedIntentBodyDefinition() {
			return GetRuleContext<NestedIntentBodyDefinitionContext>(0);
		}
		public NestedIntentSectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nestedIntentSection; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterNestedIntentSection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitNestedIntentSection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNestedIntentSection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NestedIntentSectionContext nestedIntentSection() {
		NestedIntentSectionContext _localctx = new NestedIntentSectionContext(Context, State);
		EnterRule(_localctx, 10, RULE_nestedIntentSection);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 156;
			nestedIntentNameLine();
			State = 157;
			nestedIntentBodyDefinition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NestedIntentNameLineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH() { return GetToken(LUFileParser.HASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NestedIntentNameContext nestedIntentName() {
			return GetRuleContext<NestedIntentNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		public NestedIntentNameLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nestedIntentNameLine; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterNestedIntentNameLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitNestedIntentNameLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNestedIntentNameLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NestedIntentNameLineContext nestedIntentNameLine() {
		NestedIntentNameLineContext _localctx = new NestedIntentNameLineContext(Context, State);
		EnterRule(_localctx, 12, RULE_nestedIntentNameLine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 162;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 159;
				Match(WS);
				}
				}
				State = 164;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 165;
			Match(HASH);
			State = 169;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 166;
				Match(WS);
				}
				}
				State = 171;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 172;
			nestedIntentName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NestedIntentNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameIdentifierContext[] nameIdentifier() {
			return GetRuleContexts<NameIdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameIdentifierContext nameIdentifier(int i) {
			return GetRuleContext<NameIdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		public NestedIntentNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nestedIntentName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterNestedIntentName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitNestedIntentName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNestedIntentName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NestedIntentNameContext nestedIntentName() {
		NestedIntentNameContext _localctx = new NestedIntentNameContext(Context, State);
		EnterRule(_localctx, 14, RULE_nestedIntentName);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 174;
			nameIdentifier();
			State = 179;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 177;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case WS:
						{
						State = 175;
						Match(WS);
						}
						break;
					case IDENTIFIER:
						{
						State = 176;
						nameIdentifier();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 181;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(LUFileParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(LUFileParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(LUFileParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(LUFileParser.DOT, i);
		}
		public NameIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterNameIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitNameIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameIdentifierContext nameIdentifier() {
		NameIdentifierContext _localctx = new NameIdentifierContext(Context, State);
		EnterRule(_localctx, 16, RULE_nameIdentifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 182;
			Match(IDENTIFIER);
			State = 187;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOT) {
				{
				{
				State = 183;
				Match(DOT);
				State = 184;
				Match(IDENTIFIER);
				}
				}
				State = 189;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NestedIntentBodyDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SubIntentDefinitionContext[] subIntentDefinition() {
			return GetRuleContexts<SubIntentDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubIntentDefinitionContext subIntentDefinition(int i) {
			return GetRuleContext<SubIntentDefinitionContext>(i);
		}
		public NestedIntentBodyDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nestedIntentBodyDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterNestedIntentBodyDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitNestedIntentBodyDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNestedIntentBodyDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NestedIntentBodyDefinitionContext nestedIntentBodyDefinition() {
		NestedIntentBodyDefinitionContext _localctx = new NestedIntentBodyDefinitionContext(Context, State);
		EnterRule(_localctx, 18, RULE_nestedIntentBodyDefinition);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 191;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 190;
					subIntentDefinition();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 193;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubIntentDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH() { return GetToken(LUFileParser.HASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleIntentSectionContext simpleIntentSection() {
			return GetRuleContext<SimpleIntentSectionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		public SubIntentDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subIntentDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterSubIntentDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitSubIntentDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubIntentDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubIntentDefinitionContext subIntentDefinition() {
		SubIntentDefinitionContext _localctx = new SubIntentDefinitionContext(Context, State);
		EnterRule(_localctx, 20, RULE_subIntentDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 198;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 195;
				Match(WS);
				}
				}
				State = 200;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 201;
			Match(HASH);
			State = 202;
			simpleIntentSection();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleIntentSectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntentDefinitionContext intentDefinition() {
			return GetRuleContext<IntentDefinitionContext>(0);
		}
		public SimpleIntentSectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleIntentSection; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterSimpleIntentSection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitSimpleIntentSection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleIntentSection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleIntentSectionContext simpleIntentSection() {
		SimpleIntentSectionContext _localctx = new SimpleIntentSectionContext(Context, State);
		EnterRule(_localctx, 22, RULE_simpleIntentSection);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 204;
			intentDefinition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntentDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntentNameLineContext intentNameLine() {
			return GetRuleContext<IntentNameLineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntentBodyContext intentBody() {
			return GetRuleContext<IntentBodyContext>(0);
		}
		public IntentDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intentDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterIntentDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitIntentDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntentDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntentDefinitionContext intentDefinition() {
		IntentDefinitionContext _localctx = new IntentDefinitionContext(Context, State);
		EnterRule(_localctx, 24, RULE_intentDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 206;
			intentNameLine();
			State = 208;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				{
				State = 207;
				intentBody();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntentNameLineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] HASH() { return GetTokens(LUFileParser.HASH); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH(int i) {
			return GetToken(LUFileParser.HASH, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntentNameContext intentName() {
			return GetRuleContext<IntentNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		public IntentNameLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intentNameLine; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterIntentNameLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitIntentNameLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntentNameLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntentNameLineContext intentNameLine() {
		IntentNameLineContext _localctx = new IntentNameLineContext(Context, State);
		EnterRule(_localctx, 26, RULE_intentNameLine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 213;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 210;
				Match(WS);
				}
				}
				State = 215;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 216;
			Match(HASH);
			State = 218;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==HASH) {
				{
				State = 217;
				Match(HASH);
				}
			}

			State = 223;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 220;
				Match(WS);
				}
				}
				State = 225;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 226;
			intentName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntentNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameIdentifierContext[] nameIdentifier() {
			return GetRuleContexts<NameIdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameIdentifierContext nameIdentifier(int i) {
			return GetRuleContext<NameIdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		public IntentNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intentName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterIntentName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitIntentName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntentName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntentNameContext intentName() {
		IntentNameContext _localctx = new IntentNameContext(Context, State);
		EnterRule(_localctx, 28, RULE_intentName);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 228;
			nameIdentifier();
			State = 233;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 231;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case WS:
						{
						State = 229;
						Match(WS);
						}
						break;
					case IDENTIFIER:
						{
						State = 230;
						nameIdentifier();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 235;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntentBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NormalIntentBodyContext normalIntentBody() {
			return GetRuleContext<NormalIntentBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		public IntentBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intentBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterIntentBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitIntentBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntentBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntentBodyContext intentBody() {
		IntentBodyContext _localctx = new IntentBodyContext(Context, State);
		EnterRule(_localctx, 30, RULE_intentBody);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 239;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 236;
					Match(WS);
					}
					} 
				}
				State = 241;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			}
			State = 242;
			normalIntentBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NormalIntentBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ErrorStringContext[] errorString() {
			return GetRuleContexts<ErrorStringContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ErrorStringContext errorString(int i) {
			return GetRuleContext<ErrorStringContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommentDefinitionContext[] commentDefinition() {
			return GetRuleContexts<CommentDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommentDefinitionContext commentDefinition(int i) {
			return GetRuleContext<CommentDefinitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NormalIntentStringContext[] normalIntentString() {
			return GetRuleContexts<NormalIntentStringContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NormalIntentStringContext normalIntentString(int i) {
			return GetRuleContext<NormalIntentStringContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext[] newline() {
			return GetRuleContexts<NewlineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline(int i) {
			return GetRuleContext<NewlineContext>(i);
		}
		public NormalIntentBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_normalIntentBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterNormalIntentBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitNormalIntentBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNormalIntentBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NormalIntentBodyContext normalIntentBody() {
		NormalIntentBodyContext _localctx = new NormalIntentBodyContext(Context, State);
		EnterRule(_localctx, 32, RULE_normalIntentBody);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 247;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 244;
					Match(WS);
					}
					} 
				}
				State = 249;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			}
			State = 255;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 255;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
					case 1:
						{
						{
						State = 250;
						normalIntentString();
						State = 251;
						newline();
						}
						}
						break;
					case 2:
						{
						State = 253;
						errorString();
						}
						break;
					case 3:
						{
						State = 254;
						commentDefinition();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 257;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NormalIntentStringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DASH() { return GetToken(LUFileParser.DASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TEXT() { return GetTokens(LUFileParser.TEXT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT(int i) {
			return GetToken(LUFileParser.TEXT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EXPRESSION() { return GetTokens(LUFileParser.EXPRESSION); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPRESSION(int i) {
			return GetToken(LUFileParser.EXPRESSION, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ESCAPE_CHARACTER() { return GetTokens(LUFileParser.ESCAPE_CHARACTER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE_CHARACTER(int i) {
			return GetToken(LUFileParser.ESCAPE_CHARACTER, i);
		}
		public NormalIntentStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_normalIntentString; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterNormalIntentString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitNormalIntentString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNormalIntentString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NormalIntentStringContext normalIntentString() {
		NormalIntentStringContext _localctx = new NormalIntentStringContext(Context, State);
		EnterRule(_localctx, 34, RULE_normalIntentString);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 262;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 259;
				Match(WS);
				}
				}
				State = 264;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 265;
			Match(DASH);
			State = 269;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 266;
					_la = TokenStream.LA(1);
					if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 15032385538L) != 0) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					} 
				}
				State = 271;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewEntitySectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NewEntityDefinitionContext newEntityDefinition() {
			return GetRuleContext<NewEntityDefinitionContext>(0);
		}
		public NewEntitySectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newEntitySection; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterNewEntitySection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitNewEntitySection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewEntitySection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewEntitySectionContext newEntitySection() {
		NewEntitySectionContext _localctx = new NewEntitySectionContext(Context, State);
		EnterRule(_localctx, 36, RULE_newEntitySection);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 272;
			newEntityDefinition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewEntityDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NewEntityLineContext newEntityLine() {
			return GetRuleContext<NewEntityLineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewEntityListbodyContext newEntityListbody() {
			return GetRuleContext<NewEntityListbodyContext>(0);
		}
		public NewEntityDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newEntityDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterNewEntityDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitNewEntityDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewEntityDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewEntityDefinitionContext newEntityDefinition() {
		NewEntityDefinitionContext _localctx = new NewEntityDefinitionContext(Context, State);
		EnterRule(_localctx, 38, RULE_newEntityDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 274;
			newEntityLine();
			State = 276;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				{
				State = 275;
				newEntityListbody();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewEntityListbodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ErrorStringContext[] errorString() {
			return GetRuleContexts<ErrorStringContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ErrorStringContext errorString(int i) {
			return GetRuleContext<ErrorStringContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NormalItemStringContext[] normalItemString() {
			return GetRuleContexts<NormalItemStringContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NormalItemStringContext normalItemString(int i) {
			return GetRuleContext<NormalItemStringContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext[] newline() {
			return GetRuleContexts<NewlineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline(int i) {
			return GetRuleContext<NewlineContext>(i);
		}
		public NewEntityListbodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newEntityListbody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterNewEntityListbody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitNewEntityListbody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewEntityListbody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewEntityListbodyContext newEntityListbody() {
		NewEntityListbodyContext _localctx = new NewEntityListbodyContext(Context, State);
		EnterRule(_localctx, 40, RULE_newEntityListbody);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 282;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 282;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
					case 1:
						{
						{
						State = 278;
						normalItemString();
						State = 279;
						newline();
						}
						}
						break;
					case 2:
						{
						State = 281;
						errorString();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 284;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewEntityLineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(LUFileParser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline() {
			return GetRuleContext<NewlineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewEntityTypeContext newEntityType() {
			return GetRuleContext<NewEntityTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewEntityNameContext newEntityName() {
			return GetRuleContext<NewEntityNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewEntityNameWithWSContext newEntityNameWithWS() {
			return GetRuleContext<NewEntityNameWithWSContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewEntityRolesContext newEntityRoles() {
			return GetRuleContext<NewEntityRolesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewEntityUsesFeaturesContext newEntityUsesFeatures() {
			return GetRuleContext<NewEntityUsesFeaturesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(LUFileParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NewCompositeDefinitionContext newCompositeDefinition() {
			return GetRuleContext<NewCompositeDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewRegexDefinitionContext newRegexDefinition() {
			return GetRuleContext<NewRegexDefinitionContext>(0);
		}
		public NewEntityLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newEntityLine; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterNewEntityLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitNewEntityLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewEntityLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewEntityLineContext newEntityLine() {
		NewEntityLineContext _localctx = new NewEntityLineContext(Context, State);
		EnterRule(_localctx, 42, RULE_newEntityLine);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 289;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 286;
				Match(WS);
				}
				}
				State = 291;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 292;
			Match(AT);
			State = 296;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,28,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 293;
					Match(WS);
					}
					} 
				}
				State = 298;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,28,Context);
			}
			State = 300;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEW_ENTITY_TYPE_IDENTIFIER) {
				{
				State = 299;
				newEntityType();
				}
			}

			State = 305;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,30,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 302;
					Match(WS);
					}
					} 
				}
				State = 307;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,30,Context);
			}
			State = 310;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
			case 1:
				{
				State = 308;
				newEntityName();
				}
				break;
			case 2:
				{
				State = 309;
				newEntityNameWithWS();
				}
				break;
			}
			State = 315;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 312;
					Match(WS);
					}
					} 
				}
				State = 317;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
			}
			State = 319;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
			case 1:
				{
				State = 318;
				newEntityRoles();
				}
				break;
			}
			State = 324;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,34,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 321;
					Match(WS);
					}
					} 
				}
				State = 326;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,34,Context);
			}
			State = 328;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==HAS_FEATURES_LABEL) {
				{
				State = 327;
				newEntityUsesFeatures();
				}
			}

			State = 333;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,36,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 330;
					Match(WS);
					}
					} 
				}
				State = 335;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,36,Context);
			}
			State = 337;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQUAL) {
				{
				State = 336;
				Match(EQUAL);
				}
			}

			State = 342;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,38,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 339;
					Match(WS);
					}
					} 
				}
				State = 344;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,38,Context);
			}
			State = 347;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NEW_COMPOSITE_ENTITY:
				{
				State = 345;
				newCompositeDefinition();
				}
				break;
			case NEW_REGEX_ENTITY:
				{
				State = 346;
				newRegexDefinition();
				}
				break;
			case Eof:
			case WS:
			case NEWLINE:
				break;
			default:
				break;
			}
			State = 349;
			newline();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewCompositeDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW_COMPOSITE_ENTITY() { return GetToken(LUFileParser.NEW_COMPOSITE_ENTITY, 0); }
		public NewCompositeDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newCompositeDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterNewCompositeDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitNewCompositeDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewCompositeDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewCompositeDefinitionContext newCompositeDefinition() {
		NewCompositeDefinitionContext _localctx = new NewCompositeDefinitionContext(Context, State);
		EnterRule(_localctx, 44, RULE_newCompositeDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 351;
			Match(NEW_COMPOSITE_ENTITY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewRegexDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW_REGEX_ENTITY() { return GetToken(LUFileParser.NEW_REGEX_ENTITY, 0); }
		public NewRegexDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newRegexDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterNewRegexDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitNewRegexDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewRegexDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewRegexDefinitionContext newRegexDefinition() {
		NewRegexDefinitionContext _localctx = new NewRegexDefinitionContext(Context, State);
		EnterRule(_localctx, 46, RULE_newRegexDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 353;
			Match(NEW_REGEX_ENTITY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewEntityTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW_ENTITY_TYPE_IDENTIFIER() { return GetToken(LUFileParser.NEW_ENTITY_TYPE_IDENTIFIER, 0); }
		public NewEntityTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newEntityType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterNewEntityType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitNewEntityType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewEntityType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewEntityTypeContext newEntityType() {
		NewEntityTypeContext _localctx = new NewEntityTypeContext(Context, State);
		EnterRule(_localctx, 48, RULE_newEntityType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 355;
			Match(NEW_ENTITY_TYPE_IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewEntityRolesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NewEntityRoleOrFeaturesContext newEntityRoleOrFeatures() {
			return GetRuleContext<NewEntityRoleOrFeaturesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HAS_ROLES_LABEL() { return GetToken(LUFileParser.HAS_ROLES_LABEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		public NewEntityRolesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newEntityRoles; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterNewEntityRoles(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitNewEntityRoles(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewEntityRoles(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewEntityRolesContext newEntityRoles() {
		NewEntityRolesContext _localctx = new NewEntityRolesContext(Context, State);
		EnterRule(_localctx, 50, RULE_newEntityRoles);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 358;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==HAS_ROLES_LABEL) {
				{
				State = 357;
				Match(HAS_ROLES_LABEL);
				}
			}

			State = 363;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 360;
				Match(WS);
				}
				}
				State = 365;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 366;
			newEntityRoleOrFeatures();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewEntityUsesFeaturesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HAS_FEATURES_LABEL() { return GetToken(LUFileParser.HAS_FEATURES_LABEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NewEntityRoleOrFeaturesContext newEntityRoleOrFeatures() {
			return GetRuleContext<NewEntityRoleOrFeaturesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		public NewEntityUsesFeaturesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newEntityUsesFeatures; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterNewEntityUsesFeatures(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitNewEntityUsesFeatures(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewEntityUsesFeatures(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewEntityUsesFeaturesContext newEntityUsesFeatures() {
		NewEntityUsesFeaturesContext _localctx = new NewEntityUsesFeaturesContext(Context, State);
		EnterRule(_localctx, 52, RULE_newEntityUsesFeatures);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 368;
			Match(HAS_FEATURES_LABEL);
			State = 372;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 369;
				Match(WS);
				}
				}
				State = 374;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 375;
			newEntityRoleOrFeatures();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewEntityRoleOrFeaturesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEW_ENTITY_IDENTIFIER() { return GetTokens(LUFileParser.NEW_ENTITY_IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW_ENTITY_IDENTIFIER(int i) {
			return GetToken(LUFileParser.NEW_ENTITY_IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEW_ENTITY_IDENTIFIER_WITH_WS() { return GetTokens(LUFileParser.NEW_ENTITY_IDENTIFIER_WITH_WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW_ENTITY_IDENTIFIER_WITH_WS(int i) {
			return GetToken(LUFileParser.NEW_ENTITY_IDENTIFIER_WITH_WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(LUFileParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(LUFileParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		public NewEntityRoleOrFeaturesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newEntityRoleOrFeatures; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterNewEntityRoleOrFeatures(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitNewEntityRoleOrFeatures(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewEntityRoleOrFeatures(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewEntityRoleOrFeaturesContext newEntityRoleOrFeatures() {
		NewEntityRoleOrFeaturesContext _localctx = new NewEntityRoleOrFeaturesContext(Context, State);
		EnterRule(_localctx, 54, RULE_newEntityRoleOrFeatures);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 377;
			_la = TokenStream.LA(1);
			if ( !(_la==NEW_ENTITY_IDENTIFIER || _la==NEW_ENTITY_IDENTIFIER_WITH_WS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 394;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,45,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 381;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==WS) {
						{
						{
						State = 378;
						Match(WS);
						}
						}
						State = 383;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 384;
					Match(COMMA);
					State = 388;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==WS) {
						{
						{
						State = 385;
						Match(WS);
						}
						}
						State = 390;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 391;
					_la = TokenStream.LA(1);
					if ( !(_la==NEW_ENTITY_IDENTIFIER || _la==NEW_ENTITY_IDENTIFIER_WITH_WS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					} 
				}
				State = 396;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,45,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewEntityNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW_ENTITY_IDENTIFIER() { return GetToken(LUFileParser.NEW_ENTITY_IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PHRASE_LIST_LABEL() { return GetToken(LUFileParser.PHRASE_LIST_LABEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		public NewEntityNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newEntityName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterNewEntityName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitNewEntityName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewEntityName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewEntityNameContext newEntityName() {
		NewEntityNameContext _localctx = new NewEntityNameContext(Context, State);
		EnterRule(_localctx, 56, RULE_newEntityName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 397;
			Match(NEW_ENTITY_IDENTIFIER);
			State = 405;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
			case 1:
				{
				State = 401;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS) {
					{
					{
					State = 398;
					Match(WS);
					}
					}
					State = 403;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 404;
				Match(PHRASE_LIST_LABEL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewEntityNameWithWSContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW_ENTITY_IDENTIFIER_WITH_WS() { return GetToken(LUFileParser.NEW_ENTITY_IDENTIFIER_WITH_WS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PHRASE_LIST_LABEL() { return GetToken(LUFileParser.PHRASE_LIST_LABEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		public NewEntityNameWithWSContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newEntityNameWithWS; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterNewEntityNameWithWS(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitNewEntityNameWithWS(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewEntityNameWithWS(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewEntityNameWithWSContext newEntityNameWithWS() {
		NewEntityNameWithWSContext _localctx = new NewEntityNameWithWSContext(Context, State);
		EnterRule(_localctx, 58, RULE_newEntityNameWithWS);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 407;
			Match(NEW_ENTITY_IDENTIFIER_WITH_WS);
			State = 415;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,49,Context) ) {
			case 1:
				{
				State = 411;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS) {
					{
					{
					State = 408;
					Match(WS);
					}
					}
					State = 413;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 414;
				Match(PHRASE_LIST_LABEL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntitySectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EntityDefinitionContext entityDefinition() {
			return GetRuleContext<EntityDefinitionContext>(0);
		}
		public EntitySectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entitySection; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterEntitySection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitEntitySection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntitySection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EntitySectionContext entitySection() {
		EntitySectionContext _localctx = new EntitySectionContext(Context, State);
		EnterRule(_localctx, 60, RULE_entitySection);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 417;
			entityDefinition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntityDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EntityLineContext entityLine() {
			return GetRuleContext<EntityLineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EntityListBodyContext entityListBody() {
			return GetRuleContext<EntityListBodyContext>(0);
		}
		public EntityDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entityDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterEntityDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitEntityDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntityDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EntityDefinitionContext entityDefinition() {
		EntityDefinitionContext _localctx = new EntityDefinitionContext(Context, State);
		EnterRule(_localctx, 62, RULE_entityDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 419;
			entityLine();
			State = 421;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,50,Context) ) {
			case 1:
				{
				State = 420;
				entityListBody();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntityLineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOLLAR() { return GetToken(LUFileParser.DOLLAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EntityNameContext entityName() {
			return GetRuleContext<EntityNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON_MARK() { return GetToken(LUFileParser.COLON_MARK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EntityTypeContext entityType() {
			return GetRuleContext<EntityTypeContext>(0);
		}
		public EntityLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entityLine; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterEntityLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitEntityLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntityLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EntityLineContext entityLine() {
		EntityLineContext _localctx = new EntityLineContext(Context, State);
		EnterRule(_localctx, 64, RULE_entityLine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 426;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 423;
				Match(WS);
				}
				}
				State = 428;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 429;
			Match(DOLLAR);
			State = 431;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,52,Context) ) {
			case 1:
				{
				State = 430;
				entityName();
				}
				break;
			}
			State = 434;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,53,Context) ) {
			case 1:
				{
				State = 433;
				Match(COLON_MARK);
				}
				break;
			}
			State = 437;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,54,Context) ) {
			case 1:
				{
				State = 436;
				entityType();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntityNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ENTITY_TEXT() { return GetTokens(LUFileParser.ENTITY_TEXT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENTITY_TEXT(int i) {
			return GetToken(LUFileParser.ENTITY_TEXT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		public EntityNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entityName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterEntityName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitEntityName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntityName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EntityNameContext entityName() {
		EntityNameContext _localctx = new EntityNameContext(Context, State);
		EnterRule(_localctx, 66, RULE_entityName);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 440;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 439;
					_la = TokenStream.LA(1);
					if ( !(_la==WS || _la==ENTITY_TEXT) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 442;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,55,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntityTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CompositeEntityIdentifierContext[] compositeEntityIdentifier() {
			return GetRuleContexts<CompositeEntityIdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompositeEntityIdentifierContext compositeEntityIdentifier(int i) {
			return GetRuleContext<CompositeEntityIdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexEntityIdentifierContext[] regexEntityIdentifier() {
			return GetRuleContexts<RegexEntityIdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexEntityIdentifierContext regexEntityIdentifier(int i) {
			return GetRuleContext<RegexEntityIdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ENTITY_TEXT() { return GetTokens(LUFileParser.ENTITY_TEXT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENTITY_TEXT(int i) {
			return GetToken(LUFileParser.ENTITY_TEXT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COLON_MARK() { return GetTokens(LUFileParser.COLON_MARK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON_MARK(int i) {
			return GetToken(LUFileParser.COLON_MARK, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		public EntityTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entityType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterEntityType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitEntityType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntityType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EntityTypeContext entityType() {
		EntityTypeContext _localctx = new EntityTypeContext(Context, State);
		EnterRule(_localctx, 68, RULE_entityType);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 449;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 449;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case COMPOSITE_ENTITY:
						{
						State = 444;
						compositeEntityIdentifier();
						}
						break;
					case REGEX_ENTITY:
						{
						State = 445;
						regexEntityIdentifier();
						}
						break;
					case ENTITY_TEXT:
						{
						State = 446;
						Match(ENTITY_TEXT);
						}
						break;
					case COLON_MARK:
						{
						State = 447;
						Match(COLON_MARK);
						}
						break;
					case WS:
						{
						State = 448;
						Match(WS);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 451;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,57,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompositeEntityIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPOSITE_ENTITY() { return GetToken(LUFileParser.COMPOSITE_ENTITY, 0); }
		public CompositeEntityIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compositeEntityIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterCompositeEntityIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitCompositeEntityIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompositeEntityIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompositeEntityIdentifierContext compositeEntityIdentifier() {
		CompositeEntityIdentifierContext _localctx = new CompositeEntityIdentifierContext(Context, State);
		EnterRule(_localctx, 70, RULE_compositeEntityIdentifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 453;
			Match(COMPOSITE_ENTITY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RegexEntityIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REGEX_ENTITY() { return GetToken(LUFileParser.REGEX_ENTITY, 0); }
		public RegexEntityIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_regexEntityIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterRegexEntityIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitRegexEntityIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegexEntityIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RegexEntityIdentifierContext regexEntityIdentifier() {
		RegexEntityIdentifierContext _localctx = new RegexEntityIdentifierContext(Context, State);
		EnterRule(_localctx, 72, RULE_regexEntityIdentifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 455;
			Match(REGEX_ENTITY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntityListBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ErrorStringContext[] errorString() {
			return GetRuleContexts<ErrorStringContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ErrorStringContext errorString(int i) {
			return GetRuleContext<ErrorStringContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NormalItemStringContext[] normalItemString() {
			return GetRuleContexts<NormalItemStringContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NormalItemStringContext normalItemString(int i) {
			return GetRuleContext<NormalItemStringContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext[] newline() {
			return GetRuleContexts<NewlineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline(int i) {
			return GetRuleContext<NewlineContext>(i);
		}
		public EntityListBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entityListBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterEntityListBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitEntityListBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntityListBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EntityListBodyContext entityListBody() {
		EntityListBodyContext _localctx = new EntityListBodyContext(Context, State);
		EnterRule(_localctx, 74, RULE_entityListBody);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 461;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 461;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,58,Context) ) {
					case 1:
						{
						{
						State = 457;
						normalItemString();
						State = 458;
						newline();
						}
						}
						break;
					case 2:
						{
						State = 460;
						errorString();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 463;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,59,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NormalItemStringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DASH() { return GetToken(LUFileParser.DASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TEXT() { return GetTokens(LUFileParser.TEXT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT(int i) {
			return GetToken(LUFileParser.TEXT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EXPRESSION() { return GetTokens(LUFileParser.EXPRESSION); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPRESSION(int i) {
			return GetToken(LUFileParser.EXPRESSION, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ESCAPE_CHARACTER() { return GetTokens(LUFileParser.ESCAPE_CHARACTER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE_CHARACTER(int i) {
			return GetToken(LUFileParser.ESCAPE_CHARACTER, i);
		}
		public NormalItemStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_normalItemString; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterNormalItemString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitNormalItemString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNormalItemString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NormalItemStringContext normalItemString() {
		NormalItemStringContext _localctx = new NormalItemStringContext(Context, State);
		EnterRule(_localctx, 76, RULE_normalItemString);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 468;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 465;
				Match(WS);
				}
				}
				State = 470;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 471;
			Match(DASH);
			State = 475;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,61,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 472;
					_la = TokenStream.LA(1);
					if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 15032385538L) != 0) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					} 
				}
				State = 477;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,61,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportSectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ImportDefinitionContext importDefinition() {
			return GetRuleContext<ImportDefinitionContext>(0);
		}
		public ImportSectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importSection; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterImportSection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitImportSection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportSection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportSectionContext importSection() {
		ImportSectionContext _localctx = new ImportSectionContext(Context, State);
		EnterRule(_localctx, 78, RULE_importSection);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 478;
			importDefinition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT() { return GetToken(LUFileParser.IMPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		public ImportDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterImportDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitImportDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportDefinitionContext importDefinition() {
		ImportDefinitionContext _localctx = new ImportDefinitionContext(Context, State);
		EnterRule(_localctx, 80, RULE_importDefinition);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 483;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 480;
				Match(WS);
				}
				}
				State = 485;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 486;
			Match(IMPORT);
			State = 490;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,63,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 487;
					Match(WS);
					}
					} 
				}
				State = 492;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,63,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReferenceSectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceDefinitionContext referenceDefinition() {
			return GetRuleContext<ReferenceDefinitionContext>(0);
		}
		public ReferenceSectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_referenceSection; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterReferenceSection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitReferenceSection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReferenceSection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReferenceSectionContext referenceSection() {
		ReferenceSectionContext _localctx = new ReferenceSectionContext(Context, State);
		EnterRule(_localctx, 82, RULE_referenceSection);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 493;
			referenceDefinition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReferenceDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFERENCE() { return GetToken(LUFileParser.REFERENCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		public ReferenceDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_referenceDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterReferenceDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitReferenceDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReferenceDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReferenceDefinitionContext referenceDefinition() {
		ReferenceDefinitionContext _localctx = new ReferenceDefinitionContext(Context, State);
		EnterRule(_localctx, 84, RULE_referenceDefinition);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 498;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 495;
				Match(WS);
				}
				}
				State = 500;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 501;
			Match(REFERENCE);
			State = 505;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,65,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 502;
					Match(WS);
					}
					} 
				}
				State = 507;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,65,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QnaSectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QnaDefinitionContext qnaDefinition() {
			return GetRuleContext<QnaDefinitionContext>(0);
		}
		public QnaSectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qnaSection; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterQnaSection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitQnaSection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQnaSection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QnaSectionContext qnaSection() {
		QnaSectionContext _localctx = new QnaSectionContext(Context, State);
		EnterRule(_localctx, 86, RULE_qnaSection);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 508;
			qnaDefinition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QnaDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QnaQuestionContext qnaQuestion() {
			return GetRuleContext<QnaQuestionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MoreQuestionsBodyContext moreQuestionsBody() {
			return GetRuleContext<MoreQuestionsBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QnaAnswerBodyContext qnaAnswerBody() {
			return GetRuleContext<QnaAnswerBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QnaSourceInfoContext qnaSourceInfo() {
			return GetRuleContext<QnaSourceInfoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QnaIdMarkContext qnaIdMark() {
			return GetRuleContext<QnaIdMarkContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PromptSectionContext promptSection() {
			return GetRuleContext<PromptSectionContext>(0);
		}
		public QnaDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qnaDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterQnaDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitQnaDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQnaDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QnaDefinitionContext qnaDefinition() {
		QnaDefinitionContext _localctx = new QnaDefinitionContext(Context, State);
		EnterRule(_localctx, 88, RULE_qnaDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 511;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,66,Context) ) {
			case 1:
				{
				State = 510;
				qnaSourceInfo();
				}
				break;
			}
			State = 514;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,67,Context) ) {
			case 1:
				{
				State = 513;
				qnaIdMark();
				}
				break;
			}
			State = 516;
			qnaQuestion();
			State = 517;
			moreQuestionsBody();
			State = 518;
			qnaAnswerBody();
			State = 520;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,68,Context) ) {
			case 1:
				{
				State = 519;
				promptSection();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QnaSourceInfoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QNA_SOURCE_INFO() { return GetToken(LUFileParser.QNA_SOURCE_INFO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		public QnaSourceInfoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qnaSourceInfo; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterQnaSourceInfo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitQnaSourceInfo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQnaSourceInfo(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QnaSourceInfoContext qnaSourceInfo() {
		QnaSourceInfoContext _localctx = new QnaSourceInfoContext(Context, State);
		EnterRule(_localctx, 90, RULE_qnaSourceInfo);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 525;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 522;
				Match(WS);
				}
				}
				State = 527;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 528;
			Match(QNA_SOURCE_INFO);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QnaIdMarkContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QNA_ID_MARK() { return GetToken(LUFileParser.QNA_ID_MARK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		public QnaIdMarkContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qnaIdMark; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterQnaIdMark(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitQnaIdMark(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQnaIdMark(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QnaIdMarkContext qnaIdMark() {
		QnaIdMarkContext _localctx = new QnaIdMarkContext(Context, State);
		EnterRule(_localctx, 92, RULE_qnaIdMark);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 533;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 530;
				Match(WS);
				}
				}
				State = 535;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 536;
			Match(QNA_ID_MARK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QnaQuestionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QNA() { return GetToken(LUFileParser.QNA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QuestionTextContext questionText() {
			return GetRuleContext<QuestionTextContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		public QnaQuestionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qnaQuestion; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterQnaQuestion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitQnaQuestion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQnaQuestion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QnaQuestionContext qnaQuestion() {
		QnaQuestionContext _localctx = new QnaQuestionContext(Context, State);
		EnterRule(_localctx, 94, RULE_qnaQuestion);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 541;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 538;
				Match(WS);
				}
				}
				State = 543;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 544;
			Match(QNA);
			State = 545;
			questionText();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QuestionTextContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] QNA_TEXT() { return GetTokens(LUFileParser.QNA_TEXT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QNA_TEXT(int i) {
			return GetToken(LUFileParser.QNA_TEXT, i);
		}
		public QuestionTextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_questionText; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterQuestionText(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitQuestionText(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuestionText(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QuestionTextContext questionText() {
		QuestionTextContext _localctx = new QuestionTextContext(Context, State);
		EnterRule(_localctx, 96, RULE_questionText);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 550;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==QNA_TEXT) {
				{
				{
				State = 547;
				Match(QNA_TEXT);
				}
				}
				State = 552;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MoreQuestionsBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ErrorQuestionStringContext[] errorQuestionString() {
			return GetRuleContexts<ErrorQuestionStringContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ErrorQuestionStringContext errorQuestionString(int i) {
			return GetRuleContext<ErrorQuestionStringContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MoreQuestionContext[] moreQuestion() {
			return GetRuleContexts<MoreQuestionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MoreQuestionContext moreQuestion(int i) {
			return GetRuleContext<MoreQuestionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext[] newline() {
			return GetRuleContexts<NewlineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline(int i) {
			return GetRuleContext<NewlineContext>(i);
		}
		public MoreQuestionsBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moreQuestionsBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterMoreQuestionsBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitMoreQuestionsBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMoreQuestionsBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MoreQuestionsBodyContext moreQuestionsBody() {
		MoreQuestionsBodyContext _localctx = new MoreQuestionsBodyContext(Context, State);
		EnterRule(_localctx, 98, RULE_moreQuestionsBody);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 556;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,73,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 553;
					Match(WS);
					}
					} 
				}
				State = 558;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,73,Context);
			}
			State = 565;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,75,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 563;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case DASH:
						{
						{
						State = 559;
						moreQuestion();
						State = 560;
						newline();
						}
						}
						break;
					case WS:
					case INVALID_TOKEN_DEFAULT_MODE:
						{
						State = 562;
						errorQuestionString();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 567;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,75,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MoreQuestionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DASH() { return GetToken(LUFileParser.DASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TEXT() { return GetTokens(LUFileParser.TEXT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT(int i) {
			return GetToken(LUFileParser.TEXT, i);
		}
		public MoreQuestionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moreQuestion; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterMoreQuestion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitMoreQuestion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMoreQuestion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MoreQuestionContext moreQuestion() {
		MoreQuestionContext _localctx = new MoreQuestionContext(Context, State);
		EnterRule(_localctx, 100, RULE_moreQuestion);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 568;
			Match(DASH);
			State = 572;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,76,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 569;
					_la = TokenStream.LA(1);
					if ( !(_la==WS || _la==TEXT) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					} 
				}
				State = 574;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,76,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ErrorQuestionStringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INVALID_TOKEN_DEFAULT_MODE() { return GetTokens(LUFileParser.INVALID_TOKEN_DEFAULT_MODE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INVALID_TOKEN_DEFAULT_MODE(int i) {
			return GetToken(LUFileParser.INVALID_TOKEN_DEFAULT_MODE, i);
		}
		public ErrorQuestionStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_errorQuestionString; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterErrorQuestionString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitErrorQuestionString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitErrorQuestionString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ErrorQuestionStringContext errorQuestionString() {
		ErrorQuestionStringContext _localctx = new ErrorQuestionStringContext(Context, State);
		EnterRule(_localctx, 102, RULE_errorQuestionString);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 576;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 575;
					_la = TokenStream.LA(1);
					if ( !(_la==WS || _la==INVALID_TOKEN_DEFAULT_MODE) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 578;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,77,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QnaAnswerBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MultiLineAnswerContext multiLineAnswer() {
			return GetRuleContext<MultiLineAnswerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FilterSectionContext filterSection() {
			return GetRuleContext<FilterSectionContext>(0);
		}
		public QnaAnswerBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qnaAnswerBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterQnaAnswerBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitQnaAnswerBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQnaAnswerBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QnaAnswerBodyContext qnaAnswerBody() {
		QnaAnswerBodyContext _localctx = new QnaAnswerBodyContext(Context, State);
		EnterRule(_localctx, 104, RULE_qnaAnswerBody);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 588;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,80,Context) ) {
			case 1:
				{
				{
				State = 581;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,78,Context) ) {
				case 1:
					{
					State = 580;
					filterSection();
					}
					break;
				}
				State = 583;
				multiLineAnswer();
				}
				}
				break;
			case 2:
				{
				{
				State = 584;
				multiLineAnswer();
				State = 586;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,79,Context) ) {
				case 1:
					{
					State = 585;
					filterSection();
					}
					break;
				}
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilterSectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILTER_MARK() { return GetToken(LUFileParser.FILTER_MARK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FilterLineContext[] filterLine() {
			return GetRuleContexts<FilterLineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FilterLineContext filterLine(int i) {
			return GetRuleContext<FilterLineContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ErrorFilterLineContext[] errorFilterLine() {
			return GetRuleContexts<ErrorFilterLineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ErrorFilterLineContext errorFilterLine(int i) {
			return GetRuleContext<ErrorFilterLineContext>(i);
		}
		public FilterSectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filterSection; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterFilterSection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitFilterSection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilterSection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FilterSectionContext filterSection() {
		FilterSectionContext _localctx = new FilterSectionContext(Context, State);
		EnterRule(_localctx, 106, RULE_filterSection);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 593;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 590;
				Match(WS);
				}
				}
				State = 595;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 596;
			Match(FILTER_MARK);
			State = 599;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 599;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,82,Context) ) {
					case 1:
						{
						State = 597;
						filterLine();
						}
						break;
					case 2:
						{
						State = 598;
						errorFilterLine();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 601;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,83,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PromptSectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROMPT_MARK() { return GetToken(LUFileParser.PROMPT_MARK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FilterLineContext[] filterLine() {
			return GetRuleContexts<FilterLineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FilterLineContext filterLine(int i) {
			return GetRuleContext<FilterLineContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ErrorFilterLineContext[] errorFilterLine() {
			return GetRuleContexts<ErrorFilterLineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ErrorFilterLineContext errorFilterLine(int i) {
			return GetRuleContext<ErrorFilterLineContext>(i);
		}
		public PromptSectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_promptSection; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterPromptSection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitPromptSection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPromptSection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PromptSectionContext promptSection() {
		PromptSectionContext _localctx = new PromptSectionContext(Context, State);
		EnterRule(_localctx, 108, RULE_promptSection);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 606;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 603;
				Match(WS);
				}
				}
				State = 608;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 609;
			Match(PROMPT_MARK);
			State = 612;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 612;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,85,Context) ) {
					case 1:
						{
						State = 610;
						filterLine();
						}
						break;
					case 2:
						{
						State = 611;
						errorFilterLine();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 614;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,86,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilterLineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DASH() { return GetToken(LUFileParser.DASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NewlineContext newline() {
			return GetRuleContext<NewlineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TEXT() { return GetTokens(LUFileParser.TEXT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT(int i) {
			return GetToken(LUFileParser.TEXT, i);
		}
		public FilterLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filterLine; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterFilterLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitFilterLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilterLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FilterLineContext filterLine() {
		FilterLineContext _localctx = new FilterLineContext(Context, State);
		EnterRule(_localctx, 110, RULE_filterLine);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 619;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 616;
				Match(WS);
				}
				}
				State = 621;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 622;
			Match(DASH);
			State = 626;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,88,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 623;
					_la = TokenStream.LA(1);
					if ( !(_la==WS || _la==TEXT) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					} 
				}
				State = 628;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,88,Context);
			}
			State = 629;
			newline();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ErrorFilterLineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INVALID_TOKEN_DEFAULT_MODE() { return GetTokens(LUFileParser.INVALID_TOKEN_DEFAULT_MODE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INVALID_TOKEN_DEFAULT_MODE(int i) {
			return GetToken(LUFileParser.INVALID_TOKEN_DEFAULT_MODE, i);
		}
		public ErrorFilterLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_errorFilterLine; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterErrorFilterLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitErrorFilterLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitErrorFilterLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ErrorFilterLineContext errorFilterLine() {
		ErrorFilterLineContext _localctx = new ErrorFilterLineContext(Context, State);
		EnterRule(_localctx, 112, RULE_errorFilterLine);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 632;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 631;
					_la = TokenStream.LA(1);
					if ( !(_la==WS || _la==INVALID_TOKEN_DEFAULT_MODE) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 634;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,89,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiLineAnswerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTI_LINE_TEXT() { return GetToken(LUFileParser.MULTI_LINE_TEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		public MultiLineAnswerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiLineAnswer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterMultiLineAnswer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitMultiLineAnswer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiLineAnswer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiLineAnswerContext multiLineAnswer() {
		MultiLineAnswerContext _localctx = new MultiLineAnswerContext(Context, State);
		EnterRule(_localctx, 114, RULE_multiLineAnswer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 639;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 636;
				Match(WS);
				}
				}
				State = 641;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 642;
			Match(MULTI_LINE_TEXT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModelInfoSectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ModelInfoDefinitionContext modelInfoDefinition() {
			return GetRuleContext<ModelInfoDefinitionContext>(0);
		}
		public ModelInfoSectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modelInfoSection; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterModelInfoSection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitModelInfoSection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModelInfoSection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModelInfoSectionContext modelInfoSection() {
		ModelInfoSectionContext _localctx = new ModelInfoSectionContext(Context, State);
		EnterRule(_localctx, 116, RULE_modelInfoSection);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 644;
			modelInfoDefinition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModelInfoDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODEL_INFO() { return GetToken(LUFileParser.MODEL_INFO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LUFileParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LUFileParser.WS, i);
		}
		public ModelInfoDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modelInfoDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.EnterModelInfoDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILUFileParserListener typedListener = listener as ILUFileParserListener;
			if (typedListener != null) typedListener.ExitModelInfoDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILUFileParserVisitor<TResult> typedVisitor = visitor as ILUFileParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModelInfoDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModelInfoDefinitionContext modelInfoDefinition() {
		ModelInfoDefinitionContext _localctx = new ModelInfoDefinitionContext(Context, State);
		EnterRule(_localctx, 118, RULE_modelInfoDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 649;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 646;
				Match(WS);
				}
				}
				State = 651;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 652;
			Match(MODEL_INFO);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,40,655,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,1,0,4,0,122,8,0,11,0,12,0,123,1,0,1,0,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,138,8,1,1,2,5,2,141,8,2,10,2,
		12,2,144,9,2,1,2,1,2,1,3,1,3,3,3,150,8,3,1,4,4,4,153,8,4,11,4,12,4,154,
		1,5,1,5,1,5,1,6,5,6,161,8,6,10,6,12,6,164,9,6,1,6,1,6,5,6,168,8,6,10,6,
		12,6,171,9,6,1,6,1,6,1,7,1,7,1,7,5,7,178,8,7,10,7,12,7,181,9,7,1,8,1,8,
		1,8,5,8,186,8,8,10,8,12,8,189,9,8,1,9,4,9,192,8,9,11,9,12,9,193,1,10,5,
		10,197,8,10,10,10,12,10,200,9,10,1,10,1,10,1,10,1,11,1,11,1,12,1,12,3,
		12,209,8,12,1,13,5,13,212,8,13,10,13,12,13,215,9,13,1,13,1,13,3,13,219,
		8,13,1,13,5,13,222,8,13,10,13,12,13,225,9,13,1,13,1,13,1,14,1,14,1,14,
		5,14,232,8,14,10,14,12,14,235,9,14,1,15,5,15,238,8,15,10,15,12,15,241,
		9,15,1,15,1,15,1,16,5,16,246,8,16,10,16,12,16,249,9,16,1,16,1,16,1,16,
		1,16,1,16,4,16,256,8,16,11,16,12,16,257,1,17,5,17,261,8,17,10,17,12,17,
		264,9,17,1,17,1,17,5,17,268,8,17,10,17,12,17,271,9,17,1,18,1,18,1,19,1,
		19,3,19,277,8,19,1,20,1,20,1,20,1,20,4,20,283,8,20,11,20,12,20,284,1,21,
		5,21,288,8,21,10,21,12,21,291,9,21,1,21,1,21,5,21,295,8,21,10,21,12,21,
		298,9,21,1,21,3,21,301,8,21,1,21,5,21,304,8,21,10,21,12,21,307,9,21,1,
		21,1,21,3,21,311,8,21,1,21,5,21,314,8,21,10,21,12,21,317,9,21,1,21,3,21,
		320,8,21,1,21,5,21,323,8,21,10,21,12,21,326,9,21,1,21,3,21,329,8,21,1,
		21,5,21,332,8,21,10,21,12,21,335,9,21,1,21,3,21,338,8,21,1,21,5,21,341,
		8,21,10,21,12,21,344,9,21,1,21,1,21,3,21,348,8,21,1,21,1,21,1,22,1,22,
		1,23,1,23,1,24,1,24,1,25,3,25,359,8,25,1,25,5,25,362,8,25,10,25,12,25,
		365,9,25,1,25,1,25,1,26,1,26,5,26,371,8,26,10,26,12,26,374,9,26,1,26,1,
		26,1,27,1,27,5,27,380,8,27,10,27,12,27,383,9,27,1,27,1,27,5,27,387,8,27,
		10,27,12,27,390,9,27,1,27,5,27,393,8,27,10,27,12,27,396,9,27,1,28,1,28,
		5,28,400,8,28,10,28,12,28,403,9,28,1,28,3,28,406,8,28,1,29,1,29,5,29,410,
		8,29,10,29,12,29,413,9,29,1,29,3,29,416,8,29,1,30,1,30,1,31,1,31,3,31,
		422,8,31,1,32,5,32,425,8,32,10,32,12,32,428,9,32,1,32,1,32,3,32,432,8,
		32,1,32,3,32,435,8,32,1,32,3,32,438,8,32,1,33,4,33,441,8,33,11,33,12,33,
		442,1,34,1,34,1,34,1,34,1,34,4,34,450,8,34,11,34,12,34,451,1,35,1,35,1,
		36,1,36,1,37,1,37,1,37,1,37,4,37,462,8,37,11,37,12,37,463,1,38,5,38,467,
		8,38,10,38,12,38,470,9,38,1,38,1,38,5,38,474,8,38,10,38,12,38,477,9,38,
		1,39,1,39,1,40,5,40,482,8,40,10,40,12,40,485,9,40,1,40,1,40,5,40,489,8,
		40,10,40,12,40,492,9,40,1,41,1,41,1,42,5,42,497,8,42,10,42,12,42,500,9,
		42,1,42,1,42,5,42,504,8,42,10,42,12,42,507,9,42,1,43,1,43,1,44,3,44,512,
		8,44,1,44,3,44,515,8,44,1,44,1,44,1,44,1,44,3,44,521,8,44,1,45,5,45,524,
		8,45,10,45,12,45,527,9,45,1,45,1,45,1,46,5,46,532,8,46,10,46,12,46,535,
		9,46,1,46,1,46,1,47,5,47,540,8,47,10,47,12,47,543,9,47,1,47,1,47,1,47,
		1,48,5,48,549,8,48,10,48,12,48,552,9,48,1,49,5,49,555,8,49,10,49,12,49,
		558,9,49,1,49,1,49,1,49,1,49,5,49,564,8,49,10,49,12,49,567,9,49,1,50,1,
		50,5,50,571,8,50,10,50,12,50,574,9,50,1,51,4,51,577,8,51,11,51,12,51,578,
		1,52,3,52,582,8,52,1,52,1,52,1,52,3,52,587,8,52,3,52,589,8,52,1,53,5,53,
		592,8,53,10,53,12,53,595,9,53,1,53,1,53,1,53,4,53,600,8,53,11,53,12,53,
		601,1,54,5,54,605,8,54,10,54,12,54,608,9,54,1,54,1,54,1,54,4,54,613,8,
		54,11,54,12,54,614,1,55,5,55,618,8,55,10,55,12,55,621,9,55,1,55,1,55,5,
		55,625,8,55,10,55,12,55,628,9,55,1,55,1,55,1,56,4,56,633,8,56,11,56,12,
		56,634,1,57,5,57,638,8,57,10,57,12,57,641,9,57,1,57,1,57,1,58,1,58,1,59,
		5,59,648,8,59,10,59,12,59,651,9,59,1,59,1,59,1,59,1,123,0,60,0,2,4,6,8,
		10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,
		58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,
		104,106,108,110,112,114,116,118,0,6,1,1,2,2,2,0,1,1,17,17,2,0,1,1,31,33,
		1,0,26,27,2,0,1,1,37,37,2,0,1,1,33,33,700,0,121,1,0,0,0,2,137,1,0,0,0,
		4,142,1,0,0,0,6,147,1,0,0,0,8,152,1,0,0,0,10,156,1,0,0,0,12,162,1,0,0,
		0,14,174,1,0,0,0,16,182,1,0,0,0,18,191,1,0,0,0,20,198,1,0,0,0,22,204,1,
		0,0,0,24,206,1,0,0,0,26,213,1,0,0,0,28,228,1,0,0,0,30,239,1,0,0,0,32,247,
		1,0,0,0,34,262,1,0,0,0,36,272,1,0,0,0,38,274,1,0,0,0,40,282,1,0,0,0,42,
		289,1,0,0,0,44,351,1,0,0,0,46,353,1,0,0,0,48,355,1,0,0,0,50,358,1,0,0,
		0,52,368,1,0,0,0,54,377,1,0,0,0,56,397,1,0,0,0,58,407,1,0,0,0,60,417,1,
		0,0,0,62,419,1,0,0,0,64,426,1,0,0,0,66,440,1,0,0,0,68,449,1,0,0,0,70,453,
		1,0,0,0,72,455,1,0,0,0,74,461,1,0,0,0,76,468,1,0,0,0,78,478,1,0,0,0,80,
		483,1,0,0,0,82,493,1,0,0,0,84,498,1,0,0,0,86,508,1,0,0,0,88,511,1,0,0,
		0,90,525,1,0,0,0,92,533,1,0,0,0,94,541,1,0,0,0,96,550,1,0,0,0,98,556,1,
		0,0,0,100,568,1,0,0,0,102,576,1,0,0,0,104,588,1,0,0,0,106,593,1,0,0,0,
		108,606,1,0,0,0,110,619,1,0,0,0,112,632,1,0,0,0,114,639,1,0,0,0,116,644,
		1,0,0,0,118,649,1,0,0,0,120,122,3,2,1,0,121,120,1,0,0,0,122,123,1,0,0,
		0,123,124,1,0,0,0,123,121,1,0,0,0,124,125,1,0,0,0,125,126,5,0,0,1,126,
		1,1,0,0,0,127,138,5,2,0,0,128,138,3,10,5,0,129,138,3,22,11,0,130,138,3,
		60,30,0,131,138,3,36,18,0,132,138,3,78,39,0,133,138,3,82,41,0,134,138,
		3,86,43,0,135,138,3,116,58,0,136,138,3,6,3,0,137,127,1,0,0,0,137,128,1,
		0,0,0,137,129,1,0,0,0,137,130,1,0,0,0,137,131,1,0,0,0,137,132,1,0,0,0,
		137,133,1,0,0,0,137,134,1,0,0,0,137,135,1,0,0,0,137,136,1,0,0,0,138,3,
		1,0,0,0,139,141,5,1,0,0,140,139,1,0,0,0,141,144,1,0,0,0,142,140,1,0,0,
		0,142,143,1,0,0,0,143,145,1,0,0,0,144,142,1,0,0,0,145,146,7,0,0,0,146,
		5,1,0,0,0,147,149,5,5,0,0,148,150,5,2,0,0,149,148,1,0,0,0,149,150,1,0,
		0,0,150,7,1,0,0,0,151,153,7,1,0,0,152,151,1,0,0,0,153,154,1,0,0,0,154,
		152,1,0,0,0,154,155,1,0,0,0,155,9,1,0,0,0,156,157,3,12,6,0,157,158,3,18,
		9,0,158,11,1,0,0,0,159,161,5,1,0,0,160,159,1,0,0,0,161,164,1,0,0,0,162,
		160,1,0,0,0,162,163,1,0,0,0,163,165,1,0,0,0,164,162,1,0,0,0,165,169,5,
		7,0,0,166,168,5,1,0,0,167,166,1,0,0,0,168,171,1,0,0,0,169,167,1,0,0,0,
		169,170,1,0,0,0,170,172,1,0,0,0,171,169,1,0,0,0,172,173,3,14,7,0,173,13,
		1,0,0,0,174,179,3,16,8,0,175,178,5,1,0,0,176,178,3,16,8,0,177,175,1,0,
		0,0,177,176,1,0,0,0,178,181,1,0,0,0,179,177,1,0,0,0,179,180,1,0,0,0,180,
		15,1,0,0,0,181,179,1,0,0,0,182,187,5,29,0,0,183,184,5,30,0,0,184,186,5,
		29,0,0,185,183,1,0,0,0,186,189,1,0,0,0,187,185,1,0,0,0,187,188,1,0,0,0,
		188,17,1,0,0,0,189,187,1,0,0,0,190,192,3,20,10,0,191,190,1,0,0,0,192,193,
		1,0,0,0,193,191,1,0,0,0,193,194,1,0,0,0,194,19,1,0,0,0,195,197,5,1,0,0,
		196,195,1,0,0,0,197,200,1,0,0,0,198,196,1,0,0,0,198,199,1,0,0,0,199,201,
		1,0,0,0,200,198,1,0,0,0,201,202,5,7,0,0,202,203,3,22,11,0,203,21,1,0,0,
		0,204,205,3,24,12,0,205,23,1,0,0,0,206,208,3,26,13,0,207,209,3,30,15,0,
		208,207,1,0,0,0,208,209,1,0,0,0,209,25,1,0,0,0,210,212,5,1,0,0,211,210,
		1,0,0,0,212,215,1,0,0,0,213,211,1,0,0,0,213,214,1,0,0,0,214,216,1,0,0,
		0,215,213,1,0,0,0,216,218,5,7,0,0,217,219,5,7,0,0,218,217,1,0,0,0,218,
		219,1,0,0,0,219,223,1,0,0,0,220,222,5,1,0,0,221,220,1,0,0,0,222,225,1,
		0,0,0,223,221,1,0,0,0,223,224,1,0,0,0,224,226,1,0,0,0,225,223,1,0,0,0,
		226,227,3,28,14,0,227,27,1,0,0,0,228,233,3,16,8,0,229,232,5,1,0,0,230,
		232,3,16,8,0,231,229,1,0,0,0,231,230,1,0,0,0,232,235,1,0,0,0,233,231,1,
		0,0,0,233,234,1,0,0,0,234,29,1,0,0,0,235,233,1,0,0,0,236,238,5,1,0,0,237,
		236,1,0,0,0,238,241,1,0,0,0,239,237,1,0,0,0,239,240,1,0,0,0,240,242,1,
		0,0,0,241,239,1,0,0,0,242,243,3,32,16,0,243,31,1,0,0,0,244,246,5,1,0,0,
		245,244,1,0,0,0,246,249,1,0,0,0,247,245,1,0,0,0,247,248,1,0,0,0,248,255,
		1,0,0,0,249,247,1,0,0,0,250,251,3,34,17,0,251,252,3,4,2,0,252,256,1,0,
		0,0,253,256,3,8,4,0,254,256,3,6,3,0,255,250,1,0,0,0,255,253,1,0,0,0,255,
		254,1,0,0,0,256,257,1,0,0,0,257,255,1,0,0,0,257,258,1,0,0,0,258,33,1,0,
		0,0,259,261,5,1,0,0,260,259,1,0,0,0,261,264,1,0,0,0,262,260,1,0,0,0,262,
		263,1,0,0,0,263,265,1,0,0,0,264,262,1,0,0,0,265,269,5,8,0,0,266,268,7,
		2,0,0,267,266,1,0,0,0,268,271,1,0,0,0,269,267,1,0,0,0,269,270,1,0,0,0,
		270,35,1,0,0,0,271,269,1,0,0,0,272,273,3,38,19,0,273,37,1,0,0,0,274,276,
		3,42,21,0,275,277,3,40,20,0,276,275,1,0,0,0,276,277,1,0,0,0,277,39,1,0,
		0,0,278,279,3,76,38,0,279,280,3,4,2,0,280,283,1,0,0,0,281,283,3,8,4,0,
		282,278,1,0,0,0,282,281,1,0,0,0,283,284,1,0,0,0,284,282,1,0,0,0,284,285,
		1,0,0,0,285,41,1,0,0,0,286,288,5,1,0,0,287,286,1,0,0,0,288,291,1,0,0,0,
		289,287,1,0,0,0,289,290,1,0,0,0,290,292,1,0,0,0,291,289,1,0,0,0,292,296,
		5,10,0,0,293,295,5,1,0,0,294,293,1,0,0,0,295,298,1,0,0,0,296,294,1,0,0,
		0,296,297,1,0,0,0,297,300,1,0,0,0,298,296,1,0,0,0,299,301,3,48,24,0,300,
		299,1,0,0,0,300,301,1,0,0,0,301,305,1,0,0,0,302,304,5,1,0,0,303,302,1,
		0,0,0,304,307,1,0,0,0,305,303,1,0,0,0,305,306,1,0,0,0,306,310,1,0,0,0,
		307,305,1,0,0,0,308,311,3,56,28,0,309,311,3,58,29,0,310,308,1,0,0,0,310,
		309,1,0,0,0,310,311,1,0,0,0,311,315,1,0,0,0,312,314,5,1,0,0,313,312,1,
		0,0,0,314,317,1,0,0,0,315,313,1,0,0,0,315,316,1,0,0,0,316,319,1,0,0,0,
		317,315,1,0,0,0,318,320,3,50,25,0,319,318,1,0,0,0,319,320,1,0,0,0,320,
		324,1,0,0,0,321,323,5,1,0,0,322,321,1,0,0,0,323,326,1,0,0,0,324,322,1,
		0,0,0,324,325,1,0,0,0,325,328,1,0,0,0,326,324,1,0,0,0,327,329,3,52,26,
		0,328,327,1,0,0,0,328,329,1,0,0,0,329,333,1,0,0,0,330,332,5,1,0,0,331,
		330,1,0,0,0,332,335,1,0,0,0,333,331,1,0,0,0,333,334,1,0,0,0,334,337,1,
		0,0,0,335,333,1,0,0,0,336,338,5,18,0,0,337,336,1,0,0,0,337,338,1,0,0,0,
		338,342,1,0,0,0,339,341,5,1,0,0,340,339,1,0,0,0,341,344,1,0,0,0,342,340,
		1,0,0,0,342,343,1,0,0,0,343,347,1,0,0,0,344,342,1,0,0,0,345,348,3,44,22,
		0,346,348,3,46,23,0,347,345,1,0,0,0,347,346,1,0,0,0,347,348,1,0,0,0,348,
		349,1,0,0,0,349,350,3,4,2,0,350,43,1,0,0,0,351,352,5,24,0,0,352,45,1,0,
		0,0,353,354,5,25,0,0,354,47,1,0,0,0,355,356,5,22,0,0,356,49,1,0,0,0,357,
		359,5,20,0,0,358,357,1,0,0,0,358,359,1,0,0,0,359,363,1,0,0,0,360,362,5,
		1,0,0,361,360,1,0,0,0,362,365,1,0,0,0,363,361,1,0,0,0,363,364,1,0,0,0,
		364,366,1,0,0,0,365,363,1,0,0,0,366,367,3,54,27,0,367,51,1,0,0,0,368,372,
		5,21,0,0,369,371,5,1,0,0,370,369,1,0,0,0,371,374,1,0,0,0,372,370,1,0,0,
		0,372,373,1,0,0,0,373,375,1,0,0,0,374,372,1,0,0,0,375,376,3,54,27,0,376,
		53,1,0,0,0,377,394,7,3,0,0,378,380,5,1,0,0,379,378,1,0,0,0,380,383,1,0,
		0,0,381,379,1,0,0,0,381,382,1,0,0,0,382,384,1,0,0,0,383,381,1,0,0,0,384,
		388,5,19,0,0,385,387,5,1,0,0,386,385,1,0,0,0,387,390,1,0,0,0,388,386,1,
		0,0,0,388,389,1,0,0,0,389,391,1,0,0,0,390,388,1,0,0,0,391,393,7,3,0,0,
		392,381,1,0,0,0,393,396,1,0,0,0,394,392,1,0,0,0,394,395,1,0,0,0,395,55,
		1,0,0,0,396,394,1,0,0,0,397,405,5,26,0,0,398,400,5,1,0,0,399,398,1,0,0,
		0,400,403,1,0,0,0,401,399,1,0,0,0,401,402,1,0,0,0,402,404,1,0,0,0,403,
		401,1,0,0,0,404,406,5,23,0,0,405,401,1,0,0,0,405,406,1,0,0,0,406,57,1,
		0,0,0,407,415,5,27,0,0,408,410,5,1,0,0,409,408,1,0,0,0,410,413,1,0,0,0,
		411,409,1,0,0,0,411,412,1,0,0,0,412,414,1,0,0,0,413,411,1,0,0,0,414,416,
		5,23,0,0,415,411,1,0,0,0,415,416,1,0,0,0,416,59,1,0,0,0,417,418,3,62,31,
		0,418,61,1,0,0,0,419,421,3,64,32,0,420,422,3,74,37,0,421,420,1,0,0,0,421,
		422,1,0,0,0,422,63,1,0,0,0,423,425,5,1,0,0,424,423,1,0,0,0,425,428,1,0,
		0,0,426,424,1,0,0,0,426,427,1,0,0,0,427,429,1,0,0,0,428,426,1,0,0,0,429,
		431,5,9,0,0,430,432,3,66,33,0,431,430,1,0,0,0,431,432,1,0,0,0,432,434,
		1,0,0,0,433,435,5,38,0,0,434,433,1,0,0,0,434,435,1,0,0,0,435,437,1,0,0,
		0,436,438,3,68,34,0,437,436,1,0,0,0,437,438,1,0,0,0,438,65,1,0,0,0,439,
		441,7,4,0,0,440,439,1,0,0,0,441,442,1,0,0,0,442,440,1,0,0,0,442,443,1,
		0,0,0,443,67,1,0,0,0,444,450,3,70,35,0,445,450,3,72,36,0,446,450,5,37,
		0,0,447,450,5,38,0,0,448,450,5,1,0,0,449,444,1,0,0,0,449,445,1,0,0,0,449,
		446,1,0,0,0,449,447,1,0,0,0,449,448,1,0,0,0,450,451,1,0,0,0,451,449,1,
		0,0,0,451,452,1,0,0,0,452,69,1,0,0,0,453,454,5,35,0,0,454,71,1,0,0,0,455,
		456,5,36,0,0,456,73,1,0,0,0,457,458,3,76,38,0,458,459,3,4,2,0,459,462,
		1,0,0,0,460,462,3,8,4,0,461,457,1,0,0,0,461,460,1,0,0,0,462,463,1,0,0,
		0,463,461,1,0,0,0,463,464,1,0,0,0,464,75,1,0,0,0,465,467,5,1,0,0,466,465,
		1,0,0,0,467,470,1,0,0,0,468,466,1,0,0,0,468,469,1,0,0,0,469,471,1,0,0,
		0,470,468,1,0,0,0,471,475,5,8,0,0,472,474,7,2,0,0,473,472,1,0,0,0,474,
		477,1,0,0,0,475,473,1,0,0,0,475,476,1,0,0,0,476,77,1,0,0,0,477,475,1,0,
		0,0,478,479,3,80,40,0,479,79,1,0,0,0,480,482,5,1,0,0,481,480,1,0,0,0,482,
		485,1,0,0,0,483,481,1,0,0,0,483,484,1,0,0,0,484,486,1,0,0,0,485,483,1,
		0,0,0,486,490,5,11,0,0,487,489,5,1,0,0,488,487,1,0,0,0,489,492,1,0,0,0,
		490,488,1,0,0,0,490,491,1,0,0,0,491,81,1,0,0,0,492,490,1,0,0,0,493,494,
		3,84,42,0,494,83,1,0,0,0,495,497,5,1,0,0,496,495,1,0,0,0,497,500,1,0,0,
		0,498,496,1,0,0,0,498,499,1,0,0,0,499,501,1,0,0,0,500,498,1,0,0,0,501,
		505,5,12,0,0,502,504,5,1,0,0,503,502,1,0,0,0,504,507,1,0,0,0,505,503,1,
		0,0,0,505,506,1,0,0,0,506,85,1,0,0,0,507,505,1,0,0,0,508,509,3,88,44,0,
		509,87,1,0,0,0,510,512,3,90,45,0,511,510,1,0,0,0,511,512,1,0,0,0,512,514,
		1,0,0,0,513,515,3,92,46,0,514,513,1,0,0,0,514,515,1,0,0,0,515,516,1,0,
		0,0,516,517,3,94,47,0,517,518,3,98,49,0,518,520,3,104,52,0,519,521,3,108,
		54,0,520,519,1,0,0,0,520,521,1,0,0,0,521,89,1,0,0,0,522,524,5,1,0,0,523,
		522,1,0,0,0,524,527,1,0,0,0,525,523,1,0,0,0,525,526,1,0,0,0,526,528,1,
		0,0,0,527,525,1,0,0,0,528,529,5,3,0,0,529,91,1,0,0,0,530,532,5,1,0,0,531,
		530,1,0,0,0,532,535,1,0,0,0,533,531,1,0,0,0,533,534,1,0,0,0,534,536,1,
		0,0,0,535,533,1,0,0,0,536,537,5,14,0,0,537,93,1,0,0,0,538,540,5,1,0,0,
		539,538,1,0,0,0,540,543,1,0,0,0,541,539,1,0,0,0,541,542,1,0,0,0,542,544,
		1,0,0,0,543,541,1,0,0,0,544,545,5,6,0,0,545,546,3,96,48,0,546,95,1,0,0,
		0,547,549,5,40,0,0,548,547,1,0,0,0,549,552,1,0,0,0,550,548,1,0,0,0,550,
		551,1,0,0,0,551,97,1,0,0,0,552,550,1,0,0,0,553,555,5,1,0,0,554,553,1,0,
		0,0,555,558,1,0,0,0,556,554,1,0,0,0,556,557,1,0,0,0,557,565,1,0,0,0,558,
		556,1,0,0,0,559,560,3,100,50,0,560,561,3,4,2,0,561,564,1,0,0,0,562,564,
		3,102,51,0,563,559,1,0,0,0,563,562,1,0,0,0,564,567,1,0,0,0,565,563,1,0,
		0,0,565,566,1,0,0,0,566,99,1,0,0,0,567,565,1,0,0,0,568,572,5,8,0,0,569,
		571,7,5,0,0,570,569,1,0,0,0,571,574,1,0,0,0,572,570,1,0,0,0,572,573,1,
		0,0,0,573,101,1,0,0,0,574,572,1,0,0,0,575,577,7,1,0,0,576,575,1,0,0,0,
		577,578,1,0,0,0,578,576,1,0,0,0,578,579,1,0,0,0,579,103,1,0,0,0,580,582,
		3,106,53,0,581,580,1,0,0,0,581,582,1,0,0,0,582,583,1,0,0,0,583,589,3,114,
		57,0,584,586,3,114,57,0,585,587,3,106,53,0,586,585,1,0,0,0,586,587,1,0,
		0,0,587,589,1,0,0,0,588,581,1,0,0,0,588,584,1,0,0,0,589,105,1,0,0,0,590,
		592,5,1,0,0,591,590,1,0,0,0,592,595,1,0,0,0,593,591,1,0,0,0,593,594,1,
		0,0,0,594,596,1,0,0,0,595,593,1,0,0,0,596,599,5,13,0,0,597,600,3,110,55,
		0,598,600,3,112,56,0,599,597,1,0,0,0,599,598,1,0,0,0,600,601,1,0,0,0,601,
		599,1,0,0,0,601,602,1,0,0,0,602,107,1,0,0,0,603,605,5,1,0,0,604,603,1,
		0,0,0,605,608,1,0,0,0,606,604,1,0,0,0,606,607,1,0,0,0,607,609,1,0,0,0,
		608,606,1,0,0,0,609,612,5,16,0,0,610,613,3,110,55,0,611,613,3,112,56,0,
		612,610,1,0,0,0,612,611,1,0,0,0,613,614,1,0,0,0,614,612,1,0,0,0,614,615,
		1,0,0,0,615,109,1,0,0,0,616,618,5,1,0,0,617,616,1,0,0,0,618,621,1,0,0,
		0,619,617,1,0,0,0,619,620,1,0,0,0,620,622,1,0,0,0,621,619,1,0,0,0,622,
		626,5,8,0,0,623,625,7,5,0,0,624,623,1,0,0,0,625,628,1,0,0,0,626,624,1,
		0,0,0,626,627,1,0,0,0,627,629,1,0,0,0,628,626,1,0,0,0,629,630,3,4,2,0,
		630,111,1,0,0,0,631,633,7,1,0,0,632,631,1,0,0,0,633,634,1,0,0,0,634,632,
		1,0,0,0,634,635,1,0,0,0,635,113,1,0,0,0,636,638,5,1,0,0,637,636,1,0,0,
		0,638,641,1,0,0,0,639,637,1,0,0,0,639,640,1,0,0,0,640,642,1,0,0,0,641,
		639,1,0,0,0,642,643,5,15,0,0,643,115,1,0,0,0,644,645,3,118,59,0,645,117,
		1,0,0,0,646,648,5,1,0,0,647,646,1,0,0,0,648,651,1,0,0,0,649,647,1,0,0,
		0,649,650,1,0,0,0,650,652,1,0,0,0,651,649,1,0,0,0,652,653,5,4,0,0,653,
		119,1,0,0,0,92,123,137,142,149,154,162,169,177,179,187,193,198,208,213,
		218,223,231,233,239,247,255,257,262,269,276,282,284,289,296,300,305,310,
		315,319,324,328,333,337,342,347,358,363,372,381,388,394,401,405,411,415,
		421,426,431,434,437,442,449,451,461,463,468,475,483,490,498,505,511,514,
		520,525,533,541,550,556,563,565,572,578,581,586,588,593,599,601,606,612,
		614,619,626,634,639,649
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
