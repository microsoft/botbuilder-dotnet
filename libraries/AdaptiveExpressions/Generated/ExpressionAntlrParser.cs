//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from parser/ExpressionAntlrParser.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

#pragma warning disable 3021
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class ExpressionAntlrParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		STRING_INTERPOLATION_START=1, PLUS=2, SUBSTRACT=3, NON=4, XOR=5, ASTERISK=6, 
		SLASH=7, PERCENT=8, DOUBLE_EQUAL=9, NOT_EQUAL=10, SINGLE_AND=11, DOUBLE_AND=12, 
		DOUBLE_VERTICAL_CYLINDER=13, LESS_THAN=14, MORE_THAN=15, LESS_OR_EQUAl=16, 
		MORE_OR_EQUAL=17, OPEN_BRACKET=18, CLOSE_BRACKET=19, DOT=20, OPEN_SQUARE_BRACKET=21, 
		CLOSE_SQUARE_BRACKET=22, OPEN_CURLY_BRACKET=23, CLOSE_CURLY_BRACKET=24, 
		COMMA=25, COLON=26, ARROW=27, NULL_COALESCE=28, QUESTION_MARK=29, NUMBER=30, 
		WHITESPACE=31, IDENTIFIER=32, NEWLINE=33, STRING=34, INVALID_TOKEN_DEFAULT_MODE=35, 
		TEMPLATE=36, ESCAPE_CHARACTER=37, TEXT_CONTENT=38;
	public const int
		RULE_file = 0, RULE_expression = 1, RULE_primaryExpression = 2, RULE_stringInterpolation = 3, 
		RULE_textContent = 4, RULE_argsList = 5, RULE_lambda = 6, RULE_keyValuePairList = 7, 
		RULE_keyValuePair = 8, RULE_key = 9;
	public static readonly string[] ruleNames = {
		"file", "expression", "primaryExpression", "stringInterpolation", "textContent", 
		"argsList", "lambda", "keyValuePairList", "keyValuePair", "key"
	};

	private static readonly string[] _LiteralNames = {
		null, null, "'+'", "'-'", "'!'", "'^'", "'*'", "'/'", "'%'", "'=='", null, 
		"'&'", "'&&'", "'||'", "'<'", "'>'", "'<='", "'>='", "'('", "')'", "'.'", 
		"'['", "']'", "'{'", "'}'", "','", "':'", "'=>'", "'??'", "'?'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "STRING_INTERPOLATION_START", "PLUS", "SUBSTRACT", "NON", "XOR", 
		"ASTERISK", "SLASH", "PERCENT", "DOUBLE_EQUAL", "NOT_EQUAL", "SINGLE_AND", 
		"DOUBLE_AND", "DOUBLE_VERTICAL_CYLINDER", "LESS_THAN", "MORE_THAN", "LESS_OR_EQUAl", 
		"MORE_OR_EQUAL", "OPEN_BRACKET", "CLOSE_BRACKET", "DOT", "OPEN_SQUARE_BRACKET", 
		"CLOSE_SQUARE_BRACKET", "OPEN_CURLY_BRACKET", "CLOSE_CURLY_BRACKET", "COMMA", 
		"COLON", "ARROW", "NULL_COALESCE", "QUESTION_MARK", "NUMBER", "WHITESPACE", 
		"IDENTIFIER", "NEWLINE", "STRING", "INVALID_TOKEN_DEFAULT_MODE", "TEMPLATE", 
		"ESCAPE_CHARACTER", "TEXT_CONTENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ExpressionAntlrParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static ExpressionAntlrParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ExpressionAntlrParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ExpressionAntlrParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class FileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(ExpressionAntlrParser.Eof, 0); }
		public FileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
			if (typedListener != null) typedListener.EnterFile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
			if (typedListener != null) typedListener.ExitFile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionAntlrParserVisitor<TResult> typedVisitor = visitor as IExpressionAntlrParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileContext file() {
		FileContext _localctx = new FileContext(Context, State);
		EnterRule(_localctx, 0, RULE_file);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 20;
			expression(0);
			State = 21;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class UnaryOpExpContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NON() { return GetToken(ExpressionAntlrParser.NON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBSTRACT() { return GetToken(ExpressionAntlrParser.SUBSTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(ExpressionAntlrParser.PLUS, 0); }
		public UnaryOpExpContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
			if (typedListener != null) typedListener.EnterUnaryOpExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
			if (typedListener != null) typedListener.ExitUnaryOpExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionAntlrParserVisitor<TResult> typedVisitor = visitor as IExpressionAntlrParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryOpExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinaryOpExpContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XOR() { return GetToken(ExpressionAntlrParser.XOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASTERISK() { return GetToken(ExpressionAntlrParser.ASTERISK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLASH() { return GetToken(ExpressionAntlrParser.SLASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT() { return GetToken(ExpressionAntlrParser.PERCENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(ExpressionAntlrParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBSTRACT() { return GetToken(ExpressionAntlrParser.SUBSTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_EQUAL() { return GetToken(ExpressionAntlrParser.DOUBLE_EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_EQUAL() { return GetToken(ExpressionAntlrParser.NOT_EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SINGLE_AND() { return GetToken(ExpressionAntlrParser.SINGLE_AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_THAN() { return GetToken(ExpressionAntlrParser.LESS_THAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_OR_EQUAl() { return GetToken(ExpressionAntlrParser.LESS_OR_EQUAl, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MORE_THAN() { return GetToken(ExpressionAntlrParser.MORE_THAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MORE_OR_EQUAL() { return GetToken(ExpressionAntlrParser.MORE_OR_EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_AND() { return GetToken(ExpressionAntlrParser.DOUBLE_AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_VERTICAL_CYLINDER() { return GetToken(ExpressionAntlrParser.DOUBLE_VERTICAL_CYLINDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_COALESCE() { return GetToken(ExpressionAntlrParser.NULL_COALESCE, 0); }
		public BinaryOpExpContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
			if (typedListener != null) typedListener.EnterBinaryOpExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
			if (typedListener != null) typedListener.ExitBinaryOpExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionAntlrParserVisitor<TResult> typedVisitor = visitor as IExpressionAntlrParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryOpExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrimaryExpContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		public PrimaryExpContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
			if (typedListener != null) typedListener.EnterPrimaryExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
			if (typedListener != null) typedListener.ExitPrimaryExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionAntlrParserVisitor<TResult> typedVisitor = visitor as IExpressionAntlrParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TripleOpExpContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUESTION_MARK() { return GetToken(ExpressionAntlrParser.QUESTION_MARK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(ExpressionAntlrParser.COLON, 0); }
		public TripleOpExpContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
			if (typedListener != null) typedListener.EnterTripleOpExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
			if (typedListener != null) typedListener.ExitTripleOpExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionAntlrParserVisitor<TResult> typedVisitor = visitor as IExpressionAntlrParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTripleOpExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 2;
		EnterRecursionRule(_localctx, 2, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 27;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PLUS:
			case SUBSTRACT:
			case NON:
				{
				_localctx = new UnaryOpExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 24;
				_la = TokenStream.LA(1);
				if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 28L) != 0) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 25;
				expression(12);
				}
				break;
			case STRING_INTERPOLATION_START:
			case OPEN_BRACKET:
			case OPEN_SQUARE_BRACKET:
			case OPEN_CURLY_BRACKET:
			case NUMBER:
			case IDENTIFIER:
			case STRING:
				{
				_localctx = new PrimaryExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 26;
				primaryExpression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 64;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 62;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
					case 1:
						{
						_localctx = new BinaryOpExpContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 29;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 30;
						Match(XOR);
						State = 31;
						expression(11);
						}
						break;
					case 2:
						{
						_localctx = new BinaryOpExpContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 32;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 33;
						_la = TokenStream.LA(1);
						if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 448L) != 0) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 34;
						expression(11);
						}
						break;
					case 3:
						{
						_localctx = new BinaryOpExpContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 35;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 36;
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS || _la==SUBSTRACT) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 37;
						expression(10);
						}
						break;
					case 4:
						{
						_localctx = new BinaryOpExpContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 38;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 39;
						_la = TokenStream.LA(1);
						if ( !(_la==DOUBLE_EQUAL || _la==NOT_EQUAL) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 40;
						expression(9);
						}
						break;
					case 5:
						{
						_localctx = new BinaryOpExpContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 41;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						{
						State = 42;
						Match(SINGLE_AND);
						}
						State = 43;
						expression(8);
						}
						break;
					case 6:
						{
						_localctx = new BinaryOpExpContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 44;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 45;
						_la = TokenStream.LA(1);
						if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 245760L) != 0) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 46;
						expression(7);
						}
						break;
					case 7:
						{
						_localctx = new BinaryOpExpContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 47;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 48;
						Match(DOUBLE_AND);
						State = 49;
						expression(6);
						}
						break;
					case 8:
						{
						_localctx = new BinaryOpExpContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 50;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 51;
						Match(DOUBLE_VERTICAL_CYLINDER);
						State = 52;
						expression(5);
						}
						break;
					case 9:
						{
						_localctx = new BinaryOpExpContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 53;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 54;
						Match(NULL_COALESCE);
						State = 55;
						expression(4);
						}
						break;
					case 10:
						{
						_localctx = new TripleOpExpContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 56;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 57;
						Match(QUESTION_MARK);
						State = 58;
						expression(0);
						State = 59;
						Match(COLON);
						State = 60;
						expression(3);
						}
						break;
					}
					} 
				}
				State = 66;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PrimaryExpressionContext : ParserRuleContext {
		public PrimaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryExpression; } }
	 
		public PrimaryExpressionContext() { }
		public virtual void CopyFrom(PrimaryExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FuncInvokeExpContext : PrimaryExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(ExpressionAntlrParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(ExpressionAntlrParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NON() { return GetToken(ExpressionAntlrParser.NON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgsListContext argsList() {
			return GetRuleContext<ArgsListContext>(0);
		}
		public FuncInvokeExpContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
			if (typedListener != null) typedListener.EnterFuncInvokeExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
			if (typedListener != null) typedListener.ExitFuncInvokeExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionAntlrParserVisitor<TResult> typedVisitor = visitor as IExpressionAntlrParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncInvokeExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdAtomContext : PrimaryExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ExpressionAntlrParser.IDENTIFIER, 0); }
		public IdAtomContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
			if (typedListener != null) typedListener.EnterIdAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
			if (typedListener != null) typedListener.ExitIdAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionAntlrParserVisitor<TResult> typedVisitor = visitor as IExpressionAntlrParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class JsonCreationExpContext : PrimaryExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_CURLY_BRACKET() { return GetToken(ExpressionAntlrParser.OPEN_CURLY_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_CURLY_BRACKET() { return GetToken(ExpressionAntlrParser.CLOSE_CURLY_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public KeyValuePairListContext keyValuePairList() {
			return GetRuleContext<KeyValuePairListContext>(0);
		}
		public JsonCreationExpContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
			if (typedListener != null) typedListener.EnterJsonCreationExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
			if (typedListener != null) typedListener.ExitJsonCreationExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionAntlrParserVisitor<TResult> typedVisitor = visitor as IExpressionAntlrParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonCreationExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringAtomContext : PrimaryExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(ExpressionAntlrParser.STRING, 0); }
		public StringAtomContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
			if (typedListener != null) typedListener.EnterStringAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
			if (typedListener != null) typedListener.ExitStringAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionAntlrParserVisitor<TResult> typedVisitor = visitor as IExpressionAntlrParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IndexAccessExpContext : PrimaryExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_SQUARE_BRACKET() { return GetToken(ExpressionAntlrParser.OPEN_SQUARE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_SQUARE_BRACKET() { return GetToken(ExpressionAntlrParser.CLOSE_SQUARE_BRACKET, 0); }
		public IndexAccessExpContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
			if (typedListener != null) typedListener.EnterIndexAccessExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
			if (typedListener != null) typedListener.ExitIndexAccessExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionAntlrParserVisitor<TResult> typedVisitor = visitor as IExpressionAntlrParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexAccessExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringInterpolationAtomContext : PrimaryExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringInterpolationContext stringInterpolation() {
			return GetRuleContext<StringInterpolationContext>(0);
		}
		public StringInterpolationAtomContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
			if (typedListener != null) typedListener.EnterStringInterpolationAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
			if (typedListener != null) typedListener.ExitStringInterpolationAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionAntlrParserVisitor<TResult> typedVisitor = visitor as IExpressionAntlrParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringInterpolationAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MemberAccessExpContext : PrimaryExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(ExpressionAntlrParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ExpressionAntlrParser.IDENTIFIER, 0); }
		public MemberAccessExpContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
			if (typedListener != null) typedListener.EnterMemberAccessExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
			if (typedListener != null) typedListener.ExitMemberAccessExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionAntlrParserVisitor<TResult> typedVisitor = visitor as IExpressionAntlrParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberAccessExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesisExpContext : PrimaryExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(ExpressionAntlrParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(ExpressionAntlrParser.CLOSE_BRACKET, 0); }
		public ParenthesisExpContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
			if (typedListener != null) typedListener.EnterParenthesisExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
			if (typedListener != null) typedListener.ExitParenthesisExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionAntlrParserVisitor<TResult> typedVisitor = visitor as IExpressionAntlrParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesisExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumericAtomContext : PrimaryExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(ExpressionAntlrParser.NUMBER, 0); }
		public NumericAtomContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
			if (typedListener != null) typedListener.EnterNumericAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
			if (typedListener != null) typedListener.ExitNumericAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionAntlrParserVisitor<TResult> typedVisitor = visitor as IExpressionAntlrParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumericAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArrayCreationExpContext : PrimaryExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_SQUARE_BRACKET() { return GetToken(ExpressionAntlrParser.OPEN_SQUARE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_SQUARE_BRACKET() { return GetToken(ExpressionAntlrParser.CLOSE_SQUARE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgsListContext argsList() {
			return GetRuleContext<ArgsListContext>(0);
		}
		public ArrayCreationExpContext(PrimaryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
			if (typedListener != null) typedListener.EnterArrayCreationExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
			if (typedListener != null) typedListener.ExitArrayCreationExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionAntlrParserVisitor<TResult> typedVisitor = visitor as IExpressionAntlrParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayCreationExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryExpressionContext primaryExpression() {
		return primaryExpression(0);
	}

	private PrimaryExpressionContext primaryExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		PrimaryExpressionContext _localctx = new PrimaryExpressionContext(Context, _parentState);
		PrimaryExpressionContext _prevctx = _localctx;
		int _startState = 4;
		EnterRecursionRule(_localctx, 4, RULE_primaryExpression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 86;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_BRACKET:
				{
				_localctx = new ParenthesisExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 68;
				Match(OPEN_BRACKET);
				State = 69;
				expression(0);
				State = 70;
				Match(CLOSE_BRACKET);
				}
				break;
			case OPEN_SQUARE_BRACKET:
				{
				_localctx = new ArrayCreationExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 72;
				Match(OPEN_SQUARE_BRACKET);
				State = 74;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((_la) & ~0x3f) == 0 && ((1L << _la) & 22559326238L) != 0) {
					{
					State = 73;
					argsList();
					}
				}

				State = 76;
				Match(CLOSE_SQUARE_BRACKET);
				}
				break;
			case OPEN_CURLY_BRACKET:
				{
				_localctx = new JsonCreationExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 77;
				Match(OPEN_CURLY_BRACKET);
				State = 79;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IDENTIFIER || _la==STRING) {
					{
					State = 78;
					keyValuePairList();
					}
				}

				State = 81;
				Match(CLOSE_CURLY_BRACKET);
				}
				break;
			case NUMBER:
				{
				_localctx = new NumericAtomContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 82;
				Match(NUMBER);
				}
				break;
			case STRING:
				{
				_localctx = new StringAtomContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 83;
				Match(STRING);
				}
				break;
			case IDENTIFIER:
				{
				_localctx = new IdAtomContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 84;
				Match(IDENTIFIER);
				}
				break;
			case STRING_INTERPOLATION_START:
				{
				_localctx = new StringInterpolationAtomContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 85;
				stringInterpolation();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 107;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 105;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
					case 1:
						{
						_localctx = new MemberAccessExpContext(new PrimaryExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_primaryExpression);
						State = 88;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 89;
						Match(DOT);
						State = 90;
						Match(IDENTIFIER);
						}
						break;
					case 2:
						{
						_localctx = new FuncInvokeExpContext(new PrimaryExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_primaryExpression);
						State = 91;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 93;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NON) {
							{
							State = 92;
							Match(NON);
							}
						}

						State = 95;
						Match(OPEN_BRACKET);
						State = 97;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (((_la) & ~0x3f) == 0 && ((1L << _la) & 22559326238L) != 0) {
							{
							State = 96;
							argsList();
							}
						}

						State = 99;
						Match(CLOSE_BRACKET);
						}
						break;
					case 3:
						{
						_localctx = new IndexAccessExpContext(new PrimaryExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_primaryExpression);
						State = 100;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 101;
						Match(OPEN_SQUARE_BRACKET);
						State = 102;
						expression(0);
						State = 103;
						Match(CLOSE_SQUARE_BRACKET);
						}
						break;
					}
					} 
				}
				State = 109;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class StringInterpolationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING_INTERPOLATION_START() { return GetTokens(ExpressionAntlrParser.STRING_INTERPOLATION_START); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_INTERPOLATION_START(int i) {
			return GetToken(ExpressionAntlrParser.STRING_INTERPOLATION_START, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ESCAPE_CHARACTER() { return GetTokens(ExpressionAntlrParser.ESCAPE_CHARACTER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE_CHARACTER(int i) {
			return GetToken(ExpressionAntlrParser.ESCAPE_CHARACTER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TEMPLATE() { return GetTokens(ExpressionAntlrParser.TEMPLATE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPLATE(int i) {
			return GetToken(ExpressionAntlrParser.TEMPLATE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TextContentContext[] textContent() {
			return GetRuleContexts<TextContentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TextContentContext textContent(int i) {
			return GetRuleContext<TextContentContext>(i);
		}
		public StringInterpolationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringInterpolation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
			if (typedListener != null) typedListener.EnterStringInterpolation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
			if (typedListener != null) typedListener.ExitStringInterpolation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionAntlrParserVisitor<TResult> typedVisitor = visitor as IExpressionAntlrParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringInterpolation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringInterpolationContext stringInterpolation() {
		StringInterpolationContext _localctx = new StringInterpolationContext(Context, State);
		EnterRule(_localctx, 6, RULE_stringInterpolation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 110;
			Match(STRING_INTERPOLATION_START);
			State = 116;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 481036337152L) != 0) {
				{
				State = 114;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ESCAPE_CHARACTER:
					{
					State = 111;
					Match(ESCAPE_CHARACTER);
					}
					break;
				case TEMPLATE:
					{
					State = 112;
					Match(TEMPLATE);
					}
					break;
				case TEXT_CONTENT:
					{
					State = 113;
					textContent();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 118;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 119;
			Match(STRING_INTERPOLATION_START);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TextContentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TEXT_CONTENT() { return GetTokens(ExpressionAntlrParser.TEXT_CONTENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT_CONTENT(int i) {
			return GetToken(ExpressionAntlrParser.TEXT_CONTENT, i);
		}
		public TextContentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_textContent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
			if (typedListener != null) typedListener.EnterTextContent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
			if (typedListener != null) typedListener.ExitTextContent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionAntlrParserVisitor<TResult> typedVisitor = visitor as IExpressionAntlrParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTextContent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TextContentContext textContent() {
		TextContentContext _localctx = new TextContentContext(Context, State);
		EnterRule(_localctx, 8, RULE_textContent);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 122;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 121;
					Match(TEXT_CONTENT);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 124;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgsListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LambdaContext[] lambda() {
			return GetRuleContexts<LambdaContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LambdaContext lambda(int i) {
			return GetRuleContext<LambdaContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ExpressionAntlrParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ExpressionAntlrParser.COMMA, i);
		}
		public ArgsListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argsList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
			if (typedListener != null) typedListener.EnterArgsList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
			if (typedListener != null) typedListener.ExitArgsList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionAntlrParserVisitor<TResult> typedVisitor = visitor as IExpressionAntlrParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgsList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgsListContext argsList() {
		ArgsListContext _localctx = new ArgsListContext(Context, State);
		EnterRule(_localctx, 10, RULE_argsList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 128;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				{
				State = 126;
				lambda();
				}
				break;
			case 2:
				{
				State = 127;
				expression(0);
				}
				break;
			}
			State = 137;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 130;
				Match(COMMA);
				State = 133;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
				case 1:
					{
					State = 131;
					lambda();
					}
					break;
				case 2:
					{
					State = 132;
					expression(0);
					}
					break;
				}
				}
				}
				State = 139;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ExpressionAntlrParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW() { return GetToken(ExpressionAntlrParser.ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LambdaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambda; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
			if (typedListener != null) typedListener.EnterLambda(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
			if (typedListener != null) typedListener.ExitLambda(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionAntlrParserVisitor<TResult> typedVisitor = visitor as IExpressionAntlrParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambda(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LambdaContext lambda() {
		LambdaContext _localctx = new LambdaContext(Context, State);
		EnterRule(_localctx, 12, RULE_lambda);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 140;
			Match(IDENTIFIER);
			State = 141;
			Match(ARROW);
			State = 142;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyValuePairListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public KeyValuePairContext[] keyValuePair() {
			return GetRuleContexts<KeyValuePairContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public KeyValuePairContext keyValuePair(int i) {
			return GetRuleContext<KeyValuePairContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ExpressionAntlrParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ExpressionAntlrParser.COMMA, i);
		}
		public KeyValuePairListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyValuePairList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
			if (typedListener != null) typedListener.EnterKeyValuePairList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
			if (typedListener != null) typedListener.ExitKeyValuePairList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionAntlrParserVisitor<TResult> typedVisitor = visitor as IExpressionAntlrParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyValuePairList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeyValuePairListContext keyValuePairList() {
		KeyValuePairListContext _localctx = new KeyValuePairListContext(Context, State);
		EnterRule(_localctx, 14, RULE_keyValuePairList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 144;
			keyValuePair();
			State = 149;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 145;
				Match(COMMA);
				State = 146;
				keyValuePair();
				}
				}
				State = 151;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyValuePairContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public KeyContext key() {
			return GetRuleContext<KeyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(ExpressionAntlrParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public KeyValuePairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyValuePair; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
			if (typedListener != null) typedListener.EnterKeyValuePair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
			if (typedListener != null) typedListener.ExitKeyValuePair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionAntlrParserVisitor<TResult> typedVisitor = visitor as IExpressionAntlrParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyValuePair(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeyValuePairContext keyValuePair() {
		KeyValuePairContext _localctx = new KeyValuePairContext(Context, State);
		EnterRule(_localctx, 16, RULE_keyValuePair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 152;
			key();
			State = 153;
			Match(COLON);
			State = 154;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ExpressionAntlrParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(ExpressionAntlrParser.STRING, 0); }
		public KeyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_key; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
			if (typedListener != null) typedListener.EnterKey(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionAntlrParserListener typedListener = listener as IExpressionAntlrParserListener;
			if (typedListener != null) typedListener.ExitKey(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionAntlrParserVisitor<TResult> typedVisitor = visitor as IExpressionAntlrParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKey(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeyContext key() {
		KeyContext _localctx = new KeyContext(Context, State);
		EnterRule(_localctx, 18, RULE_key);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 156;
			_la = TokenStream.LA(1);
			if ( !(_la==IDENTIFIER || _la==STRING) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 1: return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 2: return primaryExpression_sempred((PrimaryExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 11);
		case 1: return Precpred(Context, 10);
		case 2: return Precpred(Context, 9);
		case 3: return Precpred(Context, 8);
		case 4: return Precpred(Context, 7);
		case 5: return Precpred(Context, 6);
		case 6: return Precpred(Context, 5);
		case 7: return Precpred(Context, 4);
		case 8: return Precpred(Context, 3);
		case 9: return Precpred(Context, 2);
		}
		return true;
	}
	private bool primaryExpression_sempred(PrimaryExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 10: return Precpred(Context, 3);
		case 11: return Precpred(Context, 2);
		case 12: return Precpred(Context, 1);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,38,159,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,1,0,1,0,1,0,1,1,1,1,1,1,1,1,3,1,28,8,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,1,63,8,1,10,1,12,1,
		66,9,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,75,8,2,1,2,1,2,1,2,3,2,80,8,2,1,
		2,1,2,1,2,1,2,1,2,3,2,87,8,2,1,2,1,2,1,2,1,2,1,2,3,2,94,8,2,1,2,1,2,3,
		2,98,8,2,1,2,1,2,1,2,1,2,1,2,1,2,5,2,106,8,2,10,2,12,2,109,9,2,1,3,1,3,
		1,3,1,3,5,3,115,8,3,10,3,12,3,118,9,3,1,3,1,3,1,4,4,4,123,8,4,11,4,12,
		4,124,1,5,1,5,3,5,129,8,5,1,5,1,5,1,5,3,5,134,8,5,5,5,136,8,5,10,5,12,
		5,139,9,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,5,7,148,8,7,10,7,12,7,151,9,7,1,
		8,1,8,1,8,1,8,1,9,1,9,1,9,0,2,2,4,10,0,2,4,6,8,10,12,14,16,18,0,6,1,0,
		2,4,1,0,6,8,1,0,2,3,1,0,9,10,1,0,14,17,2,0,32,32,34,34,180,0,20,1,0,0,
		0,2,27,1,0,0,0,4,86,1,0,0,0,6,110,1,0,0,0,8,122,1,0,0,0,10,128,1,0,0,0,
		12,140,1,0,0,0,14,144,1,0,0,0,16,152,1,0,0,0,18,156,1,0,0,0,20,21,3,2,
		1,0,21,22,5,0,0,1,22,1,1,0,0,0,23,24,6,1,-1,0,24,25,7,0,0,0,25,28,3,2,
		1,12,26,28,3,4,2,0,27,23,1,0,0,0,27,26,1,0,0,0,28,64,1,0,0,0,29,30,10,
		11,0,0,30,31,5,5,0,0,31,63,3,2,1,11,32,33,10,10,0,0,33,34,7,1,0,0,34,63,
		3,2,1,11,35,36,10,9,0,0,36,37,7,2,0,0,37,63,3,2,1,10,38,39,10,8,0,0,39,
		40,7,3,0,0,40,63,3,2,1,9,41,42,10,7,0,0,42,43,5,11,0,0,43,63,3,2,1,8,44,
		45,10,6,0,0,45,46,7,4,0,0,46,63,3,2,1,7,47,48,10,5,0,0,48,49,5,12,0,0,
		49,63,3,2,1,6,50,51,10,4,0,0,51,52,5,13,0,0,52,63,3,2,1,5,53,54,10,3,0,
		0,54,55,5,28,0,0,55,63,3,2,1,4,56,57,10,2,0,0,57,58,5,29,0,0,58,59,3,2,
		1,0,59,60,5,26,0,0,60,61,3,2,1,3,61,63,1,0,0,0,62,29,1,0,0,0,62,32,1,0,
		0,0,62,35,1,0,0,0,62,38,1,0,0,0,62,41,1,0,0,0,62,44,1,0,0,0,62,47,1,0,
		0,0,62,50,1,0,0,0,62,53,1,0,0,0,62,56,1,0,0,0,63,66,1,0,0,0,64,62,1,0,
		0,0,64,65,1,0,0,0,65,3,1,0,0,0,66,64,1,0,0,0,67,68,6,2,-1,0,68,69,5,18,
		0,0,69,70,3,2,1,0,70,71,5,19,0,0,71,87,1,0,0,0,72,74,5,21,0,0,73,75,3,
		10,5,0,74,73,1,0,0,0,74,75,1,0,0,0,75,76,1,0,0,0,76,87,5,22,0,0,77,79,
		5,23,0,0,78,80,3,14,7,0,79,78,1,0,0,0,79,80,1,0,0,0,80,81,1,0,0,0,81,87,
		5,24,0,0,82,87,5,30,0,0,83,87,5,34,0,0,84,87,5,32,0,0,85,87,3,6,3,0,86,
		67,1,0,0,0,86,72,1,0,0,0,86,77,1,0,0,0,86,82,1,0,0,0,86,83,1,0,0,0,86,
		84,1,0,0,0,86,85,1,0,0,0,87,107,1,0,0,0,88,89,10,3,0,0,89,90,5,20,0,0,
		90,106,5,32,0,0,91,93,10,2,0,0,92,94,5,4,0,0,93,92,1,0,0,0,93,94,1,0,0,
		0,94,95,1,0,0,0,95,97,5,18,0,0,96,98,3,10,5,0,97,96,1,0,0,0,97,98,1,0,
		0,0,98,99,1,0,0,0,99,106,5,19,0,0,100,101,10,1,0,0,101,102,5,21,0,0,102,
		103,3,2,1,0,103,104,5,22,0,0,104,106,1,0,0,0,105,88,1,0,0,0,105,91,1,0,
		0,0,105,100,1,0,0,0,106,109,1,0,0,0,107,105,1,0,0,0,107,108,1,0,0,0,108,
		5,1,0,0,0,109,107,1,0,0,0,110,116,5,1,0,0,111,115,5,37,0,0,112,115,5,36,
		0,0,113,115,3,8,4,0,114,111,1,0,0,0,114,112,1,0,0,0,114,113,1,0,0,0,115,
		118,1,0,0,0,116,114,1,0,0,0,116,117,1,0,0,0,117,119,1,0,0,0,118,116,1,
		0,0,0,119,120,5,1,0,0,120,7,1,0,0,0,121,123,5,38,0,0,122,121,1,0,0,0,123,
		124,1,0,0,0,124,122,1,0,0,0,124,125,1,0,0,0,125,9,1,0,0,0,126,129,3,12,
		6,0,127,129,3,2,1,0,128,126,1,0,0,0,128,127,1,0,0,0,129,137,1,0,0,0,130,
		133,5,25,0,0,131,134,3,12,6,0,132,134,3,2,1,0,133,131,1,0,0,0,133,132,
		1,0,0,0,134,136,1,0,0,0,135,130,1,0,0,0,136,139,1,0,0,0,137,135,1,0,0,
		0,137,138,1,0,0,0,138,11,1,0,0,0,139,137,1,0,0,0,140,141,5,32,0,0,141,
		142,5,27,0,0,142,143,3,2,1,0,143,13,1,0,0,0,144,149,3,16,8,0,145,146,5,
		25,0,0,146,148,3,16,8,0,147,145,1,0,0,0,148,151,1,0,0,0,149,147,1,0,0,
		0,149,150,1,0,0,0,150,15,1,0,0,0,151,149,1,0,0,0,152,153,3,18,9,0,153,
		154,5,26,0,0,154,155,3,2,1,0,155,17,1,0,0,0,156,157,7,5,0,0,157,19,1,0,
		0,0,17,27,62,64,74,79,86,93,97,105,107,114,116,124,128,133,137,149
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
