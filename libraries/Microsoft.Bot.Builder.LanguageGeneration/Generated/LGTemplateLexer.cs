//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from LGTemplateLexer.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

#pragma warning disable 3021
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class LGTemplateLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		WS=1, NEWLINE=2, COMMENTS=3, DASH=4, LEFT_SQUARE_BRACKET=5, INVALID_TOKEN=6, 
		WS_IN_BODY=7, MULTILINE_PREFIX=8, NEWLINE_IN_BODY=9, IF=10, ELSEIF=11, 
		ELSE=12, SWITCH=13, CASE=14, DEFAULT=15, ESCAPE_CHARACTER=16, EXPRESSION=17, 
		TEXT=18, MULTILINE_SUFFIX=19, WS_IN_STRUCTURE_NAME=20, NEWLINE_IN_STRUCTURE_NAME=21, 
		STRUCTURE_NAME=22, TEXT_IN_STRUCTURE_NAME=23, STRUCTURED_COMMENTS=24, 
		WS_IN_STRUCTURE_BODY=25, STRUCTURED_NEWLINE=26, STRUCTURED_BODY_END=27, 
		STRUCTURE_IDENTIFIER=28, STRUCTURE_EQUALS=29, STRUCTURE_OR_MARK=30, ESCAPE_CHARACTER_IN_STRUCTURE_BODY=31, 
		EXPRESSION_IN_STRUCTURE_BODY=32, TEXT_IN_STRUCTURE_BODY=33;
	public const int
		NORMAL_TEMPLATE_BODY_MODE=1, MULTILINE_MODE=2, STRUCTURE_NAME_MODE=3, 
		STRUCTURE_BODY_MODE=4;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE", "NORMAL_TEMPLATE_BODY_MODE", "MULTILINE_MODE", "STRUCTURE_NAME_MODE", 
		"STRUCTURE_BODY_MODE"
	};

	public static readonly string[] ruleNames = {
		"A", "C", "D", "E", "F", "H", "I", "L", "S", "T", "U", "W", "LETTER", 
		"NUMBER", "WHITESPACE", "STRING_LITERAL", "STRING_INTERPOLATION", "ESCAPE_CHARACTER_FRAGMENT", 
		"IDENTIFIER", "OBJECT_DEFINITION", "EXPRESSION_FRAGMENT", "NEWLINE_FRAGMENT", 
		"WS", "NEWLINE", "COMMENTS", "DASH", "LEFT_SQUARE_BRACKET", "INVALID_TOKEN", 
		"WS_IN_BODY", "MULTILINE_PREFIX", "NEWLINE_IN_BODY", "IF", "ELSEIF", "ELSE", 
		"SWITCH", "CASE", "DEFAULT", "ESCAPE_CHARACTER", "EXPRESSION", "TEXT", 
		"MULTILINE_SUFFIX", "MULTILINE_ESCAPE_CHARACTER", "MULTILINE_EXPRESSION", 
		"MULTILINE_TEXT", "WS_IN_STRUCTURE_NAME", "NEWLINE_IN_STRUCTURE_NAME", 
		"STRUCTURE_NAME", "TEXT_IN_STRUCTURE_NAME", "STRUCTURED_COMMENTS", "WS_IN_STRUCTURE_BODY", 
		"STRUCTURED_NEWLINE", "STRUCTURED_BODY_END", "STRUCTURE_IDENTIFIER", "STRUCTURE_EQUALS", 
		"STRUCTURE_OR_MARK", "ESCAPE_CHARACTER_IN_STRUCTURE_BODY", "EXPRESSION_IN_STRUCTURE_BODY", 
		"TEXT_IN_STRUCTURE_BODY"
	};


	  bool ignoreWS = true; // usually we ignore whitespace, but inside template, whitespace is significant
	  bool beginOfTemplateBody = true; // whether we are at the begining of template body
	  bool inMultiline = false; // whether we are in multiline
	  bool beginOfTemplateLine = false;// weather we are at the begining of template string
	  bool inStructuredValue = false; // weather we are in the structure value
	  bool beginOfStructureProperty = false; // weather we are at the begining of structure property


	public LGTemplateLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public LGTemplateLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, "'|'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "WS", "NEWLINE", "COMMENTS", "DASH", "LEFT_SQUARE_BRACKET", "INVALID_TOKEN", 
		"WS_IN_BODY", "MULTILINE_PREFIX", "NEWLINE_IN_BODY", "IF", "ELSEIF", "ELSE", 
		"SWITCH", "CASE", "DEFAULT", "ESCAPE_CHARACTER", "EXPRESSION", "TEXT", 
		"MULTILINE_SUFFIX", "WS_IN_STRUCTURE_NAME", "NEWLINE_IN_STRUCTURE_NAME", 
		"STRUCTURE_NAME", "TEXT_IN_STRUCTURE_NAME", "STRUCTURED_COMMENTS", "WS_IN_STRUCTURE_BODY", 
		"STRUCTURED_NEWLINE", "STRUCTURED_BODY_END", "STRUCTURE_IDENTIFIER", "STRUCTURE_EQUALS", 
		"STRUCTURE_OR_MARK", "ESCAPE_CHARACTER_IN_STRUCTURE_BODY", "EXPRESSION_IN_STRUCTURE_BODY", 
		"TEXT_IN_STRUCTURE_BODY"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "LGTemplateLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static LGTemplateLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	public override void Action(RuleContext _localctx, int ruleIndex, int actionIndex) {
		switch (ruleIndex) {
		case 25 : DASH_action(_localctx, actionIndex); break;
		case 26 : LEFT_SQUARE_BRACKET_action(_localctx, actionIndex); break;
		case 27 : INVALID_TOKEN_action(_localctx, actionIndex); break;
		case 29 : MULTILINE_PREFIX_action(_localctx, actionIndex); break;
		case 30 : NEWLINE_IN_BODY_action(_localctx, actionIndex); break;
		case 31 : IF_action(_localctx, actionIndex); break;
		case 32 : ELSEIF_action(_localctx, actionIndex); break;
		case 33 : ELSE_action(_localctx, actionIndex); break;
		case 34 : SWITCH_action(_localctx, actionIndex); break;
		case 35 : CASE_action(_localctx, actionIndex); break;
		case 36 : DEFAULT_action(_localctx, actionIndex); break;
		case 37 : ESCAPE_CHARACTER_action(_localctx, actionIndex); break;
		case 38 : EXPRESSION_action(_localctx, actionIndex); break;
		case 39 : TEXT_action(_localctx, actionIndex); break;
		case 40 : MULTILINE_SUFFIX_action(_localctx, actionIndex); break;
		case 45 : NEWLINE_IN_STRUCTURE_NAME_action(_localctx, actionIndex); break;
		case 50 : STRUCTURED_NEWLINE_action(_localctx, actionIndex); break;
		case 52 : STRUCTURE_IDENTIFIER_action(_localctx, actionIndex); break;
		case 53 : STRUCTURE_EQUALS_action(_localctx, actionIndex); break;
		case 54 : STRUCTURE_OR_MARK_action(_localctx, actionIndex); break;
		case 55 : ESCAPE_CHARACTER_IN_STRUCTURE_BODY_action(_localctx, actionIndex); break;
		case 56 : EXPRESSION_IN_STRUCTURE_BODY_action(_localctx, actionIndex); break;
		case 57 : TEXT_IN_STRUCTURE_BODY_action(_localctx, actionIndex); break;
		}
	}
	private void DASH_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 0:  beginOfTemplateLine = true; beginOfTemplateBody = false;  break;
		}
	}
	private void LEFT_SQUARE_BRACKET_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 1: beginOfTemplateBody = false; break;
		}
	}
	private void INVALID_TOKEN_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 2:  beginOfTemplateBody = false;  break;
		}
	}
	private void MULTILINE_PREFIX_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 3:  inMultiline = true; beginOfTemplateLine = false; break;
		}
	}
	private void NEWLINE_IN_BODY_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 4:  ignoreWS = true; break;
		}
	}
	private void IF_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 5:  ignoreWS = true; beginOfTemplateLine = false; break;
		}
	}
	private void ELSEIF_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 6:  ignoreWS = true; beginOfTemplateLine = false; break;
		}
	}
	private void ELSE_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 7:  ignoreWS = true; beginOfTemplateLine = false; break;
		}
	}
	private void SWITCH_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 8:  ignoreWS = true; beginOfTemplateLine = false; break;
		}
	}
	private void CASE_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 9:  ignoreWS = true; beginOfTemplateLine = false; break;
		}
	}
	private void DEFAULT_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 10:  ignoreWS = true; beginOfTemplateLine = false; break;
		}
	}
	private void ESCAPE_CHARACTER_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 11:  ignoreWS = false; beginOfTemplateLine = false; break;
		}
	}
	private void EXPRESSION_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 12:  ignoreWS = false; beginOfTemplateLine = false; break;
		}
	}
	private void TEXT_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 13:  ignoreWS = false; beginOfTemplateLine = false; break;
		}
	}
	private void MULTILINE_SUFFIX_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 14:  inMultiline = false;  break;
		}
	}
	private void NEWLINE_IN_STRUCTURE_NAME_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 15:  ignoreWS = true; break;
		case 16: beginOfStructureProperty = true; break;
		}
	}
	private void STRUCTURED_NEWLINE_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 17:  ignoreWS = true; inStructuredValue = false; beginOfStructureProperty = true; break;
		}
	}
	private void STRUCTURE_IDENTIFIER_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 18: beginOfStructureProperty = false; break;
		}
	}
	private void STRUCTURE_EQUALS_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 19: inStructuredValue = true; break;
		}
	}
	private void STRUCTURE_OR_MARK_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 20:  ignoreWS = true;  break;
		}
	}
	private void ESCAPE_CHARACTER_IN_STRUCTURE_BODY_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 21:  ignoreWS = false;  break;
		}
	}
	private void EXPRESSION_IN_STRUCTURE_BODY_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 22:  ignoreWS = false;  break;
		}
	}
	private void TEXT_IN_STRUCTURE_BODY_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 23:  ignoreWS = false; beginOfStructureProperty = false; break;
		}
	}
	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 26 : return LEFT_SQUARE_BRACKET_sempred(_localctx, predIndex);
		case 28 : return WS_IN_BODY_sempred(_localctx, predIndex);
		case 29 : return MULTILINE_PREFIX_sempred(_localctx, predIndex);
		case 31 : return IF_sempred(_localctx, predIndex);
		case 32 : return ELSEIF_sempred(_localctx, predIndex);
		case 33 : return ELSE_sempred(_localctx, predIndex);
		case 34 : return SWITCH_sempred(_localctx, predIndex);
		case 35 : return CASE_sempred(_localctx, predIndex);
		case 36 : return DEFAULT_sempred(_localctx, predIndex);
		case 48 : return STRUCTURED_COMMENTS_sempred(_localctx, predIndex);
		case 49 : return WS_IN_STRUCTURE_BODY_sempred(_localctx, predIndex);
		case 51 : return STRUCTURED_BODY_END_sempred(_localctx, predIndex);
		case 52 : return STRUCTURE_IDENTIFIER_sempred(_localctx, predIndex);
		case 53 : return STRUCTURE_EQUALS_sempred(_localctx, predIndex);
		}
		return true;
	}
	private bool LEFT_SQUARE_BRACKET_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return  beginOfTemplateBody ;
		}
		return true;
	}
	private bool WS_IN_BODY_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return ignoreWS;
		}
		return true;
	}
	private bool MULTILINE_PREFIX_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return  !inMultiline  && beginOfTemplateLine ;
		}
		return true;
	}
	private bool IF_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return beginOfTemplateLine;
		}
		return true;
	}
	private bool ELSEIF_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return beginOfTemplateLine;
		}
		return true;
	}
	private bool ELSE_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 5: return beginOfTemplateLine;
		}
		return true;
	}
	private bool SWITCH_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 6: return beginOfTemplateLine;
		}
		return true;
	}
	private bool CASE_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 7: return beginOfTemplateLine;
		}
		return true;
	}
	private bool DEFAULT_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 8: return beginOfTemplateLine;
		}
		return true;
	}
	private bool STRUCTURED_COMMENTS_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 9: return  !inStructuredValue && beginOfStructureProperty;
		}
		return true;
	}
	private bool WS_IN_STRUCTURE_BODY_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 10: return ignoreWS;
		}
		return true;
	}
	private bool STRUCTURED_BODY_END_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 11: return !inStructuredValue;
		}
		return true;
	}
	private bool STRUCTURE_IDENTIFIER_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 12: return  !inStructuredValue && beginOfStructureProperty;
		}
		return true;
	}
	private bool STRUCTURE_EQUALS_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 13: return !inStructuredValue;
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,0,33,521,6,-1,6,-1,6,-1,6,-1,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
		4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,
		7,12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,
		7,19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,
		7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,
		7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,
		7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,
		7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,
		7,54,2,55,7,55,2,56,7,56,2,57,7,57,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,
		1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,
		12,1,13,1,13,1,14,1,14,1,15,1,15,1,15,1,15,5,15,156,8,15,10,15,12,15,159,
		9,15,1,15,1,15,1,15,1,15,1,15,5,15,166,8,15,10,15,12,15,169,9,15,1,15,
		3,15,172,8,15,1,16,1,16,1,16,1,16,5,16,178,8,16,10,16,12,16,181,9,16,1,
		16,1,16,1,17,1,17,3,17,187,8,17,1,18,1,18,1,18,3,18,192,8,18,1,18,1,18,
		1,18,5,18,197,8,18,10,18,12,18,200,9,18,1,19,1,19,1,19,1,19,1,19,5,19,
		207,8,19,10,19,12,19,210,9,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,
		4,20,220,8,20,11,20,12,20,221,1,20,3,20,225,8,20,1,21,3,21,228,8,21,1,
		21,1,21,1,22,4,22,233,8,22,11,22,12,22,234,1,22,1,22,1,23,1,23,1,23,1,
		23,1,24,1,24,5,24,245,8,24,10,24,12,24,248,9,24,1,24,1,24,1,25,1,25,1,
		25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,
		28,5,28,269,8,28,10,28,12,28,272,9,28,1,28,1,28,1,29,1,29,1,29,1,29,1,
		29,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,31,5,
		31,294,8,31,10,31,12,31,297,9,31,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,
		32,1,32,5,32,308,8,32,10,32,12,32,311,9,32,1,32,1,32,1,32,5,32,316,8,32,
		10,32,12,32,319,9,32,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,33,5,33,
		330,8,33,10,33,12,33,333,9,33,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,
		1,34,1,34,1,34,5,34,346,8,34,10,34,12,34,349,9,34,1,34,1,34,1,34,1,34,
		1,35,1,35,1,35,1,35,1,35,5,35,360,8,35,10,35,12,35,363,9,35,1,35,1,35,
		1,35,1,35,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,5,36,377,8,36,10,36,
		12,36,380,9,36,1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,38,1,38,1,38,1,39,
		4,39,393,8,39,11,39,12,39,394,1,39,1,39,1,40,1,40,1,40,1,40,1,40,1,40,
		1,40,1,40,1,41,1,41,1,41,1,41,1,42,1,42,1,42,1,42,1,43,1,43,4,43,417,8,
		43,11,43,12,43,418,1,43,1,43,1,44,4,44,424,8,44,11,44,12,44,425,1,44,1,
		44,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,46,1,46,1,46,3,46,440,8,46,1,46,
		1,46,1,46,5,46,445,8,46,10,46,12,46,448,9,46,1,47,4,47,451,8,47,11,47,
		12,47,452,1,48,1,48,5,48,457,8,48,10,48,12,48,460,9,48,1,48,1,48,1,48,
		1,48,1,48,1,49,1,49,1,49,5,49,470,8,49,10,49,12,49,473,9,49,1,49,1,49,
		1,50,1,50,1,50,1,51,1,51,1,51,1,51,1,51,1,51,1,52,1,52,1,52,3,52,489,8,
		52,1,52,1,52,1,52,5,52,494,8,52,10,52,12,52,497,9,52,1,52,1,52,1,52,1,
		53,1,53,1,53,1,53,1,54,1,54,1,54,1,55,1,55,1,55,1,56,1,56,1,56,1,57,4,
		57,516,8,57,11,57,12,57,517,1,57,1,57,7,157,167,179,394,418,452,517,0,
		58,5,0,7,0,9,0,11,0,13,0,15,0,17,0,19,0,21,0,23,0,25,0,27,0,29,0,31,0,
		33,0,35,0,37,0,39,0,41,0,43,0,45,0,47,0,49,1,51,2,53,3,55,4,57,5,59,6,
		61,7,63,8,65,9,67,10,69,11,71,12,73,13,75,14,77,15,79,16,81,17,83,18,85,
		19,87,0,89,0,91,0,93,20,95,21,97,22,99,23,101,24,103,25,105,26,107,27,
		109,28,111,29,113,30,115,31,117,32,119,33,5,0,1,2,3,4,23,2,0,65,65,97,
		97,2,0,67,67,99,99,2,0,68,68,100,100,2,0,69,69,101,101,2,0,70,70,102,102,
		2,0,72,72,104,104,2,0,73,73,105,105,2,0,76,76,108,108,2,0,83,83,115,115,
		2,0,84,84,116,116,2,0,85,85,117,117,2,0,87,87,119,119,2,0,65,90,97,122,
		4,0,9,9,32,32,160,160,65279,65279,2,0,39,39,92,92,1,0,39,39,2,0,34,34,
		92,92,1,0,34,34,2,0,92,92,96,96,1,0,96,96,2,0,10,10,13,13,4,0,34,34,39,
		39,96,96,125,125,2,0,45,46,95,95,545,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,
		0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,1,61,1,0,0,0,1,63,1,0,0,0,
		1,65,1,0,0,0,1,67,1,0,0,0,1,69,1,0,0,0,1,71,1,0,0,0,1,73,1,0,0,0,1,75,
		1,0,0,0,1,77,1,0,0,0,1,79,1,0,0,0,1,81,1,0,0,0,1,83,1,0,0,0,2,85,1,0,0,
		0,2,87,1,0,0,0,2,89,1,0,0,0,2,91,1,0,0,0,3,93,1,0,0,0,3,95,1,0,0,0,3,97,
		1,0,0,0,3,99,1,0,0,0,4,101,1,0,0,0,4,103,1,0,0,0,4,105,1,0,0,0,4,107,1,
		0,0,0,4,109,1,0,0,0,4,111,1,0,0,0,4,113,1,0,0,0,4,115,1,0,0,0,4,117,1,
		0,0,0,4,119,1,0,0,0,5,121,1,0,0,0,7,123,1,0,0,0,9,125,1,0,0,0,11,127,1,
		0,0,0,13,129,1,0,0,0,15,131,1,0,0,0,17,133,1,0,0,0,19,135,1,0,0,0,21,137,
		1,0,0,0,23,139,1,0,0,0,25,141,1,0,0,0,27,143,1,0,0,0,29,145,1,0,0,0,31,
		147,1,0,0,0,33,149,1,0,0,0,35,171,1,0,0,0,37,173,1,0,0,0,39,184,1,0,0,
		0,41,191,1,0,0,0,43,201,1,0,0,0,45,213,1,0,0,0,47,227,1,0,0,0,49,232,1,
		0,0,0,51,238,1,0,0,0,53,242,1,0,0,0,55,251,1,0,0,0,57,256,1,0,0,0,59,262,
		1,0,0,0,61,265,1,0,0,0,63,275,1,0,0,0,65,284,1,0,0,0,67,290,1,0,0,0,69,
		302,1,0,0,0,71,324,1,0,0,0,73,338,1,0,0,0,75,354,1,0,0,0,77,368,1,0,0,
		0,79,385,1,0,0,0,81,388,1,0,0,0,83,392,1,0,0,0,85,398,1,0,0,0,87,406,1,
		0,0,0,89,410,1,0,0,0,91,416,1,0,0,0,93,423,1,0,0,0,95,429,1,0,0,0,97,439,
		1,0,0,0,99,450,1,0,0,0,101,454,1,0,0,0,103,466,1,0,0,0,105,476,1,0,0,0,
		107,479,1,0,0,0,109,488,1,0,0,0,111,501,1,0,0,0,113,505,1,0,0,0,115,508,
		1,0,0,0,117,511,1,0,0,0,119,515,1,0,0,0,121,122,7,0,0,0,122,6,1,0,0,0,
		123,124,7,1,0,0,124,8,1,0,0,0,125,126,7,2,0,0,126,10,1,0,0,0,127,128,7,
		3,0,0,128,12,1,0,0,0,129,130,7,4,0,0,130,14,1,0,0,0,131,132,7,5,0,0,132,
		16,1,0,0,0,133,134,7,6,0,0,134,18,1,0,0,0,135,136,7,7,0,0,136,20,1,0,0,
		0,137,138,7,8,0,0,138,22,1,0,0,0,139,140,7,9,0,0,140,24,1,0,0,0,141,142,
		7,10,0,0,142,26,1,0,0,0,143,144,7,11,0,0,144,28,1,0,0,0,145,146,7,12,0,
		0,146,30,1,0,0,0,147,148,2,48,57,0,148,32,1,0,0,0,149,150,7,13,0,0,150,
		34,1,0,0,0,151,157,5,39,0,0,152,153,5,92,0,0,153,156,7,14,0,0,154,156,
		8,15,0,0,155,152,1,0,0,0,155,154,1,0,0,0,156,159,1,0,0,0,157,158,1,0,0,
		0,157,155,1,0,0,0,158,160,1,0,0,0,159,157,1,0,0,0,160,172,5,39,0,0,161,
		167,5,34,0,0,162,163,5,92,0,0,163,166,7,16,0,0,164,166,8,17,0,0,165,162,
		1,0,0,0,165,164,1,0,0,0,166,169,1,0,0,0,167,168,1,0,0,0,167,165,1,0,0,
		0,168,170,1,0,0,0,169,167,1,0,0,0,170,172,5,34,0,0,171,151,1,0,0,0,171,
		161,1,0,0,0,172,36,1,0,0,0,173,179,5,96,0,0,174,175,5,92,0,0,175,178,7,
		18,0,0,176,178,8,19,0,0,177,174,1,0,0,0,177,176,1,0,0,0,178,181,1,0,0,
		0,179,180,1,0,0,0,179,177,1,0,0,0,180,182,1,0,0,0,181,179,1,0,0,0,182,
		183,5,96,0,0,183,38,1,0,0,0,184,186,5,92,0,0,185,187,8,20,0,0,186,185,
		1,0,0,0,186,187,1,0,0,0,187,40,1,0,0,0,188,192,3,29,12,0,189,192,3,31,
		13,0,190,192,5,95,0,0,191,188,1,0,0,0,191,189,1,0,0,0,191,190,1,0,0,0,
		192,198,1,0,0,0,193,197,3,29,12,0,194,197,3,31,13,0,195,197,5,95,0,0,196,
		193,1,0,0,0,196,194,1,0,0,0,196,195,1,0,0,0,197,200,1,0,0,0,198,196,1,
		0,0,0,198,199,1,0,0,0,199,42,1,0,0,0,200,198,1,0,0,0,201,208,5,123,0,0,
		202,207,3,43,19,0,203,207,3,35,15,0,204,207,3,37,16,0,205,207,8,21,0,0,
		206,202,1,0,0,0,206,203,1,0,0,0,206,204,1,0,0,0,206,205,1,0,0,0,207,210,
		1,0,0,0,208,206,1,0,0,0,208,209,1,0,0,0,209,211,1,0,0,0,210,208,1,0,0,
		0,211,212,5,125,0,0,212,44,1,0,0,0,213,214,5,36,0,0,214,219,5,123,0,0,
		215,220,3,35,15,0,216,220,3,37,16,0,217,220,3,43,19,0,218,220,8,21,0,0,
		219,215,1,0,0,0,219,216,1,0,0,0,219,217,1,0,0,0,219,218,1,0,0,0,220,221,
		1,0,0,0,221,219,1,0,0,0,221,222,1,0,0,0,222,224,1,0,0,0,223,225,5,125,
		0,0,224,223,1,0,0,0,224,225,1,0,0,0,225,46,1,0,0,0,226,228,5,13,0,0,227,
		226,1,0,0,0,227,228,1,0,0,0,228,229,1,0,0,0,229,230,5,10,0,0,230,48,1,
		0,0,0,231,233,3,33,14,0,232,231,1,0,0,0,233,234,1,0,0,0,234,232,1,0,0,
		0,234,235,1,0,0,0,235,236,1,0,0,0,236,237,6,22,0,0,237,50,1,0,0,0,238,
		239,3,47,21,0,239,240,1,0,0,0,240,241,6,23,0,0,241,52,1,0,0,0,242,246,
		5,62,0,0,243,245,8,20,0,0,244,243,1,0,0,0,245,248,1,0,0,0,246,244,1,0,
		0,0,246,247,1,0,0,0,247,249,1,0,0,0,248,246,1,0,0,0,249,250,6,24,0,0,250,
		54,1,0,0,0,251,252,5,45,0,0,252,253,6,25,1,0,253,254,1,0,0,0,254,255,6,
		25,2,0,255,56,1,0,0,0,256,257,5,91,0,0,257,258,4,26,0,0,258,259,6,26,3,
		0,259,260,1,0,0,0,260,261,6,26,4,0,261,58,1,0,0,0,262,263,9,0,0,0,263,
		264,6,27,5,0,264,60,1,0,0,0,265,266,3,33,14,0,266,270,4,28,1,0,267,269,
		3,33,14,0,268,267,1,0,0,0,269,272,1,0,0,0,270,268,1,0,0,0,270,271,1,0,
		0,0,271,273,1,0,0,0,272,270,1,0,0,0,273,274,6,28,0,0,274,62,1,0,0,0,275,
		276,5,96,0,0,276,277,5,96,0,0,277,278,5,96,0,0,278,279,1,0,0,0,279,280,
		4,29,2,0,280,281,6,29,6,0,281,282,1,0,0,0,282,283,6,29,7,0,283,64,1,0,
		0,0,284,285,3,47,21,0,285,286,6,30,8,0,286,287,1,0,0,0,287,288,6,30,0,
		0,288,289,6,30,9,0,289,66,1,0,0,0,290,291,3,17,6,0,291,295,3,13,4,0,292,
		294,3,33,14,0,293,292,1,0,0,0,294,297,1,0,0,0,295,293,1,0,0,0,295,296,
		1,0,0,0,296,298,1,0,0,0,297,295,1,0,0,0,298,299,5,58,0,0,299,300,4,31,
		3,0,300,301,6,31,10,0,301,68,1,0,0,0,302,303,3,11,3,0,303,304,3,19,7,0,
		304,305,3,21,8,0,305,309,3,11,3,0,306,308,3,33,14,0,307,306,1,0,0,0,308,
		311,1,0,0,0,309,307,1,0,0,0,309,310,1,0,0,0,310,312,1,0,0,0,311,309,1,
		0,0,0,312,313,3,17,6,0,313,317,3,13,4,0,314,316,3,33,14,0,315,314,1,0,
		0,0,316,319,1,0,0,0,317,315,1,0,0,0,317,318,1,0,0,0,318,320,1,0,0,0,319,
		317,1,0,0,0,320,321,5,58,0,0,321,322,4,32,4,0,322,323,6,32,11,0,323,70,
		1,0,0,0,324,325,3,11,3,0,325,326,3,19,7,0,326,327,3,21,8,0,327,331,3,11,
		3,0,328,330,3,33,14,0,329,328,1,0,0,0,330,333,1,0,0,0,331,329,1,0,0,0,
		331,332,1,0,0,0,332,334,1,0,0,0,333,331,1,0,0,0,334,335,5,58,0,0,335,336,
		4,33,5,0,336,337,6,33,12,0,337,72,1,0,0,0,338,339,3,21,8,0,339,340,3,27,
		11,0,340,341,3,17,6,0,341,342,3,23,9,0,342,343,3,7,1,0,343,347,3,15,5,
		0,344,346,3,33,14,0,345,344,1,0,0,0,346,349,1,0,0,0,347,345,1,0,0,0,347,
		348,1,0,0,0,348,350,1,0,0,0,349,347,1,0,0,0,350,351,5,58,0,0,351,352,4,
		34,6,0,352,353,6,34,13,0,353,74,1,0,0,0,354,355,3,7,1,0,355,356,3,5,0,
		0,356,357,3,21,8,0,357,361,3,11,3,0,358,360,3,33,14,0,359,358,1,0,0,0,
		360,363,1,0,0,0,361,359,1,0,0,0,361,362,1,0,0,0,362,364,1,0,0,0,363,361,
		1,0,0,0,364,365,5,58,0,0,365,366,4,35,7,0,366,367,6,35,14,0,367,76,1,0,
		0,0,368,369,3,9,2,0,369,370,3,11,3,0,370,371,3,13,4,0,371,372,3,5,0,0,
		372,373,3,25,10,0,373,374,3,19,7,0,374,378,3,23,9,0,375,377,3,33,14,0,
		376,375,1,0,0,0,377,380,1,0,0,0,378,376,1,0,0,0,378,379,1,0,0,0,379,381,
		1,0,0,0,380,378,1,0,0,0,381,382,5,58,0,0,382,383,4,36,8,0,383,384,6,36,
		15,0,384,78,1,0,0,0,385,386,3,39,17,0,386,387,6,37,16,0,387,80,1,0,0,0,
		388,389,3,45,20,0,389,390,6,38,17,0,390,82,1,0,0,0,391,393,8,20,0,0,392,
		391,1,0,0,0,393,394,1,0,0,0,394,395,1,0,0,0,394,392,1,0,0,0,395,396,1,
		0,0,0,396,397,6,39,18,0,397,84,1,0,0,0,398,399,5,96,0,0,399,400,5,96,0,
		0,400,401,5,96,0,0,401,402,1,0,0,0,402,403,6,40,19,0,403,404,1,0,0,0,404,
		405,6,40,9,0,405,86,1,0,0,0,406,407,3,39,17,0,407,408,1,0,0,0,408,409,
		6,41,20,0,409,88,1,0,0,0,410,411,3,45,20,0,411,412,1,0,0,0,412,413,6,42,
		21,0,413,90,1,0,0,0,414,417,3,47,21,0,415,417,8,20,0,0,416,414,1,0,0,0,
		416,415,1,0,0,0,417,418,1,0,0,0,418,419,1,0,0,0,418,416,1,0,0,0,419,420,
		1,0,0,0,420,421,6,43,22,0,421,92,1,0,0,0,422,424,3,33,14,0,423,422,1,0,
		0,0,424,425,1,0,0,0,425,423,1,0,0,0,425,426,1,0,0,0,426,427,1,0,0,0,427,
		428,6,44,0,0,428,94,1,0,0,0,429,430,3,47,21,0,430,431,6,45,23,0,431,432,
		6,45,24,0,432,433,1,0,0,0,433,434,6,45,0,0,434,435,6,45,25,0,435,96,1,
		0,0,0,436,440,3,29,12,0,437,440,3,31,13,0,438,440,5,95,0,0,439,436,1,0,
		0,0,439,437,1,0,0,0,439,438,1,0,0,0,440,446,1,0,0,0,441,445,3,29,12,0,
		442,445,3,31,13,0,443,445,7,22,0,0,444,441,1,0,0,0,444,442,1,0,0,0,444,
		443,1,0,0,0,445,448,1,0,0,0,446,444,1,0,0,0,446,447,1,0,0,0,447,98,1,0,
		0,0,448,446,1,0,0,0,449,451,8,20,0,0,450,449,1,0,0,0,451,452,1,0,0,0,452,
		453,1,0,0,0,452,450,1,0,0,0,453,100,1,0,0,0,454,458,5,62,0,0,455,457,8,
		20,0,0,456,455,1,0,0,0,457,460,1,0,0,0,458,456,1,0,0,0,458,459,1,0,0,0,
		459,461,1,0,0,0,460,458,1,0,0,0,461,462,3,47,21,0,462,463,4,48,9,0,463,
		464,1,0,0,0,464,465,6,48,0,0,465,102,1,0,0,0,466,467,3,33,14,0,467,471,
		4,49,10,0,468,470,3,33,14,0,469,468,1,0,0,0,470,473,1,0,0,0,471,469,1,
		0,0,0,471,472,1,0,0,0,472,474,1,0,0,0,473,471,1,0,0,0,474,475,6,49,0,0,
		475,104,1,0,0,0,476,477,3,47,21,0,477,478,6,50,26,0,478,106,1,0,0,0,479,
		480,5,93,0,0,480,481,4,51,11,0,481,482,1,0,0,0,482,483,6,51,9,0,483,484,
		6,51,9,0,484,108,1,0,0,0,485,489,3,29,12,0,486,489,3,31,13,0,487,489,5,
		95,0,0,488,485,1,0,0,0,488,486,1,0,0,0,488,487,1,0,0,0,489,495,1,0,0,0,
		490,494,3,29,12,0,491,494,3,31,13,0,492,494,7,22,0,0,493,490,1,0,0,0,493,
		491,1,0,0,0,493,492,1,0,0,0,494,497,1,0,0,0,495,493,1,0,0,0,495,496,1,
		0,0,0,496,498,1,0,0,0,497,495,1,0,0,0,498,499,4,52,12,0,499,500,6,52,27,
		0,500,110,1,0,0,0,501,502,5,61,0,0,502,503,4,53,13,0,503,504,6,53,28,0,
		504,112,1,0,0,0,505,506,5,124,0,0,506,507,6,54,29,0,507,114,1,0,0,0,508,
		509,3,39,17,0,509,510,6,55,30,0,510,116,1,0,0,0,511,512,3,45,20,0,512,
		513,6,56,31,0,513,118,1,0,0,0,514,516,8,20,0,0,515,514,1,0,0,0,516,517,
		1,0,0,0,517,518,1,0,0,0,517,515,1,0,0,0,518,519,1,0,0,0,519,520,6,57,32,
		0,520,120,1,0,0,0,46,0,1,2,3,4,155,157,165,167,171,177,179,186,191,196,
		198,206,208,219,221,224,227,234,246,270,295,309,317,331,347,361,378,394,
		416,418,425,439,444,446,452,458,471,488,493,495,517,33,6,0,0,1,25,0,5,
		1,0,1,26,1,5,3,0,1,27,2,1,29,3,5,2,0,1,30,4,4,0,0,1,31,5,1,32,6,1,33,7,
		1,34,8,1,35,9,1,36,10,1,37,11,1,38,12,1,39,13,1,40,14,7,16,0,7,17,0,7,
		18,0,1,45,15,1,45,16,5,4,0,1,50,17,1,52,18,1,53,19,1,54,20,1,55,21,1,56,
		22,1,57,23
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
