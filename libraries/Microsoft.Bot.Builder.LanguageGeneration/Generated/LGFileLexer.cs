//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from LGFileLexer.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

#pragma warning disable 3021
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class LGFileLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		NEWLINE=1, OPTION=2, COMMENT=3, IMPORT=4, TEMPLATE_NAME_LINE=5, INLINE_MULTILINE=6, 
		MULTILINE_PREFIX=7, TEMPLATE_BODY=8, INVALID_LINE=9, MULTILINE_SUFFIX=10, 
		ESCAPE_CHARACTER=11, MULTILINE_TEXT=12;
	public const int
		MULTILINE_MODE=1;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE", "MULTILINE_MODE"
	};

	public static readonly string[] ruleNames = {
		"WHITESPACE", "NEWLINE", "OPTION", "COMMENT", "IMPORT", "TEMPLATE_NAME_LINE", 
		"INLINE_MULTILINE", "MULTILINE_PREFIX", "TEMPLATE_BODY", "INVALID_LINE", 
		"MULTILINE_SUFFIX", "ESCAPE_CHARACTER", "MULTILINE_TEXT"
	};


	  bool startTemplate = false;


	public LGFileLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public LGFileLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, null, null, "'```'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "NEWLINE", "OPTION", "COMMENT", "IMPORT", "TEMPLATE_NAME_LINE", 
		"INLINE_MULTILINE", "MULTILINE_PREFIX", "TEMPLATE_BODY", "INVALID_LINE", 
		"MULTILINE_SUFFIX", "ESCAPE_CHARACTER", "MULTILINE_TEXT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "LGFileLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static LGFileLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	public override void Action(RuleContext _localctx, int ruleIndex, int actionIndex) {
		switch (ruleIndex) {
		case 5 : TEMPLATE_NAME_LINE_action(_localctx, actionIndex); break;
		}
	}
	private void TEMPLATE_NAME_LINE_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 0:  startTemplate = true;  break;
		}
	}
	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 2 : return OPTION_sempred(_localctx, predIndex);
		case 3 : return COMMENT_sempred(_localctx, predIndex);
		case 4 : return IMPORT_sempred(_localctx, predIndex);
		case 5 : return TEMPLATE_NAME_LINE_sempred(_localctx, predIndex);
		case 6 : return INLINE_MULTILINE_sempred(_localctx, predIndex);
		case 7 : return MULTILINE_PREFIX_sempred(_localctx, predIndex);
		case 8 : return TEMPLATE_BODY_sempred(_localctx, predIndex);
		case 9 : return INVALID_LINE_sempred(_localctx, predIndex);
		}
		return true;
	}
	private bool OPTION_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return  !startTemplate ;
		}
		return true;
	}
	private bool COMMENT_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return  !startTemplate ;
		}
		return true;
	}
	private bool IMPORT_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return  !startTemplate ;
		}
		return true;
	}
	private bool TEMPLATE_NAME_LINE_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return  TokenStartColumn == 0;
		}
		return true;
	}
	private bool INLINE_MULTILINE_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return  startTemplate && TokenStartColumn == 0 ;
		}
		return true;
	}
	private bool MULTILINE_PREFIX_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 5: return  startTemplate && TokenStartColumn == 0 ;
		}
		return true;
	}
	private bool TEMPLATE_BODY_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 6: return  startTemplate ;
		}
		return true;
	}
	private bool INVALID_LINE_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 7: return  !startTemplate ;
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,0,12,212,6,-1,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,
		6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,1,0,1,0,1,
		1,3,1,32,8,1,1,1,1,1,1,2,5,2,37,8,2,10,2,12,2,40,9,2,1,2,1,2,5,2,44,8,
		2,10,2,12,2,47,9,2,1,2,1,2,1,2,1,2,4,2,53,8,2,11,2,12,2,54,1,2,1,2,1,3,
		5,3,60,8,3,10,3,12,3,63,9,3,1,3,1,3,5,3,67,8,3,10,3,12,3,70,9,3,1,3,1,
		3,1,4,5,4,75,8,4,10,4,12,4,78,9,4,1,4,1,4,5,4,82,8,4,10,4,12,4,85,9,4,
		1,4,1,4,1,4,5,4,90,8,4,10,4,12,4,93,9,4,1,4,1,4,5,4,97,8,4,10,4,12,4,100,
		9,4,1,4,1,4,1,5,5,5,105,8,5,10,5,12,5,108,9,5,1,5,1,5,5,5,112,8,5,10,5,
		12,5,115,9,5,1,5,1,5,1,5,1,6,5,6,121,8,6,10,6,12,6,124,9,6,1,6,1,6,5,6,
		128,8,6,10,6,12,6,131,9,6,1,6,1,6,1,6,1,6,1,6,5,6,138,8,6,10,6,12,6,141,
		9,6,1,6,1,6,1,6,1,6,1,6,5,6,148,8,6,10,6,12,6,151,9,6,1,6,1,6,1,7,5,7,
		156,8,7,10,7,12,7,159,9,7,1,7,1,7,5,7,163,8,7,10,7,12,7,166,9,7,1,7,1,
		7,1,7,1,7,1,7,5,7,173,8,7,10,7,12,7,176,9,7,1,7,1,7,1,7,1,7,1,8,1,8,1,
		8,5,8,185,8,8,10,8,12,8,188,9,8,1,9,1,9,1,9,5,9,193,8,9,10,9,12,9,196,
		9,9,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,3,11,206,8,11,1,12,4,12,209,
		8,12,11,12,12,12,210,3,83,91,210,0,13,2,0,4,1,6,2,8,3,10,4,12,5,14,6,16,
		7,18,8,20,9,22,10,24,11,26,12,2,0,1,4,4,0,9,9,32,32,160,160,65279,65279,
		2,0,10,10,13,13,4,0,10,10,13,13,91,91,93,93,3,0,10,10,13,13,40,41,232,
		0,4,1,0,0,0,0,6,1,0,0,0,0,8,1,0,0,0,0,10,1,0,0,0,0,12,1,0,0,0,0,14,1,0,
		0,0,0,16,1,0,0,0,0,18,1,0,0,0,0,20,1,0,0,0,1,22,1,0,0,0,1,24,1,0,0,0,1,
		26,1,0,0,0,2,28,1,0,0,0,4,31,1,0,0,0,6,38,1,0,0,0,8,61,1,0,0,0,10,76,1,
		0,0,0,12,106,1,0,0,0,14,122,1,0,0,0,16,157,1,0,0,0,18,181,1,0,0,0,20,189,
		1,0,0,0,22,197,1,0,0,0,24,203,1,0,0,0,26,208,1,0,0,0,28,29,7,0,0,0,29,
		3,1,0,0,0,30,32,5,13,0,0,31,30,1,0,0,0,31,32,1,0,0,0,32,33,1,0,0,0,33,
		34,5,10,0,0,34,5,1,0,0,0,35,37,3,2,0,0,36,35,1,0,0,0,37,40,1,0,0,0,38,
		36,1,0,0,0,38,39,1,0,0,0,39,41,1,0,0,0,40,38,1,0,0,0,41,45,5,62,0,0,42,
		44,3,2,0,0,43,42,1,0,0,0,44,47,1,0,0,0,45,43,1,0,0,0,45,46,1,0,0,0,46,
		48,1,0,0,0,47,45,1,0,0,0,48,49,5,33,0,0,49,50,5,35,0,0,50,52,1,0,0,0,51,
		53,8,1,0,0,52,51,1,0,0,0,53,54,1,0,0,0,54,52,1,0,0,0,54,55,1,0,0,0,55,
		56,1,0,0,0,56,57,4,2,0,0,57,7,1,0,0,0,58,60,3,2,0,0,59,58,1,0,0,0,60,63,
		1,0,0,0,61,59,1,0,0,0,61,62,1,0,0,0,62,64,1,0,0,0,63,61,1,0,0,0,64,68,
		5,62,0,0,65,67,8,1,0,0,66,65,1,0,0,0,67,70,1,0,0,0,68,66,1,0,0,0,68,69,
		1,0,0,0,69,71,1,0,0,0,70,68,1,0,0,0,71,72,4,3,1,0,72,9,1,0,0,0,73,75,3,
		2,0,0,74,73,1,0,0,0,75,78,1,0,0,0,76,74,1,0,0,0,76,77,1,0,0,0,77,79,1,
		0,0,0,78,76,1,0,0,0,79,83,5,91,0,0,80,82,8,2,0,0,81,80,1,0,0,0,82,85,1,
		0,0,0,83,84,1,0,0,0,83,81,1,0,0,0,84,86,1,0,0,0,85,83,1,0,0,0,86,87,5,
		93,0,0,87,91,5,40,0,0,88,90,8,3,0,0,89,88,1,0,0,0,90,93,1,0,0,0,91,92,
		1,0,0,0,91,89,1,0,0,0,92,94,1,0,0,0,93,91,1,0,0,0,94,98,5,41,0,0,95,97,
		8,1,0,0,96,95,1,0,0,0,97,100,1,0,0,0,98,96,1,0,0,0,98,99,1,0,0,0,99,101,
		1,0,0,0,100,98,1,0,0,0,101,102,4,4,2,0,102,11,1,0,0,0,103,105,3,2,0,0,
		104,103,1,0,0,0,105,108,1,0,0,0,106,104,1,0,0,0,106,107,1,0,0,0,107,109,
		1,0,0,0,108,106,1,0,0,0,109,113,5,35,0,0,110,112,8,1,0,0,111,110,1,0,0,
		0,112,115,1,0,0,0,113,111,1,0,0,0,113,114,1,0,0,0,114,116,1,0,0,0,115,
		113,1,0,0,0,116,117,4,5,3,0,117,118,6,5,0,0,118,13,1,0,0,0,119,121,3,2,
		0,0,120,119,1,0,0,0,121,124,1,0,0,0,122,120,1,0,0,0,122,123,1,0,0,0,123,
		125,1,0,0,0,124,122,1,0,0,0,125,129,5,45,0,0,126,128,3,2,0,0,127,126,1,
		0,0,0,128,131,1,0,0,0,129,127,1,0,0,0,129,130,1,0,0,0,130,132,1,0,0,0,
		131,129,1,0,0,0,132,133,5,96,0,0,133,134,5,96,0,0,134,135,5,96,0,0,135,
		139,1,0,0,0,136,138,8,1,0,0,137,136,1,0,0,0,138,141,1,0,0,0,139,137,1,
		0,0,0,139,140,1,0,0,0,140,142,1,0,0,0,141,139,1,0,0,0,142,143,5,96,0,0,
		143,144,5,96,0,0,144,145,5,96,0,0,145,149,1,0,0,0,146,148,3,2,0,0,147,
		146,1,0,0,0,148,151,1,0,0,0,149,147,1,0,0,0,149,150,1,0,0,0,150,152,1,
		0,0,0,151,149,1,0,0,0,152,153,4,6,4,0,153,15,1,0,0,0,154,156,3,2,0,0,155,
		154,1,0,0,0,156,159,1,0,0,0,157,155,1,0,0,0,157,158,1,0,0,0,158,160,1,
		0,0,0,159,157,1,0,0,0,160,164,5,45,0,0,161,163,3,2,0,0,162,161,1,0,0,0,
		163,166,1,0,0,0,164,162,1,0,0,0,164,165,1,0,0,0,165,167,1,0,0,0,166,164,
		1,0,0,0,167,168,5,96,0,0,168,169,5,96,0,0,169,170,5,96,0,0,170,174,1,0,
		0,0,171,173,8,1,0,0,172,171,1,0,0,0,173,176,1,0,0,0,174,172,1,0,0,0,174,
		175,1,0,0,0,175,177,1,0,0,0,176,174,1,0,0,0,177,178,4,7,5,0,178,179,1,
		0,0,0,179,180,6,7,1,0,180,17,1,0,0,0,181,182,8,1,0,0,182,186,4,8,6,0,183,
		185,8,1,0,0,184,183,1,0,0,0,185,188,1,0,0,0,186,184,1,0,0,0,186,187,1,
		0,0,0,187,19,1,0,0,0,188,186,1,0,0,0,189,190,8,1,0,0,190,194,4,9,7,0,191,
		193,8,1,0,0,192,191,1,0,0,0,193,196,1,0,0,0,194,192,1,0,0,0,194,195,1,
		0,0,0,195,21,1,0,0,0,196,194,1,0,0,0,197,198,5,96,0,0,198,199,5,96,0,0,
		199,200,5,96,0,0,200,201,1,0,0,0,201,202,6,10,2,0,202,23,1,0,0,0,203,205,
		5,92,0,0,204,206,8,1,0,0,205,204,1,0,0,0,205,206,1,0,0,0,206,25,1,0,0,
		0,207,209,9,0,0,0,208,207,1,0,0,0,209,210,1,0,0,0,210,211,1,0,0,0,210,
		208,1,0,0,0,211,27,1,0,0,0,25,0,1,31,38,45,54,61,68,76,83,91,98,106,113,
		122,129,139,149,157,164,174,186,194,205,210,3,1,5,0,5,1,0,4,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
