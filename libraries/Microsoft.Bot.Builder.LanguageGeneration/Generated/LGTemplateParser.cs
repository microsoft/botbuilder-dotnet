//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from LGTemplateParser.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

#pragma warning disable 3021
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class LGTemplateParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		WS=1, NEWLINE=2, COMMENTS=3, DASH=4, LEFT_SQUARE_BRACKET=5, INVALID_TOKEN=6, 
		WS_IN_BODY=7, MULTILINE_PREFIX=8, NEWLINE_IN_BODY=9, IF=10, ELSEIF=11, 
		ELSE=12, SWITCH=13, CASE=14, DEFAULT=15, ESCAPE_CHARACTER=16, EXPRESSION=17, 
		TEXT=18, MULTILINE_SUFFIX=19, WS_IN_STRUCTURE_NAME=20, NEWLINE_IN_STRUCTURE_NAME=21, 
		STRUCTURE_NAME=22, TEXT_IN_STRUCTURE_NAME=23, STRUCTURED_COMMENTS=24, 
		WS_IN_STRUCTURE_BODY=25, STRUCTURED_NEWLINE=26, STRUCTURED_BODY_END=27, 
		STRUCTURE_IDENTIFIER=28, STRUCTURE_EQUALS=29, STRUCTURE_OR_MARK=30, ESCAPE_CHARACTER_IN_STRUCTURE_BODY=31, 
		EXPRESSION_IN_STRUCTURE_BODY=32, TEXT_IN_STRUCTURE_BODY=33;
	public const int
		RULE_context = 0, RULE_body = 1, RULE_structuredTemplateBody = 2, RULE_structuredBodyNameLine = 3, 
		RULE_errorStructuredName = 4, RULE_structuredBodyContentLine = 5, RULE_errorStructureLine = 6, 
		RULE_keyValueStructureLine = 7, RULE_keyValueStructureValue = 8, RULE_structuredBodyEndLine = 9, 
		RULE_normalTemplateBody = 10, RULE_templateString = 11, RULE_normalTemplateString = 12, 
		RULE_errorTemplateString = 13, RULE_ifElseTemplateBody = 14, RULE_ifConditionRule = 15, 
		RULE_ifCondition = 16, RULE_switchCaseTemplateBody = 17, RULE_switchCaseRule = 18, 
		RULE_switchCaseStat = 19, RULE_expression = 20, RULE_expressionInStructure = 21;
	public static readonly string[] ruleNames = {
		"context", "body", "structuredTemplateBody", "structuredBodyNameLine", 
		"errorStructuredName", "structuredBodyContentLine", "errorStructureLine", 
		"keyValueStructureLine", "keyValueStructureValue", "structuredBodyEndLine", 
		"normalTemplateBody", "templateString", "normalTemplateString", "errorTemplateString", 
		"ifElseTemplateBody", "ifConditionRule", "ifCondition", "switchCaseTemplateBody", 
		"switchCaseRule", "switchCaseStat", "expression", "expressionInStructure"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, "'|'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "WS", "NEWLINE", "COMMENTS", "DASH", "LEFT_SQUARE_BRACKET", "INVALID_TOKEN", 
		"WS_IN_BODY", "MULTILINE_PREFIX", "NEWLINE_IN_BODY", "IF", "ELSEIF", "ELSE", 
		"SWITCH", "CASE", "DEFAULT", "ESCAPE_CHARACTER", "EXPRESSION", "TEXT", 
		"MULTILINE_SUFFIX", "WS_IN_STRUCTURE_NAME", "NEWLINE_IN_STRUCTURE_NAME", 
		"STRUCTURE_NAME", "TEXT_IN_STRUCTURE_NAME", "STRUCTURED_COMMENTS", "WS_IN_STRUCTURE_BODY", 
		"STRUCTURED_NEWLINE", "STRUCTURED_BODY_END", "STRUCTURE_IDENTIFIER", "STRUCTURE_EQUALS", 
		"STRUCTURE_OR_MARK", "ESCAPE_CHARACTER_IN_STRUCTURE_BODY", "EXPRESSION_IN_STRUCTURE_BODY", 
		"TEXT_IN_STRUCTURE_BODY"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "LGTemplateParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static LGTemplateParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public LGTemplateParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public LGTemplateParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ContextContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(LGTemplateParser.Eof, 0); }
		public ContextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_context; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
			if (typedListener != null) typedListener.EnterContext(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
			if (typedListener != null) typedListener.ExitContext(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILGTemplateParserVisitor<TResult> typedVisitor = visitor as ILGTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContext(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContextContext context() {
		ContextContext _localctx = new ContextContext(Context, State);
		EnterRule(_localctx, 0, RULE_context);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 44;
			body();
			State = 45;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BodyContext : ParserRuleContext {
		public BodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_body; } }
	 
		public BodyContext() { }
		public virtual void CopyFrom(BodyContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SwitchCaseBodyContext : BodyContext {
		[System.Diagnostics.DebuggerNonUserCode] public SwitchCaseTemplateBodyContext switchCaseTemplateBody() {
			return GetRuleContext<SwitchCaseTemplateBodyContext>(0);
		}
		public SwitchCaseBodyContext(BodyContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
			if (typedListener != null) typedListener.EnterSwitchCaseBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
			if (typedListener != null) typedListener.ExitSwitchCaseBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILGTemplateParserVisitor<TResult> typedVisitor = visitor as ILGTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchCaseBody(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NormalBodyContext : BodyContext {
		[System.Diagnostics.DebuggerNonUserCode] public NormalTemplateBodyContext normalTemplateBody() {
			return GetRuleContext<NormalTemplateBodyContext>(0);
		}
		public NormalBodyContext(BodyContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
			if (typedListener != null) typedListener.EnterNormalBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
			if (typedListener != null) typedListener.ExitNormalBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILGTemplateParserVisitor<TResult> typedVisitor = visitor as ILGTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNormalBody(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StructuredBodyContext : BodyContext {
		[System.Diagnostics.DebuggerNonUserCode] public StructuredTemplateBodyContext structuredTemplateBody() {
			return GetRuleContext<StructuredTemplateBodyContext>(0);
		}
		public StructuredBodyContext(BodyContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
			if (typedListener != null) typedListener.EnterStructuredBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
			if (typedListener != null) typedListener.ExitStructuredBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILGTemplateParserVisitor<TResult> typedVisitor = visitor as ILGTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructuredBody(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfElseBodyContext : BodyContext {
		[System.Diagnostics.DebuggerNonUserCode] public IfElseTemplateBodyContext ifElseTemplateBody() {
			return GetRuleContext<IfElseTemplateBodyContext>(0);
		}
		public IfElseBodyContext(BodyContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
			if (typedListener != null) typedListener.EnterIfElseBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
			if (typedListener != null) typedListener.ExitIfElseBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILGTemplateParserVisitor<TResult> typedVisitor = visitor as ILGTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfElseBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BodyContext body() {
		BodyContext _localctx = new BodyContext(Context, State);
		EnterRule(_localctx, 2, RULE_body);
		try {
			State = 51;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				_localctx = new NormalBodyContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 47;
				normalTemplateBody();
				}
				break;
			case 2:
				_localctx = new IfElseBodyContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 48;
				ifElseTemplateBody();
				}
				break;
			case 3:
				_localctx = new SwitchCaseBodyContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 49;
				switchCaseTemplateBody();
				}
				break;
			case 4:
				_localctx = new StructuredBodyContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 50;
				structuredTemplateBody();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructuredTemplateBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StructuredBodyNameLineContext structuredBodyNameLine() {
			return GetRuleContext<StructuredBodyNameLineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructuredBodyEndLineContext structuredBodyEndLine() {
			return GetRuleContext<StructuredBodyEndLineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ErrorStructureLineContext[] errorStructureLine() {
			return GetRuleContexts<ErrorStructureLineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ErrorStructureLineContext errorStructureLine(int i) {
			return GetRuleContext<ErrorStructureLineContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRUCTURED_NEWLINE() { return GetTokens(LGTemplateParser.STRUCTURED_NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRUCTURED_NEWLINE(int i) {
			return GetToken(LGTemplateParser.STRUCTURED_NEWLINE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructuredBodyContentLineContext[] structuredBodyContentLine() {
			return GetRuleContexts<StructuredBodyContentLineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructuredBodyContentLineContext structuredBodyContentLine(int i) {
			return GetRuleContext<StructuredBodyContentLineContext>(i);
		}
		public StructuredTemplateBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structuredTemplateBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
			if (typedListener != null) typedListener.EnterStructuredTemplateBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
			if (typedListener != null) typedListener.ExitStructuredTemplateBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILGTemplateParserVisitor<TResult> typedVisitor = visitor as ILGTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructuredTemplateBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructuredTemplateBodyContext structuredTemplateBody() {
		StructuredTemplateBodyContext _localctx = new StructuredTemplateBodyContext(Context, State);
		EnterRule(_localctx, 4, RULE_structuredTemplateBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 53;
			structuredBodyNameLine();
			State = 63;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((_la) & ~0x3f) == 0 && ((1L << _la) & 16978542592L) != 0) {
				{
				State = 59;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					State = 59;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
					case 1:
						{
						{
						State = 55;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==STRUCTURE_IDENTIFIER || _la==EXPRESSION_IN_STRUCTURE_BODY) {
							{
							State = 54;
							structuredBodyContentLine();
							}
						}

						State = 57;
						Match(STRUCTURED_NEWLINE);
						}
						}
						break;
					case 2:
						{
						State = 58;
						errorStructureLine();
						}
						break;
					}
					}
					State = 61;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( ((_la) & ~0x3f) == 0 && ((1L << _la) & 16978542592L) != 0 );
				}
			}

			State = 66;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STRUCTURED_BODY_END) {
				{
				State = 65;
				structuredBodyEndLine();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructuredBodyNameLineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_SQUARE_BRACKET() { return GetToken(LGTemplateParser.LEFT_SQUARE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRUCTURE_NAME() { return GetToken(LGTemplateParser.STRUCTURE_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ErrorStructuredNameContext errorStructuredName() {
			return GetRuleContext<ErrorStructuredNameContext>(0);
		}
		public StructuredBodyNameLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structuredBodyNameLine; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
			if (typedListener != null) typedListener.EnterStructuredBodyNameLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
			if (typedListener != null) typedListener.ExitStructuredBodyNameLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILGTemplateParserVisitor<TResult> typedVisitor = visitor as ILGTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructuredBodyNameLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructuredBodyNameLineContext structuredBodyNameLine() {
		StructuredBodyNameLineContext _localctx = new StructuredBodyNameLineContext(Context, State);
		EnterRule(_localctx, 6, RULE_structuredBodyNameLine);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 68;
			Match(LEFT_SQUARE_BRACKET);
			State = 71;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				{
				State = 69;
				Match(STRUCTURE_NAME);
				}
				break;
			case 2:
				{
				State = 70;
				errorStructuredName();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ErrorStructuredNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRUCTURE_NAME() { return GetTokens(LGTemplateParser.STRUCTURE_NAME); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRUCTURE_NAME(int i) {
			return GetToken(LGTemplateParser.STRUCTURE_NAME, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TEXT_IN_STRUCTURE_NAME() { return GetTokens(LGTemplateParser.TEXT_IN_STRUCTURE_NAME); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT_IN_STRUCTURE_NAME(int i) {
			return GetToken(LGTemplateParser.TEXT_IN_STRUCTURE_NAME, i);
		}
		public ErrorStructuredNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_errorStructuredName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
			if (typedListener != null) typedListener.EnterErrorStructuredName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
			if (typedListener != null) typedListener.ExitErrorStructuredName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILGTemplateParserVisitor<TResult> typedVisitor = visitor as ILGTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitErrorStructuredName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ErrorStructuredNameContext errorStructuredName() {
		ErrorStructuredNameContext _localctx = new ErrorStructuredNameContext(Context, State);
		EnterRule(_localctx, 8, RULE_errorStructuredName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 76;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==STRUCTURE_NAME || _la==TEXT_IN_STRUCTURE_NAME) {
				{
				{
				State = 73;
				_la = TokenStream.LA(1);
				if ( !(_la==STRUCTURE_NAME || _la==TEXT_IN_STRUCTURE_NAME) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 78;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructuredBodyContentLineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public KeyValueStructureLineContext keyValueStructureLine() {
			return GetRuleContext<KeyValueStructureLineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionInStructureContext expressionInStructure() {
			return GetRuleContext<ExpressionInStructureContext>(0);
		}
		public StructuredBodyContentLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structuredBodyContentLine; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
			if (typedListener != null) typedListener.EnterStructuredBodyContentLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
			if (typedListener != null) typedListener.ExitStructuredBodyContentLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILGTemplateParserVisitor<TResult> typedVisitor = visitor as ILGTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructuredBodyContentLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructuredBodyContentLineContext structuredBodyContentLine() {
		StructuredBodyContentLineContext _localctx = new StructuredBodyContentLineContext(Context, State);
		EnterRule(_localctx, 10, RULE_structuredBodyContentLine);
		try {
			State = 81;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRUCTURE_IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 79;
				keyValueStructureLine();
				}
				break;
			case EXPRESSION_IN_STRUCTURE_BODY:
				EnterOuterAlt(_localctx, 2);
				{
				State = 80;
				expressionInStructure();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ErrorStructureLineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRUCTURE_IDENTIFIER() { return GetTokens(LGTemplateParser.STRUCTURE_IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRUCTURE_IDENTIFIER(int i) {
			return GetToken(LGTemplateParser.STRUCTURE_IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRUCTURE_EQUALS() { return GetTokens(LGTemplateParser.STRUCTURE_EQUALS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRUCTURE_EQUALS(int i) {
			return GetToken(LGTemplateParser.STRUCTURE_EQUALS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRUCTURE_OR_MARK() { return GetTokens(LGTemplateParser.STRUCTURE_OR_MARK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRUCTURE_OR_MARK(int i) {
			return GetToken(LGTemplateParser.STRUCTURE_OR_MARK, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TEXT_IN_STRUCTURE_BODY() { return GetTokens(LGTemplateParser.TEXT_IN_STRUCTURE_BODY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT_IN_STRUCTURE_BODY(int i) {
			return GetToken(LGTemplateParser.TEXT_IN_STRUCTURE_BODY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionInStructureContext[] expressionInStructure() {
			return GetRuleContexts<ExpressionInStructureContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionInStructureContext expressionInStructure(int i) {
			return GetRuleContext<ExpressionInStructureContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ESCAPE_CHARACTER_IN_STRUCTURE_BODY() { return GetTokens(LGTemplateParser.ESCAPE_CHARACTER_IN_STRUCTURE_BODY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE_CHARACTER_IN_STRUCTURE_BODY(int i) {
			return GetToken(LGTemplateParser.ESCAPE_CHARACTER_IN_STRUCTURE_BODY, i);
		}
		public ErrorStructureLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_errorStructureLine; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
			if (typedListener != null) typedListener.EnterErrorStructureLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
			if (typedListener != null) typedListener.ExitErrorStructureLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILGTemplateParserVisitor<TResult> typedVisitor = visitor as ILGTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitErrorStructureLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ErrorStructureLineContext errorStructureLine() {
		ErrorStructureLineContext _localctx = new ErrorStructureLineContext(Context, State);
		EnterRule(_localctx, 12, RULE_errorStructureLine);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 89;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 89;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case STRUCTURE_IDENTIFIER:
						{
						State = 83;
						Match(STRUCTURE_IDENTIFIER);
						}
						break;
					case STRUCTURE_EQUALS:
						{
						State = 84;
						Match(STRUCTURE_EQUALS);
						}
						break;
					case STRUCTURE_OR_MARK:
						{
						State = 85;
						Match(STRUCTURE_OR_MARK);
						}
						break;
					case TEXT_IN_STRUCTURE_BODY:
						{
						State = 86;
						Match(TEXT_IN_STRUCTURE_BODY);
						}
						break;
					case EXPRESSION_IN_STRUCTURE_BODY:
						{
						State = 87;
						expressionInStructure();
						}
						break;
					case ESCAPE_CHARACTER_IN_STRUCTURE_BODY:
						{
						State = 88;
						Match(ESCAPE_CHARACTER_IN_STRUCTURE_BODY);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 91;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyValueStructureLineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRUCTURE_IDENTIFIER() { return GetToken(LGTemplateParser.STRUCTURE_IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRUCTURE_EQUALS() { return GetToken(LGTemplateParser.STRUCTURE_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public KeyValueStructureValueContext[] keyValueStructureValue() {
			return GetRuleContexts<KeyValueStructureValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public KeyValueStructureValueContext keyValueStructureValue(int i) {
			return GetRuleContext<KeyValueStructureValueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRUCTURE_OR_MARK() { return GetTokens(LGTemplateParser.STRUCTURE_OR_MARK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRUCTURE_OR_MARK(int i) {
			return GetToken(LGTemplateParser.STRUCTURE_OR_MARK, i);
		}
		public KeyValueStructureLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyValueStructureLine; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
			if (typedListener != null) typedListener.EnterKeyValueStructureLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
			if (typedListener != null) typedListener.ExitKeyValueStructureLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILGTemplateParserVisitor<TResult> typedVisitor = visitor as ILGTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyValueStructureLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeyValueStructureLineContext keyValueStructureLine() {
		KeyValueStructureLineContext _localctx = new KeyValueStructureLineContext(Context, State);
		EnterRule(_localctx, 14, RULE_keyValueStructureLine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 93;
			Match(STRUCTURE_IDENTIFIER);
			State = 94;
			Match(STRUCTURE_EQUALS);
			State = 95;
			keyValueStructureValue();
			State = 100;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==STRUCTURE_OR_MARK) {
				{
				{
				State = 96;
				Match(STRUCTURE_OR_MARK);
				State = 97;
				keyValueStructureValue();
				}
				}
				State = 102;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyValueStructureValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TEXT_IN_STRUCTURE_BODY() { return GetTokens(LGTemplateParser.TEXT_IN_STRUCTURE_BODY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT_IN_STRUCTURE_BODY(int i) {
			return GetToken(LGTemplateParser.TEXT_IN_STRUCTURE_BODY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionInStructureContext[] expressionInStructure() {
			return GetRuleContexts<ExpressionInStructureContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionInStructureContext expressionInStructure(int i) {
			return GetRuleContext<ExpressionInStructureContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ESCAPE_CHARACTER_IN_STRUCTURE_BODY() { return GetTokens(LGTemplateParser.ESCAPE_CHARACTER_IN_STRUCTURE_BODY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE_CHARACTER_IN_STRUCTURE_BODY(int i) {
			return GetToken(LGTemplateParser.ESCAPE_CHARACTER_IN_STRUCTURE_BODY, i);
		}
		public KeyValueStructureValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyValueStructureValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
			if (typedListener != null) typedListener.EnterKeyValueStructureValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
			if (typedListener != null) typedListener.ExitKeyValueStructureValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILGTemplateParserVisitor<TResult> typedVisitor = visitor as ILGTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyValueStructureValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeyValueStructureValueContext keyValueStructureValue() {
		KeyValueStructureValueContext _localctx = new KeyValueStructureValueContext(Context, State);
		EnterRule(_localctx, 16, RULE_keyValueStructureValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 106;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 106;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case TEXT_IN_STRUCTURE_BODY:
					{
					State = 103;
					Match(TEXT_IN_STRUCTURE_BODY);
					}
					break;
				case EXPRESSION_IN_STRUCTURE_BODY:
					{
					State = 104;
					expressionInStructure();
					}
					break;
				case ESCAPE_CHARACTER_IN_STRUCTURE_BODY:
					{
					State = 105;
					Match(ESCAPE_CHARACTER_IN_STRUCTURE_BODY);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 108;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( ((_la) & ~0x3f) == 0 && ((1L << _la) & 15032385536L) != 0 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructuredBodyEndLineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRUCTURED_BODY_END() { return GetToken(LGTemplateParser.STRUCTURED_BODY_END, 0); }
		public StructuredBodyEndLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structuredBodyEndLine; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
			if (typedListener != null) typedListener.EnterStructuredBodyEndLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
			if (typedListener != null) typedListener.ExitStructuredBodyEndLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILGTemplateParserVisitor<TResult> typedVisitor = visitor as ILGTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructuredBodyEndLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructuredBodyEndLineContext structuredBodyEndLine() {
		StructuredBodyEndLineContext _localctx = new StructuredBodyEndLineContext(Context, State);
		EnterRule(_localctx, 18, RULE_structuredBodyEndLine);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 110;
			Match(STRUCTURED_BODY_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NormalTemplateBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TemplateStringContext[] templateString() {
			return GetRuleContexts<TemplateStringContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TemplateStringContext templateString(int i) {
			return GetRuleContext<TemplateStringContext>(i);
		}
		public NormalTemplateBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_normalTemplateBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
			if (typedListener != null) typedListener.EnterNormalTemplateBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
			if (typedListener != null) typedListener.ExitNormalTemplateBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILGTemplateParserVisitor<TResult> typedVisitor = visitor as ILGTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNormalTemplateBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NormalTemplateBodyContext normalTemplateBody() {
		NormalTemplateBodyContext _localctx = new NormalTemplateBodyContext(Context, State);
		EnterRule(_localctx, 20, RULE_normalTemplateBody);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 113;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 112;
					templateString();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 115;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateStringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NormalTemplateStringContext normalTemplateString() {
			return GetRuleContext<NormalTemplateStringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ErrorTemplateStringContext errorTemplateString() {
			return GetRuleContext<ErrorTemplateStringContext>(0);
		}
		public TemplateStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateString; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
			if (typedListener != null) typedListener.EnterTemplateString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
			if (typedListener != null) typedListener.ExitTemplateString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILGTemplateParserVisitor<TResult> typedVisitor = visitor as ILGTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateStringContext templateString() {
		TemplateStringContext _localctx = new TemplateStringContext(Context, State);
		EnterRule(_localctx, 22, RULE_templateString);
		try {
			State = 119;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DASH:
				EnterOuterAlt(_localctx, 1);
				{
				State = 117;
				normalTemplateString();
				}
				break;
			case INVALID_TOKEN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 118;
				errorTemplateString();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NormalTemplateStringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DASH() { return GetToken(LGTemplateParser.DASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTILINE_PREFIX() { return GetToken(LGTemplateParser.MULTILINE_PREFIX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TEXT() { return GetTokens(LGTemplateParser.TEXT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT(int i) {
			return GetToken(LGTemplateParser.TEXT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ESCAPE_CHARACTER() { return GetTokens(LGTemplateParser.ESCAPE_CHARACTER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE_CHARACTER(int i) {
			return GetToken(LGTemplateParser.ESCAPE_CHARACTER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTILINE_SUFFIX() { return GetToken(LGTemplateParser.MULTILINE_SUFFIX, 0); }
		public NormalTemplateStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_normalTemplateString; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
			if (typedListener != null) typedListener.EnterNormalTemplateString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
			if (typedListener != null) typedListener.ExitNormalTemplateString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILGTemplateParserVisitor<TResult> typedVisitor = visitor as ILGTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNormalTemplateString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NormalTemplateStringContext normalTemplateString() {
		NormalTemplateStringContext _localctx = new NormalTemplateStringContext(Context, State);
		EnterRule(_localctx, 24, RULE_normalTemplateString);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 121;
			Match(DASH);
			State = 123;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MULTILINE_PREFIX) {
				{
				State = 122;
				Match(MULTILINE_PREFIX);
				}
			}

			State = 130;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 458752L) != 0) {
				{
				State = 128;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case TEXT:
					{
					State = 125;
					Match(TEXT);
					}
					break;
				case EXPRESSION:
					{
					State = 126;
					expression();
					}
					break;
				case ESCAPE_CHARACTER:
					{
					State = 127;
					Match(ESCAPE_CHARACTER);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 132;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 134;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MULTILINE_SUFFIX) {
				{
				State = 133;
				Match(MULTILINE_SUFFIX);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ErrorTemplateStringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INVALID_TOKEN() { return GetTokens(LGTemplateParser.INVALID_TOKEN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INVALID_TOKEN(int i) {
			return GetToken(LGTemplateParser.INVALID_TOKEN, i);
		}
		public ErrorTemplateStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_errorTemplateString; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
			if (typedListener != null) typedListener.EnterErrorTemplateString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
			if (typedListener != null) typedListener.ExitErrorTemplateString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILGTemplateParserVisitor<TResult> typedVisitor = visitor as ILGTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitErrorTemplateString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ErrorTemplateStringContext errorTemplateString() {
		ErrorTemplateStringContext _localctx = new ErrorTemplateStringContext(Context, State);
		EnterRule(_localctx, 26, RULE_errorTemplateString);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 137;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 136;
					Match(INVALID_TOKEN);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 139;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfElseTemplateBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IfConditionRuleContext[] ifConditionRule() {
			return GetRuleContexts<IfConditionRuleContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfConditionRuleContext ifConditionRule(int i) {
			return GetRuleContext<IfConditionRuleContext>(i);
		}
		public IfElseTemplateBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifElseTemplateBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
			if (typedListener != null) typedListener.EnterIfElseTemplateBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
			if (typedListener != null) typedListener.ExitIfElseTemplateBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILGTemplateParserVisitor<TResult> typedVisitor = visitor as ILGTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfElseTemplateBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfElseTemplateBodyContext ifElseTemplateBody() {
		IfElseTemplateBodyContext _localctx = new IfElseTemplateBodyContext(Context, State);
		EnterRule(_localctx, 28, RULE_ifElseTemplateBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 142;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 141;
				ifConditionRule();
				}
				}
				State = 144;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==DASH );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfConditionRuleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IfConditionContext ifCondition() {
			return GetRuleContext<IfConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NormalTemplateBodyContext normalTemplateBody() {
			return GetRuleContext<NormalTemplateBodyContext>(0);
		}
		public IfConditionRuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifConditionRule; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
			if (typedListener != null) typedListener.EnterIfConditionRule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
			if (typedListener != null) typedListener.ExitIfConditionRule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILGTemplateParserVisitor<TResult> typedVisitor = visitor as ILGTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfConditionRule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfConditionRuleContext ifConditionRule() {
		IfConditionRuleContext _localctx = new IfConditionRuleContext(Context, State);
		EnterRule(_localctx, 30, RULE_ifConditionRule);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 146;
			ifCondition();
			State = 148;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				{
				State = 147;
				normalTemplateBody();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DASH() { return GetToken(LGTemplateParser.DASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(LGTemplateParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(LGTemplateParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSEIF() { return GetToken(LGTemplateParser.ELSEIF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LGTemplateParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LGTemplateParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TEXT() { return GetTokens(LGTemplateParser.TEXT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT(int i) {
			return GetToken(LGTemplateParser.TEXT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IfConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifCondition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
			if (typedListener != null) typedListener.EnterIfCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
			if (typedListener != null) typedListener.ExitIfCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILGTemplateParserVisitor<TResult> typedVisitor = visitor as ILGTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfConditionContext ifCondition() {
		IfConditionContext _localctx = new IfConditionContext(Context, State);
		EnterRule(_localctx, 32, RULE_ifCondition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 150;
			Match(DASH);
			State = 151;
			_la = TokenStream.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 7168L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 157;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 393218L) != 0) {
				{
				State = 155;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case WS:
					{
					State = 152;
					Match(WS);
					}
					break;
				case TEXT:
					{
					State = 153;
					Match(TEXT);
					}
					break;
				case EXPRESSION:
					{
					State = 154;
					expression();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 159;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchCaseTemplateBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SwitchCaseRuleContext[] switchCaseRule() {
			return GetRuleContexts<SwitchCaseRuleContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchCaseRuleContext switchCaseRule(int i) {
			return GetRuleContext<SwitchCaseRuleContext>(i);
		}
		public SwitchCaseTemplateBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchCaseTemplateBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
			if (typedListener != null) typedListener.EnterSwitchCaseTemplateBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
			if (typedListener != null) typedListener.ExitSwitchCaseTemplateBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILGTemplateParserVisitor<TResult> typedVisitor = visitor as ILGTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchCaseTemplateBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchCaseTemplateBodyContext switchCaseTemplateBody() {
		SwitchCaseTemplateBodyContext _localctx = new SwitchCaseTemplateBodyContext(Context, State);
		EnterRule(_localctx, 34, RULE_switchCaseTemplateBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 161;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 160;
				switchCaseRule();
				}
				}
				State = 163;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==DASH );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchCaseRuleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SwitchCaseStatContext switchCaseStat() {
			return GetRuleContext<SwitchCaseStatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NormalTemplateBodyContext normalTemplateBody() {
			return GetRuleContext<NormalTemplateBodyContext>(0);
		}
		public SwitchCaseRuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchCaseRule; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
			if (typedListener != null) typedListener.EnterSwitchCaseRule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
			if (typedListener != null) typedListener.ExitSwitchCaseRule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILGTemplateParserVisitor<TResult> typedVisitor = visitor as ILGTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchCaseRule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchCaseRuleContext switchCaseRule() {
		SwitchCaseRuleContext _localctx = new SwitchCaseRuleContext(Context, State);
		EnterRule(_localctx, 36, RULE_switchCaseRule);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 165;
			switchCaseStat();
			State = 167;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				{
				State = 166;
				normalTemplateBody();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchCaseStatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DASH() { return GetToken(LGTemplateParser.DASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SWITCH() { return GetToken(LGTemplateParser.SWITCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(LGTemplateParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(LGTemplateParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(LGTemplateParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(LGTemplateParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TEXT() { return GetTokens(LGTemplateParser.TEXT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT(int i) {
			return GetToken(LGTemplateParser.TEXT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public SwitchCaseStatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchCaseStat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
			if (typedListener != null) typedListener.EnterSwitchCaseStat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
			if (typedListener != null) typedListener.ExitSwitchCaseStat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILGTemplateParserVisitor<TResult> typedVisitor = visitor as ILGTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchCaseStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchCaseStatContext switchCaseStat() {
		SwitchCaseStatContext _localctx = new SwitchCaseStatContext(Context, State);
		EnterRule(_localctx, 38, RULE_switchCaseStat);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 169;
			Match(DASH);
			State = 170;
			_la = TokenStream.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 57344L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 176;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 393218L) != 0) {
				{
				State = 174;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case WS:
					{
					State = 171;
					Match(WS);
					}
					break;
				case TEXT:
					{
					State = 172;
					Match(TEXT);
					}
					break;
				case EXPRESSION:
					{
					State = 173;
					expression();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 178;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPRESSION() { return GetToken(LGTemplateParser.EXPRESSION, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILGTemplateParserVisitor<TResult> typedVisitor = visitor as ILGTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 40, RULE_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 179;
			Match(EXPRESSION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionInStructureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPRESSION_IN_STRUCTURE_BODY() { return GetToken(LGTemplateParser.EXPRESSION_IN_STRUCTURE_BODY, 0); }
		public ExpressionInStructureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionInStructure; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
			if (typedListener != null) typedListener.EnterExpressionInStructure(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILGTemplateParserListener typedListener = listener as ILGTemplateParserListener;
			if (typedListener != null) typedListener.ExitExpressionInStructure(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILGTemplateParserVisitor<TResult> typedVisitor = visitor as ILGTemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionInStructure(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionInStructureContext expressionInStructure() {
		ExpressionInStructureContext _localctx = new ExpressionInStructureContext(Context, State);
		EnterRule(_localctx, 42, RULE_expressionInStructure);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 181;
			Match(EXPRESSION_IN_STRUCTURE_BODY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,33,184,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		1,0,1,0,1,0,1,1,1,1,1,1,1,1,3,1,52,8,1,1,2,1,2,3,2,56,8,2,1,2,1,2,4,2,
		60,8,2,11,2,12,2,61,3,2,64,8,2,1,2,3,2,67,8,2,1,3,1,3,1,3,3,3,72,8,3,1,
		4,5,4,75,8,4,10,4,12,4,78,9,4,1,5,1,5,3,5,82,8,5,1,6,1,6,1,6,1,6,1,6,1,
		6,4,6,90,8,6,11,6,12,6,91,1,7,1,7,1,7,1,7,1,7,5,7,99,8,7,10,7,12,7,102,
		9,7,1,8,1,8,1,8,4,8,107,8,8,11,8,12,8,108,1,9,1,9,1,10,4,10,114,8,10,11,
		10,12,10,115,1,11,1,11,3,11,120,8,11,1,12,1,12,3,12,124,8,12,1,12,1,12,
		1,12,5,12,129,8,12,10,12,12,12,132,9,12,1,12,3,12,135,8,12,1,13,4,13,138,
		8,13,11,13,12,13,139,1,14,4,14,143,8,14,11,14,12,14,144,1,15,1,15,3,15,
		149,8,15,1,16,1,16,1,16,1,16,1,16,5,16,156,8,16,10,16,12,16,159,9,16,1,
		17,4,17,162,8,17,11,17,12,17,163,1,18,1,18,3,18,168,8,18,1,19,1,19,1,19,
		1,19,1,19,5,19,175,8,19,10,19,12,19,178,9,19,1,20,1,20,1,21,1,21,1,21,
		0,0,22,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,0,
		3,1,0,22,23,1,0,10,12,1,0,13,15,200,0,44,1,0,0,0,2,51,1,0,0,0,4,53,1,0,
		0,0,6,68,1,0,0,0,8,76,1,0,0,0,10,81,1,0,0,0,12,89,1,0,0,0,14,93,1,0,0,
		0,16,106,1,0,0,0,18,110,1,0,0,0,20,113,1,0,0,0,22,119,1,0,0,0,24,121,1,
		0,0,0,26,137,1,0,0,0,28,142,1,0,0,0,30,146,1,0,0,0,32,150,1,0,0,0,34,161,
		1,0,0,0,36,165,1,0,0,0,38,169,1,0,0,0,40,179,1,0,0,0,42,181,1,0,0,0,44,
		45,3,2,1,0,45,46,5,0,0,1,46,1,1,0,0,0,47,52,3,20,10,0,48,52,3,28,14,0,
		49,52,3,34,17,0,50,52,3,4,2,0,51,47,1,0,0,0,51,48,1,0,0,0,51,49,1,0,0,
		0,51,50,1,0,0,0,52,3,1,0,0,0,53,63,3,6,3,0,54,56,3,10,5,0,55,54,1,0,0,
		0,55,56,1,0,0,0,56,57,1,0,0,0,57,60,5,26,0,0,58,60,3,12,6,0,59,55,1,0,
		0,0,59,58,1,0,0,0,60,61,1,0,0,0,61,59,1,0,0,0,61,62,1,0,0,0,62,64,1,0,
		0,0,63,59,1,0,0,0,63,64,1,0,0,0,64,66,1,0,0,0,65,67,3,18,9,0,66,65,1,0,
		0,0,66,67,1,0,0,0,67,5,1,0,0,0,68,71,5,5,0,0,69,72,5,22,0,0,70,72,3,8,
		4,0,71,69,1,0,0,0,71,70,1,0,0,0,72,7,1,0,0,0,73,75,7,0,0,0,74,73,1,0,0,
		0,75,78,1,0,0,0,76,74,1,0,0,0,76,77,1,0,0,0,77,9,1,0,0,0,78,76,1,0,0,0,
		79,82,3,14,7,0,80,82,3,42,21,0,81,79,1,0,0,0,81,80,1,0,0,0,82,11,1,0,0,
		0,83,90,5,28,0,0,84,90,5,29,0,0,85,90,5,30,0,0,86,90,5,33,0,0,87,90,3,
		42,21,0,88,90,5,31,0,0,89,83,1,0,0,0,89,84,1,0,0,0,89,85,1,0,0,0,89,86,
		1,0,0,0,89,87,1,0,0,0,89,88,1,0,0,0,90,91,1,0,0,0,91,89,1,0,0,0,91,92,
		1,0,0,0,92,13,1,0,0,0,93,94,5,28,0,0,94,95,5,29,0,0,95,100,3,16,8,0,96,
		97,5,30,0,0,97,99,3,16,8,0,98,96,1,0,0,0,99,102,1,0,0,0,100,98,1,0,0,0,
		100,101,1,0,0,0,101,15,1,0,0,0,102,100,1,0,0,0,103,107,5,33,0,0,104,107,
		3,42,21,0,105,107,5,31,0,0,106,103,1,0,0,0,106,104,1,0,0,0,106,105,1,0,
		0,0,107,108,1,0,0,0,108,106,1,0,0,0,108,109,1,0,0,0,109,17,1,0,0,0,110,
		111,5,27,0,0,111,19,1,0,0,0,112,114,3,22,11,0,113,112,1,0,0,0,114,115,
		1,0,0,0,115,113,1,0,0,0,115,116,1,0,0,0,116,21,1,0,0,0,117,120,3,24,12,
		0,118,120,3,26,13,0,119,117,1,0,0,0,119,118,1,0,0,0,120,23,1,0,0,0,121,
		123,5,4,0,0,122,124,5,8,0,0,123,122,1,0,0,0,123,124,1,0,0,0,124,130,1,
		0,0,0,125,129,5,18,0,0,126,129,3,40,20,0,127,129,5,16,0,0,128,125,1,0,
		0,0,128,126,1,0,0,0,128,127,1,0,0,0,129,132,1,0,0,0,130,128,1,0,0,0,130,
		131,1,0,0,0,131,134,1,0,0,0,132,130,1,0,0,0,133,135,5,19,0,0,134,133,1,
		0,0,0,134,135,1,0,0,0,135,25,1,0,0,0,136,138,5,6,0,0,137,136,1,0,0,0,138,
		139,1,0,0,0,139,137,1,0,0,0,139,140,1,0,0,0,140,27,1,0,0,0,141,143,3,30,
		15,0,142,141,1,0,0,0,143,144,1,0,0,0,144,142,1,0,0,0,144,145,1,0,0,0,145,
		29,1,0,0,0,146,148,3,32,16,0,147,149,3,20,10,0,148,147,1,0,0,0,148,149,
		1,0,0,0,149,31,1,0,0,0,150,151,5,4,0,0,151,157,7,1,0,0,152,156,5,1,0,0,
		153,156,5,18,0,0,154,156,3,40,20,0,155,152,1,0,0,0,155,153,1,0,0,0,155,
		154,1,0,0,0,156,159,1,0,0,0,157,155,1,0,0,0,157,158,1,0,0,0,158,33,1,0,
		0,0,159,157,1,0,0,0,160,162,3,36,18,0,161,160,1,0,0,0,162,163,1,0,0,0,
		163,161,1,0,0,0,163,164,1,0,0,0,164,35,1,0,0,0,165,167,3,38,19,0,166,168,
		3,20,10,0,167,166,1,0,0,0,167,168,1,0,0,0,168,37,1,0,0,0,169,170,5,4,0,
		0,170,176,7,2,0,0,171,175,5,1,0,0,172,175,5,18,0,0,173,175,3,40,20,0,174,
		171,1,0,0,0,174,172,1,0,0,0,174,173,1,0,0,0,175,178,1,0,0,0,176,174,1,
		0,0,0,176,177,1,0,0,0,177,39,1,0,0,0,178,176,1,0,0,0,179,180,5,17,0,0,
		180,41,1,0,0,0,181,182,5,32,0,0,182,43,1,0,0,0,29,51,55,59,61,63,66,71,
		76,81,89,91,100,106,108,115,119,123,128,130,134,139,144,148,155,157,163,
		167,174,176
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
